// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

package helper

import (
	"hash/crc64"
	"math/rand"
	"strconv"
	"strings"
	"time"
)

const (
	namePrefix string = "ausm-csp-"
)

// CreateName creates a name for resources created with
// CSP Connector to help identifying these resources.
//
// The form of the name is as follows:
// ausm-csp-<CRC-64 hashed identified>[-suffix]
// Example names:
// ausm-csp-982CE62C7BA91558
// ausm-csp-982CE62C7BA91558-mysuffix
func CreateName(identifier string, suffix string) string {
	table := crc64.MakeTable(crc64.ECMA)
	checksum := crc64.Checksum([]byte(identifier), table)
	name := namePrefix + strconv.FormatUint(checksum, 16)
	if suffix != "" {
		name += "-" + suffix
	}
	return name
}

const letterBytes = "abcdefghijklmnopqrstuvwxyz0123456789"

func randStringBytes(n int) string {
	rand.Seed(time.Now().UnixNano())
	b := make([]byte, n)
	for i := range b {
		b[i] = letterBytes[rand.Intn(len(letterBytes))]
	}
	return string(b)
}

// CreateNameWithRand follows the same pattern as CreateName
// but additionally adds 6 random alphanumerical characters
// at the end to decrease the chance of name conflict after
// a dash character.
func CreateNameWithRand(identifier string, suffix string) string {
	return CreateName(identifier, suffix) + randStringBytes(6)
}

// NameCreatedForIdentifier is a check if the generated name
// was actually generated for the provided identifier.
func NameCreatedForIdentifier(name, identifier string) bool {
	generated := CreateName(identifier, "")
	return strings.HasPrefix(name, generated)
}

// NameCreatedByScript is a check if the generated name
// was actually generated by the script.
//
// It just checks if the name has our name prefix.
func NameCreatedByScript(name string) bool {
	return strings.HasPrefix(name, namePrefix)
}
