// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package infra;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "types.proto";
import "types_k8s.proto";

option go_package = "./;infrapb";


// CloudProvider service definition
service CloudProviderService {
    rpc ListAccounts (ListAccountsRequest) returns (ListAccountsResponse) {}

    rpc ListRegions (ListRegionsRequest ) returns (ListRegionsResponse) {}

    rpc ListVPC (ListVPCRequest) returns (ListVPCResponse) {}
    rpc GetVPCIndex (GetVPCIndexRequest) returns (GetVPCIndexResponse) {}

    rpc ListInstances (ListInstancesRequest) returns (ListInstancesResponse) {}

    rpc GetSubnet (GetSubnetRequest) returns (GetSubnetResponse) {}

    rpc ListSubnets (ListSubnetsRequest) returns (ListSubnetsResponse) {}

    rpc ListACLs (ListACLsRequest) returns (ListACLsResponse) {}

    rpc ListSecurityGroups (ListSecurityGroupsRequest) returns (ListSecurityGroupsResponse) {}

    rpc ListRouteTables (ListRouteTablesRequest) returns (ListRouteTablesResponse) {}
    
    rpc ListNATGateways (ListNATGatewaysRequest) returns (ListNATGatewaysResponse) {}

    rpc ListRouters (ListRoutersRequest) returns (ListRoutersResponse) {}
    rpc ListInternetGateways (ListInternetGatewaysRequest) returns (ListInternetGatewaysResponse) {}
    rpc ListVPCEndpoints (ListVPCEndpointsRequest) returns (ListVPCEndpointsResponse) {}
    rpc ListPublicIPs (ListPublicIPsRequest) returns (ListPublicIPsResponse) {}
    rpc ListLBs (ListLBsRequest) returns (ListLBsResponse) {}
    rpc ListNetworkInterfaces (ListNetworkInterfacesRequest) returns (ListNetworkInterfacesResponse) {}
    rpc ListKeyPairs (ListKeyPairsRequest) returns (ListKeyPairsResponse) {}
    rpc ListVPNConcentrators (ListVPNConcentratorsRequest) returns (ListVPNConcentratorsResponse) {}

    // New RPC for getting VPC connectivity graph
    rpc GetVpcConnectivityGraph (GetVpcConnectivityGraphRequest) returns (GetVpcConnectivityGraphResponse) {}

  // Retrieves the connectivity graph focused on a specific instance
  rpc GetInstanceConnectivityGraph(GetInstanceConnectivityGraphRequest) returns (GetInstanceConnectivityGraphResponse);

  // Retrieves the full connectivity graph for a VPC

    // New RPCs for getting nodes and edges separately
    rpc ListVpcGraphNodes (ListVpcGraphNodesRequest) returns (ListVpcGraphNodesResponse) {}
    rpc ListVpcGraphEdges (ListVpcGraphEdgesRequest) returns (ListVpcGraphEdgesResponse) {}

    //Add New List Cloud Resource RPCs above this
    rpc GetVPCIDForCIDR (GetVPCIDForCIDRRequest) returns (GetVPCIDForCIDRResponse) {}

    rpc GetCIDRsForLabels (GetCIDRsForLabelsRequest) returns (GetCIDRsForLabelsResponse) {}

    rpc GetIPsForLabels (GetIPsForLabelsRequest) returns (GetIPsForLabelsResponse) {}

    rpc GetInstancesForLabels (GetInstancesForLabelsRequest) returns (GetInstancesForLabelsResponse) {}

    rpc GetVPCIDWithTag (GetVPCIDWithTagRequest) returns (GetVPCIDWithTagResponse) {}

    rpc ListCloudClusters (ListCloudClustersRequest) returns (ListCloudClustersResponse) {}

    rpc Summary(SummaryRequest) returns (SummaryResponse);

    rpc SearchResources (SearchResourcesRequest) returns (SearchResourcesResponse) {}
}

// VPCIndex definitions updated per request

message GetVPCIndexRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    // vpc_id is mandatory
    string vpc_id = 4;
    // Additional optional filter fields can be added as needed.
}

message GetVPCIndexResponse {
    VPCIndex vpc_index = 1;
    string last_sync_time = 17;
    Error err = 18;
}

message ListAccountsRequest {
    string provider = 1;
}

message ListAccountsResponse {
    repeated Account accounts = 1;
    Error err = 2;
}

message ListRegionsRequest {
    string provider = 1;
    string account_id = 2;
    optional Credentials creds = 3;
}

message ListRegionsResponse {
    repeated Region regions = 1;
    Error err = 2;
}

// ListVPC
message ListVPCRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    map<string, string> labels = 4;
    optional Credentials creds = 5;
}

message ListVPCResponse {
    repeated VPC vpcs = 1;
    string last_sync_time = 2;
    Error err = 3;
}

// ListInstances
message ListInstancesRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    string zone = 5;
    map<string, string> labels = 6;
    optional Credentials creds = 7;
}

message ListInstancesResponse {
    repeated Instance instances = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListACLsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListACLsResponse {
    repeated ACL acls = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListSecurityGroupsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListSecurityGroupsResponse {
    repeated SecurityGroup security_groups = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListRouteTablesRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListRouteTablesResponse {
    repeated RouteTable route_tables = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListNATGatewaysRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListNATGatewaysResponse {
    repeated NATGateway nat_gateways = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListRoutersRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListRoutersResponse {
    repeated Router routers = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListInternetGatewaysRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListInternetGatewaysResponse {
    repeated IGW igws = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListVPCEndpointsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListVPCEndpointsResponse {
    repeated VPCEndpoint veps = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListPublicIPsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListPublicIPsResponse {
    repeated PublicIP public_ips = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListLBsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListLBsResponse {
    repeated LB lbs = 1;
    string last_sync_time = 2;
    Error err = 3;
}


// GetSubnet
message GetSubnetRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    string id = 5;
    map<string, string> labels = 6;
    optional Credentials creds = 7;
}

message GetSubnetResponse {
    Subnet subnet = 1;
    Error err = 3;
}

// ListSubnets
message ListSubnetsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    string zone = 5;
    string cidr = 6;
    map<string, string> labels = 7;
    optional Credentials creds = 8;
}

message ListSubnetsResponse {
    repeated Subnet subnets = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListNetworkInterfacesRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListNetworkInterfacesResponse {
    repeated NetworkInterface network_interfaces = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListKeyPairsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListKeyPairsResponse {
    repeated KeyPair key_pairs = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message ListVPNConcentratorsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    map<string, string> labels = 4;
    optional Credentials creds = 5;
}

message ListVPNConcentratorsResponse {
    repeated VPNConcentrator vpn_concentrators = 1;
    string last_sync_time = 2;
    Error err = 3;
}   

// GetVPCIDForCIDR
message GetVPCIDForCIDRRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string cidr = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message GetVPCIDForCIDRResponse {
    string vpc_id = 1;
    Error err = 3;
}

// GetCIDRsForLabels
message GetCIDRsForLabelsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    map<string, string> labels = 4;
    optional Credentials creds = 5;
}

message GetCIDRsForLabelsResponse {
    repeated string cidrs = 1;
    Error err = 3;
}

// GetIPsForLabels
message GetIPsForLabelsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    map<string, string> labels = 4;
    optional Credentials creds = 5;
}

message GetIPsForLabelsResponse {
    repeated string ips = 1;
    Error err = 3;
}

// GetInstancesForLabels
message GetInstancesForLabelsRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message GetInstancesForLabelsResponse {
    repeated Instance instances = 1;
    Error err = 3;
}

// GetVPCIDWithTag
message GetVPCIDWithTagRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string key = 4;
    string value = 5;
    map<string, string> labels = 6;
    optional Credentials creds = 7;
}

message GetVPCIDWithTagResponse {
    string vpc_id = 1;
    Error err = 3;
}

message ListCloudClustersRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
    map<string, string> labels = 5;
    optional Credentials creds = 6;
}

message ListCloudClustersResponse {
    repeated Cluster clusters = 1;
    string last_sync_time = 2;
    Error err = 3;
}

message SummaryRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string vpc_id = 4;
}

message Counters {
    int32 accounts = 1;
    int32 vpc = 2;
    int32 subnets = 3;
    int32 route_tables = 4;
    int32 instances = 5;
    int32 clusters = 6;
    int32 pods = 7;
    int32 services = 8;
    int32 namespaces = 9;
    int32 acls = 10;
    int32 security_groups = 11;
    int32 nat_gateways = 12;
    int32 routers = 13;
    int32 igws = 14;
    int32 vpc_endpoints = 15;
    int32 public_ips = 16;
    int32 internet_gateways = 17;
}

message StatusSummary {
    map<string, int32> vm_status = 1;
    map<string, int32> pod_status = 2;
    map<string, int32> vm_types = 3;
}

message SummaryResponse {
    Counters count = 1;
    StatusSummary statuses = 2;
    Error err = 3;
}

// Request message for searching resources
message SearchResourcesRequest {
    // Filter parameters
    string filter_provider = 1; // Cloud provider (e.g., aws, gcp, azure)
    string filter_account_id = 2; // Account ID within the cloud provider
    string filter_region = 3; // Region within the cloud provider
    string filter_vpc_id = 4; // VPC ID
    string filter_zone = 5; // Zone within the region

    // Search criteria
    map<string, string> search_labels = 6; // Labels associated with the resources
    string search_name = 7; // Name of the resource
    string search_id = 8; // ID of the resource
    string search_status = 9; // Status of the resource (e.g., running, stopped)
    google.protobuf.Timestamp search_creation_time_start = 10; // Start of the creation time range
    google.protobuf.Timestamp search_creation_time_end = 11; // End of the creation time range
    google.protobuf.Timestamp search_termination_time_start = 12; // Start of the termination time range
    google.protobuf.Timestamp search_termination_time_end = 13; // End of the termination time range

    // Pagination and sorting
    int32 page_size = 14; // Number of results to return per page
    int32 page_number = 15; // Page number to return
    string sort_by = 16; // Field to sort by (e.g., name, creation_time)
    bool sort_descending = 17; // Whether to sort in descending order

    // Field mask to specify which fields to include in the response
    google.protobuf.FieldMask field_mask = 18;

    // Resource types to include in the search
    repeated string resource_types = 19; // Specify which resource types to search for (e.g., "instance", "vpc", "subnet")
}

// Response message for the search results
message SearchResourcesResponse {
    repeated Instance instances = 1;
    repeated VPC vpcs = 2;
    repeated Subnet subnets = 3;
    repeated ACL acls = 4;
    repeated SecurityGroup security_groups = 5;
    repeated RouteTable route_tables = 6;
    repeated NATGateway nat_gateways = 7;
    repeated Router routers = 8;
    repeated IGW igws = 9;
    repeated VPCEndpoint vpc_endpoints = 10;
    repeated PublicIP public_ips = 11;
    repeated Cluster clusters = 12;

    // Pagination information
    int32 total_results = 13; // Total number of results
    int32 total_pages = 14; // Total number of pages
    int32 current_page = 15; // Current page number
    // Add other resource types as needed
}

// Request message for GetVpcConnectivityGraph
message GetVpcConnectivityGraphRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    // vpc_id is mandatory to define the scope of the graph
    string vpc_id = 4;
    // Optional: Specify starting points or specific resource types to focus the graph
    // repeated string start_resource_ids = 5;
    // repeated string include_resource_types = 6;
    optional Credentials creds = 7;
}

// Response message for GetVpcConnectivityGraph
message GetVpcConnectivityGraphResponse {
    repeated VpcGraphNode nodes = 1;
    repeated VpcGraphEdge edges = 2;
    Error err = 3;
}

// Request message for getting the connectivity graph of a specific instance
message GetInstanceConnectivityGraphRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    string instance_id = 4; // ID of the instance to get the graph for
    optional Credentials creds = 5;
  }
  
  // Response message containing the nodes and edges for the instance graph
  message GetInstanceConnectivityGraphResponse {
    repeated InstanceGraphNode nodes = 1;
    repeated InstanceGraphEdge edges = 2;
  }
  

// Request message for ListVpcGraphNodes
message ListVpcGraphNodesRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    // vpc_id is mandatory to define the scope
    string vpc_id = 4;
    // Optional filters can be added if needed (e.g., filter by resource type)
    // repeated string include_resource_types = 5;
    optional Credentials creds = 6;
}

// Response message for ListVpcGraphNodes
message ListVpcGraphNodesResponse {
    repeated VpcGraphNode nodes = 1;
    Error err = 2;
}

// Request message for ListVpcGraphEdges
message ListVpcGraphEdgesRequest {
    string provider = 1;
    string account_id = 2;
    string region = 3;
    // vpc_id is mandatory to define the scope
    string vpc_id = 4;
    // Optional filters can be added if needed (e.g., filter by relationship type)
    // repeated string include_relationship_types = 5;
    optional Credentials creds = 6;
}

// Response message for ListVpcGraphEdges
message ListVpcGraphEdgesResponse {
    repeated VpcGraphEdge edges = 1;
    Error err = 2;
}
