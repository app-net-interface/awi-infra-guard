// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.3
// source: access_control.proto

package infrapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports []string `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *Ports) Reset() {
	*x = Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{0}
}

func (x *Ports) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

// AddInboundAllowRuleInVPC
type AddInboundAllowRuleInVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider         string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	DestinationVpcId string            `protobuf:"bytes,2,opt,name=destination_vpc_id,json=destinationVpcId,proto3" json:"destination_vpc_id,omitempty"`
	CidrsToAllow     []string          `protobuf:"bytes,3,rep,name=cidrs_to_allow,json=cidrsToAllow,proto3" json:"cidrs_to_allow,omitempty"`
	RuleName         string            `protobuf:"bytes,4,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	Tags             map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region           string            `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	AccountId        string            `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddInboundAllowRuleInVPCRequest) Reset() {
	*x = AddInboundAllowRuleInVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleInVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleInVPCRequest) ProtoMessage() {}

func (x *AddInboundAllowRuleInVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleInVPCRequest.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleInVPCRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{1}
}

func (x *AddInboundAllowRuleInVPCRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddInboundAllowRuleInVPCRequest) GetDestinationVpcId() string {
	if x != nil {
		return x.DestinationVpcId
	}
	return ""
}

func (x *AddInboundAllowRuleInVPCRequest) GetCidrsToAllow() []string {
	if x != nil {
		return x.CidrsToAllow
	}
	return nil
}

func (x *AddInboundAllowRuleInVPCRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AddInboundAllowRuleInVPCRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AddInboundAllowRuleInVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddInboundAllowRuleInVPCRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AddInboundAllowRuleInVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddInboundAllowRuleInVPCResponse) Reset() {
	*x = AddInboundAllowRuleInVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleInVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleInVPCResponse) ProtoMessage() {}

func (x *AddInboundAllowRuleInVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleInVPCResponse.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleInVPCResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{2}
}

// AddInboundAllowRuleByLabelsMatch
type AddInboundAllowRuleByLabelsMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId             string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName          string            `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	Labels            map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CidrsToAllow      []string          `protobuf:"bytes,5,rep,name=cidrs_to_allow,json=cidrsToAllow,proto3" json:"cidrs_to_allow,omitempty"`
	ProtocolsAndPorts map[string]*Ports `protobuf:"bytes,6,rep,name=protocols_and_ports,json=protocolsAndPorts,proto3" json:"protocols_and_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region            string            `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	AccountId         string            `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) Reset() {
	*x = AddInboundAllowRuleByLabelsMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleByLabelsMatchRequest) ProtoMessage() {}

func (x *AddInboundAllowRuleByLabelsMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleByLabelsMatchRequest.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleByLabelsMatchRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{3}
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetCidrsToAllow() []string {
	if x != nil {
		return x.CidrsToAllow
	}
	return nil
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetProtocolsAndPorts() map[string]*Ports {
	if x != nil {
		return x.ProtocolsAndPorts
	}
	return nil
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddInboundAllowRuleByLabelsMatchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AddInboundAllowRuleByLabelsMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId    string      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"` // Response fields
}

func (x *AddInboundAllowRuleByLabelsMatchResponse) Reset() {
	*x = AddInboundAllowRuleByLabelsMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleByLabelsMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleByLabelsMatchResponse) ProtoMessage() {}

func (x *AddInboundAllowRuleByLabelsMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleByLabelsMatchResponse.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleByLabelsMatchResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{4}
}

func (x *AddInboundAllowRuleByLabelsMatchResponse) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *AddInboundAllowRuleByLabelsMatchResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// AddInboundAllowRuleBySubnetMatch
type AddInboundAllowRuleBySubnetMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId             string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName          string            `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	SubnetCidrs       []string          `protobuf:"bytes,4,rep,name=subnet_cidrs,json=subnetCidrs,proto3" json:"subnet_cidrs,omitempty"`
	CidrsToAllow      []string          `protobuf:"bytes,5,rep,name=cidrs_to_allow,json=cidrsToAllow,proto3" json:"cidrs_to_allow,omitempty"`
	ProtocolsAndPorts map[string]*Ports `protobuf:"bytes,6,rep,name=protocols_and_ports,json=protocolsAndPorts,proto3" json:"protocols_and_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region            string            `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	AccountId         string            `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) Reset() {
	*x = AddInboundAllowRuleBySubnetMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleBySubnetMatchRequest) ProtoMessage() {}

func (x *AddInboundAllowRuleBySubnetMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleBySubnetMatchRequest.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleBySubnetMatchRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{5}
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetSubnetCidrs() []string {
	if x != nil {
		return x.SubnetCidrs
	}
	return nil
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetCidrsToAllow() []string {
	if x != nil {
		return x.CidrsToAllow
	}
	return nil
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetProtocolsAndPorts() map[string]*Ports {
	if x != nil {
		return x.ProtocolsAndPorts
	}
	return nil
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddInboundAllowRuleBySubnetMatchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AddInboundAllowRuleBySubnetMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId    string      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	Subnets   []*Subnet   `protobuf:"bytes,3,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *AddInboundAllowRuleBySubnetMatchResponse) Reset() {
	*x = AddInboundAllowRuleBySubnetMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleBySubnetMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleBySubnetMatchResponse) ProtoMessage() {}

func (x *AddInboundAllowRuleBySubnetMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleBySubnetMatchResponse.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleBySubnetMatchResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{6}
}

func (x *AddInboundAllowRuleBySubnetMatchResponse) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *AddInboundAllowRuleBySubnetMatchResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *AddInboundAllowRuleBySubnetMatchResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

// AddInboundAllowRuleByInstanceIPMatch
type AddInboundAllowRuleByInstanceIPMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId             string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName          string            `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	InstancesIps      []string          `protobuf:"bytes,4,rep,name=instances_ips,json=instancesIps,proto3" json:"instances_ips,omitempty"`
	CidrsToAllow      []string          `protobuf:"bytes,5,rep,name=cidrs_to_allow,json=cidrsToAllow,proto3" json:"cidrs_to_allow,omitempty"`
	ProtocolsAndPorts map[string]*Ports `protobuf:"bytes,6,rep,name=protocols_and_ports,json=protocolsAndPorts,proto3" json:"protocols_and_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region            string            `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	AccountId         string            `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) Reset() {
	*x = AddInboundAllowRuleByInstanceIPMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleByInstanceIPMatchRequest) ProtoMessage() {}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleByInstanceIPMatchRequest.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleByInstanceIPMatchRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{7}
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetInstancesIps() []string {
	if x != nil {
		return x.InstancesIps
	}
	return nil
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetCidrsToAllow() []string {
	if x != nil {
		return x.CidrsToAllow
	}
	return nil
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetProtocolsAndPorts() map[string]*Ports {
	if x != nil {
		return x.ProtocolsAndPorts
	}
	return nil
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddInboundAllowRuleByInstanceIPMatchRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AddInboundAllowRuleByInstanceIPMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId    string      `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *AddInboundAllowRuleByInstanceIPMatchResponse) Reset() {
	*x = AddInboundAllowRuleByInstanceIPMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleByInstanceIPMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleByInstanceIPMatchResponse) ProtoMessage() {}

func (x *AddInboundAllowRuleByInstanceIPMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleByInstanceIPMatchResponse.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleByInstanceIPMatchResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{8}
}

func (x *AddInboundAllowRuleByInstanceIPMatchResponse) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *AddInboundAllowRuleByInstanceIPMatchResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// AddInboundAllowRuleForLoadBalancerByDNS
type AddInboundAllowRuleForLoadBalancerByDNSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	LoadBalancerDns   string            `protobuf:"bytes,2,opt,name=load_balancer_dns,json=loadBalancerDns,proto3" json:"load_balancer_dns,omitempty"`
	VpcId             string            `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName          string            `protobuf:"bytes,4,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	CidrsToAllow      []string          `protobuf:"bytes,5,rep,name=cidrs_to_allow,json=cidrsToAllow,proto3" json:"cidrs_to_allow,omitempty"`
	ProtocolsAndPorts map[string]*Ports `protobuf:"bytes,6,rep,name=protocols_and_ports,json=protocolsAndPorts,proto3" json:"protocols_and_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region            string            `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	AccountId         string            `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) Reset() {
	*x = AddInboundAllowRuleForLoadBalancerByDNSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleForLoadBalancerByDNSRequest) ProtoMessage() {}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleForLoadBalancerByDNSRequest.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleForLoadBalancerByDNSRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{9}
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetLoadBalancerDns() string {
	if x != nil {
		return x.LoadBalancerDns
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetCidrsToAllow() []string {
	if x != nil {
		return x.CidrsToAllow
	}
	return nil
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetProtocolsAndPorts() map[string]*Ports {
	if x != nil {
		return x.ProtocolsAndPorts
	}
	return nil
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type AddInboundAllowRuleForLoadBalancerByDNSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerId string `protobuf:"bytes,1,opt,name=load_balancer_id,json=loadBalancerId,proto3" json:"load_balancer_id,omitempty"`
	RuleId         string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSResponse) Reset() {
	*x = AddInboundAllowRuleForLoadBalancerByDNSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddInboundAllowRuleForLoadBalancerByDNSResponse) ProtoMessage() {}

func (x *AddInboundAllowRuleForLoadBalancerByDNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddInboundAllowRuleForLoadBalancerByDNSResponse.ProtoReflect.Descriptor instead.
func (*AddInboundAllowRuleForLoadBalancerByDNSResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{10}
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSResponse) GetLoadBalancerId() string {
	if x != nil {
		return x.LoadBalancerId
	}
	return ""
}

func (x *AddInboundAllowRuleForLoadBalancerByDNSResponse) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

// RemoveInboundAllowRuleFromVPCByName
type RemoveInboundAllowRuleFromVPCByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName  string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	Region    string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) Reset() {
	*x = RemoveInboundAllowRuleFromVPCByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRuleFromVPCByNameRequest) ProtoMessage() {}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRuleFromVPCByNameRequest.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRuleFromVPCByNameRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoveInboundAllowRuleFromVPCByNameRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RemoveInboundAllowRuleFromVPCByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveInboundAllowRuleFromVPCByNameResponse) Reset() {
	*x = RemoveInboundAllowRuleFromVPCByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRuleFromVPCByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRuleFromVPCByNameResponse) ProtoMessage() {}

func (x *RemoveInboundAllowRuleFromVPCByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRuleFromVPCByNameResponse.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRuleFromVPCByNameResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{12}
}

// RemoveInboundAllowRulesFromVPCById
type RemoveInboundAllowRulesFromVPCByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider        string   `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId           string   `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	InstanceIds     []string `protobuf:"bytes,3,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	LoadBalancerIds []string `protobuf:"bytes,4,rep,name=load_balancer_ids,json=loadBalancerIds,proto3" json:"load_balancer_ids,omitempty"`
	RuleId          string   `protobuf:"bytes,5,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Region          string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	AccountId       string   `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) Reset() {
	*x = RemoveInboundAllowRulesFromVPCByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRulesFromVPCByIdRequest) ProtoMessage() {}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRulesFromVPCByIdRequest.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRulesFromVPCByIdRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetLoadBalancerIds() []string {
	if x != nil {
		return x.LoadBalancerIds
	}
	return nil
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoveInboundAllowRulesFromVPCByIdRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RemoveInboundAllowRulesFromVPCByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveInboundAllowRulesFromVPCByIdResponse) Reset() {
	*x = RemoveInboundAllowRulesFromVPCByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRulesFromVPCByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRulesFromVPCByIdResponse) ProtoMessage() {}

func (x *RemoveInboundAllowRulesFromVPCByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRulesFromVPCByIdResponse.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRulesFromVPCByIdResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{14}
}

// RemoveInboundAllowRuleRulesByTags
type RemoveInboundAllowRuleRulesByTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	RuleName  string            `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region    string            `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	AccountId string            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) Reset() {
	*x = RemoveInboundAllowRuleRulesByTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRuleRulesByTagsRequest) ProtoMessage() {}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRuleRulesByTagsRequest.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRuleRulesByTagsRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RemoveInboundAllowRuleRulesByTagsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RemoveInboundAllowRuleRulesByTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveInboundAllowRuleRulesByTagsResponse) Reset() {
	*x = RemoveInboundAllowRuleRulesByTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInboundAllowRuleRulesByTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInboundAllowRuleRulesByTagsResponse) ProtoMessage() {}

func (x *RemoveInboundAllowRuleRulesByTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInboundAllowRuleRulesByTagsResponse.ProtoReflect.Descriptor instead.
func (*RemoveInboundAllowRuleRulesByTagsResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{16}
}

// RefreshInboundAllowRule
type RefreshInboundAllowRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider            string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	RuleId              string            `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	CidrsToAdd          []string          `protobuf:"bytes,3,rep,name=cidrs_to_add,json=cidrsToAdd,proto3" json:"cidrs_to_add,omitempty"`
	CidrsToRemove       []string          `protobuf:"bytes,4,rep,name=cidrs_to_remove,json=cidrsToRemove,proto3" json:"cidrs_to_remove,omitempty"`
	DestinationLabels   map[string]string `protobuf:"bytes,5,rep,name=destination_labels,json=destinationLabels,proto3" json:"destination_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DestinationPrefixes []string          `protobuf:"bytes,6,rep,name=destination_prefixes,json=destinationPrefixes,proto3" json:"destination_prefixes,omitempty"`
	DestinationVpcId    string            `protobuf:"bytes,7,opt,name=destination_vpc_id,json=destinationVpcId,proto3" json:"destination_vpc_id,omitempty"`
	ProtocolsAndPorts   map[string]*Ports `protobuf:"bytes,8,rep,name=protocols_and_ports,json=protocolsAndPorts,proto3" json:"protocols_and_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region              string            `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty"`
	AccountId           string            `protobuf:"bytes,10,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *RefreshInboundAllowRuleRequest) Reset() {
	*x = RefreshInboundAllowRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInboundAllowRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInboundAllowRuleRequest) ProtoMessage() {}

func (x *RefreshInboundAllowRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInboundAllowRuleRequest.ProtoReflect.Descriptor instead.
func (*RefreshInboundAllowRuleRequest) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{17}
}

func (x *RefreshInboundAllowRuleRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RefreshInboundAllowRuleRequest) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *RefreshInboundAllowRuleRequest) GetCidrsToAdd() []string {
	if x != nil {
		return x.CidrsToAdd
	}
	return nil
}

func (x *RefreshInboundAllowRuleRequest) GetCidrsToRemove() []string {
	if x != nil {
		return x.CidrsToRemove
	}
	return nil
}

func (x *RefreshInboundAllowRuleRequest) GetDestinationLabels() map[string]string {
	if x != nil {
		return x.DestinationLabels
	}
	return nil
}

func (x *RefreshInboundAllowRuleRequest) GetDestinationPrefixes() []string {
	if x != nil {
		return x.DestinationPrefixes
	}
	return nil
}

func (x *RefreshInboundAllowRuleRequest) GetDestinationVpcId() string {
	if x != nil {
		return x.DestinationVpcId
	}
	return ""
}

func (x *RefreshInboundAllowRuleRequest) GetProtocolsAndPorts() map[string]*Ports {
	if x != nil {
		return x.ProtocolsAndPorts
	}
	return nil
}

func (x *RefreshInboundAllowRuleRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RefreshInboundAllowRuleRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type RefreshInboundAllowRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	Subnets   []*Subnet   `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *RefreshInboundAllowRuleResponse) Reset() {
	*x = RefreshInboundAllowRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_access_control_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshInboundAllowRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshInboundAllowRuleResponse) ProtoMessage() {}

func (x *RefreshInboundAllowRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_access_control_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshInboundAllowRuleResponse.ProtoReflect.Descriptor instead.
func (*RefreshInboundAllowRuleResponse) Descriptor() ([]byte, []int) {
	return file_access_control_proto_rawDescGZIP(), []int{18}
}

func (x *RefreshInboundAllowRuleResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RefreshInboundAllowRuleResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

var File_access_control_proto protoreflect.FileDescriptor

var file_access_control_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x1a, 0x0b, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x05, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x1f, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x6e, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x64, 0x72, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x69, 0x64, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x22, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x64, 0x72, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x75, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x72, 0x0a, 0x28, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xc4, 0x03, 0x0a, 0x27,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x69, 0x64, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x75, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41,
	0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x52,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9b, 0x01, 0x0a, 0x28, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x22, 0xce, 0x03, 0x0a, 0x2b, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x49, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x64, 0x72, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x69, 0x64, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x79, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x52, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x76, 0x0a, 0x2c, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xdb, 0x03, 0x0a, 0x2e, 0x41, 0x64,
	0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x42, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x44, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x69, 0x64, 0x72,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x69, 0x64, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x7c,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x52, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x2f, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x79, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x2a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x2b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb9, 0x02, 0x0a, 0x28, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x29,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x05, 0x0a, 0x1e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x69, 0x64, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x73, 0x54, 0x6f,
	0x41, 0x64, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x69,
	0x64, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x41,
	0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x44,
	0x0a, 0x16, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x52, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x41, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x79, 0x0a, 0x1f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x32, 0xdc, 0x09, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x18,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x56, 0x50, 0x43, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x56, 0x50,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x20,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x24,
	0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x50,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9a, 0x01, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x79, 0x44, 0x4e, 0x53, 0x12, 0x35, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x79, 0x44, 0x4e, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x42, 0x79, 0x44,
	0x4e, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a,
	0x23, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01,
	0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x56, 0x50, 0x43, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x21,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_access_control_proto_rawDescOnce sync.Once
	file_access_control_proto_rawDescData = file_access_control_proto_rawDesc
)

func file_access_control_proto_rawDescGZIP() []byte {
	file_access_control_proto_rawDescOnce.Do(func() {
		file_access_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_access_control_proto_rawDescData)
	})
	return file_access_control_proto_rawDescData
}

var file_access_control_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_access_control_proto_goTypes = []interface{}{
	(*Ports)(nil),                                           // 0: infra.Ports
	(*AddInboundAllowRuleInVPCRequest)(nil),                 // 1: infra.AddInboundAllowRuleInVPCRequest
	(*AddInboundAllowRuleInVPCResponse)(nil),                // 2: infra.AddInboundAllowRuleInVPCResponse
	(*AddInboundAllowRuleByLabelsMatchRequest)(nil),         // 3: infra.AddInboundAllowRuleByLabelsMatchRequest
	(*AddInboundAllowRuleByLabelsMatchResponse)(nil),        // 4: infra.AddInboundAllowRuleByLabelsMatchResponse
	(*AddInboundAllowRuleBySubnetMatchRequest)(nil),         // 5: infra.AddInboundAllowRuleBySubnetMatchRequest
	(*AddInboundAllowRuleBySubnetMatchResponse)(nil),        // 6: infra.AddInboundAllowRuleBySubnetMatchResponse
	(*AddInboundAllowRuleByInstanceIPMatchRequest)(nil),     // 7: infra.AddInboundAllowRuleByInstanceIPMatchRequest
	(*AddInboundAllowRuleByInstanceIPMatchResponse)(nil),    // 8: infra.AddInboundAllowRuleByInstanceIPMatchResponse
	(*AddInboundAllowRuleForLoadBalancerByDNSRequest)(nil),  // 9: infra.AddInboundAllowRuleForLoadBalancerByDNSRequest
	(*AddInboundAllowRuleForLoadBalancerByDNSResponse)(nil), // 10: infra.AddInboundAllowRuleForLoadBalancerByDNSResponse
	(*RemoveInboundAllowRuleFromVPCByNameRequest)(nil),      // 11: infra.RemoveInboundAllowRuleFromVPCByNameRequest
	(*RemoveInboundAllowRuleFromVPCByNameResponse)(nil),     // 12: infra.RemoveInboundAllowRuleFromVPCByNameResponse
	(*RemoveInboundAllowRulesFromVPCByIdRequest)(nil),       // 13: infra.RemoveInboundAllowRulesFromVPCByIdRequest
	(*RemoveInboundAllowRulesFromVPCByIdResponse)(nil),      // 14: infra.RemoveInboundAllowRulesFromVPCByIdResponse
	(*RemoveInboundAllowRuleRulesByTagsRequest)(nil),        // 15: infra.RemoveInboundAllowRuleRulesByTagsRequest
	(*RemoveInboundAllowRuleRulesByTagsResponse)(nil),       // 16: infra.RemoveInboundAllowRuleRulesByTagsResponse
	(*RefreshInboundAllowRuleRequest)(nil),                  // 17: infra.RefreshInboundAllowRuleRequest
	(*RefreshInboundAllowRuleResponse)(nil),                 // 18: infra.RefreshInboundAllowRuleResponse
	nil,                                                     // 19: infra.AddInboundAllowRuleInVPCRequest.TagsEntry
	nil,                                                     // 20: infra.AddInboundAllowRuleByLabelsMatchRequest.LabelsEntry
	nil,                                                     // 21: infra.AddInboundAllowRuleByLabelsMatchRequest.ProtocolsAndPortsEntry
	nil,                                                     // 22: infra.AddInboundAllowRuleBySubnetMatchRequest.ProtocolsAndPortsEntry
	nil,                                                     // 23: infra.AddInboundAllowRuleByInstanceIPMatchRequest.ProtocolsAndPortsEntry
	nil,                                                     // 24: infra.AddInboundAllowRuleForLoadBalancerByDNSRequest.ProtocolsAndPortsEntry
	nil,                                                     // 25: infra.RemoveInboundAllowRuleRulesByTagsRequest.TagsEntry
	nil,                                                     // 26: infra.RefreshInboundAllowRuleRequest.DestinationLabelsEntry
	nil,                                                     // 27: infra.RefreshInboundAllowRuleRequest.ProtocolsAndPortsEntry
	(*Instance)(nil),                                        // 28: infra.Instance
	(*Subnet)(nil),                                          // 29: infra.Subnet
}
var file_access_control_proto_depIdxs = []int32{
	19, // 0: infra.AddInboundAllowRuleInVPCRequest.tags:type_name -> infra.AddInboundAllowRuleInVPCRequest.TagsEntry
	20, // 1: infra.AddInboundAllowRuleByLabelsMatchRequest.labels:type_name -> infra.AddInboundAllowRuleByLabelsMatchRequest.LabelsEntry
	21, // 2: infra.AddInboundAllowRuleByLabelsMatchRequest.protocols_and_ports:type_name -> infra.AddInboundAllowRuleByLabelsMatchRequest.ProtocolsAndPortsEntry
	28, // 3: infra.AddInboundAllowRuleByLabelsMatchResponse.instances:type_name -> infra.Instance
	22, // 4: infra.AddInboundAllowRuleBySubnetMatchRequest.protocols_and_ports:type_name -> infra.AddInboundAllowRuleBySubnetMatchRequest.ProtocolsAndPortsEntry
	28, // 5: infra.AddInboundAllowRuleBySubnetMatchResponse.instances:type_name -> infra.Instance
	29, // 6: infra.AddInboundAllowRuleBySubnetMatchResponse.subnets:type_name -> infra.Subnet
	23, // 7: infra.AddInboundAllowRuleByInstanceIPMatchRequest.protocols_and_ports:type_name -> infra.AddInboundAllowRuleByInstanceIPMatchRequest.ProtocolsAndPortsEntry
	28, // 8: infra.AddInboundAllowRuleByInstanceIPMatchResponse.instances:type_name -> infra.Instance
	24, // 9: infra.AddInboundAllowRuleForLoadBalancerByDNSRequest.protocols_and_ports:type_name -> infra.AddInboundAllowRuleForLoadBalancerByDNSRequest.ProtocolsAndPortsEntry
	25, // 10: infra.RemoveInboundAllowRuleRulesByTagsRequest.tags:type_name -> infra.RemoveInboundAllowRuleRulesByTagsRequest.TagsEntry
	26, // 11: infra.RefreshInboundAllowRuleRequest.destination_labels:type_name -> infra.RefreshInboundAllowRuleRequest.DestinationLabelsEntry
	27, // 12: infra.RefreshInboundAllowRuleRequest.protocols_and_ports:type_name -> infra.RefreshInboundAllowRuleRequest.ProtocolsAndPortsEntry
	28, // 13: infra.RefreshInboundAllowRuleResponse.instances:type_name -> infra.Instance
	29, // 14: infra.RefreshInboundAllowRuleResponse.subnets:type_name -> infra.Subnet
	0,  // 15: infra.AddInboundAllowRuleByLabelsMatchRequest.ProtocolsAndPortsEntry.value:type_name -> infra.Ports
	0,  // 16: infra.AddInboundAllowRuleBySubnetMatchRequest.ProtocolsAndPortsEntry.value:type_name -> infra.Ports
	0,  // 17: infra.AddInboundAllowRuleByInstanceIPMatchRequest.ProtocolsAndPortsEntry.value:type_name -> infra.Ports
	0,  // 18: infra.AddInboundAllowRuleForLoadBalancerByDNSRequest.ProtocolsAndPortsEntry.value:type_name -> infra.Ports
	0,  // 19: infra.RefreshInboundAllowRuleRequest.ProtocolsAndPortsEntry.value:type_name -> infra.Ports
	1,  // 20: infra.AccessControlService.AddInboundAllowRuleInVPC:input_type -> infra.AddInboundAllowRuleInVPCRequest
	3,  // 21: infra.AccessControlService.AddInboundAllowRuleByLabelsMatch:input_type -> infra.AddInboundAllowRuleByLabelsMatchRequest
	5,  // 22: infra.AccessControlService.AddInboundAllowRuleBySubnetMatch:input_type -> infra.AddInboundAllowRuleBySubnetMatchRequest
	7,  // 23: infra.AccessControlService.AddInboundAllowRuleByInstanceIPMatch:input_type -> infra.AddInboundAllowRuleByInstanceIPMatchRequest
	9,  // 24: infra.AccessControlService.AddInboundAllowRuleForLoadBalancerByDNS:input_type -> infra.AddInboundAllowRuleForLoadBalancerByDNSRequest
	11, // 25: infra.AccessControlService.RemoveInboundAllowRuleFromVPCByName:input_type -> infra.RemoveInboundAllowRuleFromVPCByNameRequest
	13, // 26: infra.AccessControlService.RemoveInboundAllowRulesFromVPCById:input_type -> infra.RemoveInboundAllowRulesFromVPCByIdRequest
	15, // 27: infra.AccessControlService.RemoveInboundAllowRuleRulesByTags:input_type -> infra.RemoveInboundAllowRuleRulesByTagsRequest
	17, // 28: infra.AccessControlService.RefreshInboundAllowRule:input_type -> infra.RefreshInboundAllowRuleRequest
	2,  // 29: infra.AccessControlService.AddInboundAllowRuleInVPC:output_type -> infra.AddInboundAllowRuleInVPCResponse
	4,  // 30: infra.AccessControlService.AddInboundAllowRuleByLabelsMatch:output_type -> infra.AddInboundAllowRuleByLabelsMatchResponse
	6,  // 31: infra.AccessControlService.AddInboundAllowRuleBySubnetMatch:output_type -> infra.AddInboundAllowRuleBySubnetMatchResponse
	8,  // 32: infra.AccessControlService.AddInboundAllowRuleByInstanceIPMatch:output_type -> infra.AddInboundAllowRuleByInstanceIPMatchResponse
	10, // 33: infra.AccessControlService.AddInboundAllowRuleForLoadBalancerByDNS:output_type -> infra.AddInboundAllowRuleForLoadBalancerByDNSResponse
	12, // 34: infra.AccessControlService.RemoveInboundAllowRuleFromVPCByName:output_type -> infra.RemoveInboundAllowRuleFromVPCByNameResponse
	14, // 35: infra.AccessControlService.RemoveInboundAllowRulesFromVPCById:output_type -> infra.RemoveInboundAllowRulesFromVPCByIdResponse
	16, // 36: infra.AccessControlService.RemoveInboundAllowRuleRulesByTags:output_type -> infra.RemoveInboundAllowRuleRulesByTagsResponse
	18, // 37: infra.AccessControlService.RefreshInboundAllowRule:output_type -> infra.RefreshInboundAllowRuleResponse
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_access_control_proto_init() }
func file_access_control_proto_init() {
	if File_access_control_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_access_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleInVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleInVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleByLabelsMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleByLabelsMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleBySubnetMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleBySubnetMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleByInstanceIPMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleByInstanceIPMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleForLoadBalancerByDNSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddInboundAllowRuleForLoadBalancerByDNSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRuleFromVPCByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRuleFromVPCByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRulesFromVPCByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRulesFromVPCByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRuleRulesByTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInboundAllowRuleRulesByTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInboundAllowRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_access_control_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshInboundAllowRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_access_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_access_control_proto_goTypes,
		DependencyIndexes: file_access_control_proto_depIdxs,
		MessageInfos:      file_access_control_proto_msgTypes,
	}.Build()
	File_access_control_proto = out.File
	file_access_control_proto_rawDesc = nil
	file_access_control_proto_goTypes = nil
	file_access_control_proto_depIdxs = nil
}
