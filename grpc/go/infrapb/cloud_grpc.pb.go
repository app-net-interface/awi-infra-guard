// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: cloud.proto

package infrapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CloudProviderService_ListAccounts_FullMethodName          = "/infra.CloudProviderService/ListAccounts"
	CloudProviderService_ListRegions_FullMethodName           = "/infra.CloudProviderService/ListRegions"
	CloudProviderService_ListVPC_FullMethodName               = "/infra.CloudProviderService/ListVPC"
	CloudProviderService_ListInstances_FullMethodName         = "/infra.CloudProviderService/ListInstances"
	CloudProviderService_GetSubnet_FullMethodName             = "/infra.CloudProviderService/GetSubnet"
	CloudProviderService_ListSubnets_FullMethodName           = "/infra.CloudProviderService/ListSubnets"
	CloudProviderService_ListACLs_FullMethodName              = "/infra.CloudProviderService/ListACLs"
	CloudProviderService_ListSecurityGroups_FullMethodName    = "/infra.CloudProviderService/ListSecurityGroups"
	CloudProviderService_ListRouteTables_FullMethodName       = "/infra.CloudProviderService/ListRouteTables"
	CloudProviderService_ListNATGateways_FullMethodName       = "/infra.CloudProviderService/ListNATGateways"
	CloudProviderService_ListRouters_FullMethodName           = "/infra.CloudProviderService/ListRouters"
	CloudProviderService_ListInternetGateways_FullMethodName  = "/infra.CloudProviderService/ListInternetGateways"
	CloudProviderService_ListVPCEndpoints_FullMethodName      = "/infra.CloudProviderService/ListVPCEndpoints"
	CloudProviderService_ListPublicIPs_FullMethodName         = "/infra.CloudProviderService/ListPublicIPs"
	CloudProviderService_ListLBs_FullMethodName               = "/infra.CloudProviderService/ListLBs"
	CloudProviderService_ListNetworkInterfaces_FullMethodName = "/infra.CloudProviderService/ListNetworkInterfaces"
	CloudProviderService_GetVPCIDForCIDR_FullMethodName       = "/infra.CloudProviderService/GetVPCIDForCIDR"
	CloudProviderService_GetCIDRsForLabels_FullMethodName     = "/infra.CloudProviderService/GetCIDRsForLabels"
	CloudProviderService_GetIPsForLabels_FullMethodName       = "/infra.CloudProviderService/GetIPsForLabels"
	CloudProviderService_GetInstancesForLabels_FullMethodName = "/infra.CloudProviderService/GetInstancesForLabels"
	CloudProviderService_GetVPCIDWithTag_FullMethodName       = "/infra.CloudProviderService/GetVPCIDWithTag"
	CloudProviderService_ListCloudClusters_FullMethodName     = "/infra.CloudProviderService/ListCloudClusters"
	CloudProviderService_Summary_FullMethodName               = "/infra.CloudProviderService/Summary"
	CloudProviderService_SearchResources_FullMethodName       = "/infra.CloudProviderService/SearchResources"
)

// CloudProviderServiceClient is the client API for CloudProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CloudProvider service definition
type CloudProviderServiceClient interface {
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	ListVPC(ctx context.Context, in *ListVPCRequest, opts ...grpc.CallOption) (*ListVPCResponse, error)
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error)
	ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error)
	ListACLs(ctx context.Context, in *ListACLsRequest, opts ...grpc.CallOption) (*ListACLsResponse, error)
	ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error)
	ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error)
	ListNATGateways(ctx context.Context, in *ListNATGatewaysRequest, opts ...grpc.CallOption) (*ListNATGatewaysResponse, error)
	ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error)
	ListInternetGateways(ctx context.Context, in *ListInternetGatewaysRequest, opts ...grpc.CallOption) (*ListInternetGatewaysResponse, error)
	ListVPCEndpoints(ctx context.Context, in *ListVPCEndpointsRequest, opts ...grpc.CallOption) (*ListVPCEndpointsResponse, error)
	ListPublicIPs(ctx context.Context, in *ListPublicIPsRequest, opts ...grpc.CallOption) (*ListPublicIPsResponse, error)
	ListLBs(ctx context.Context, in *ListLBsRequest, opts ...grpc.CallOption) (*ListLBsResponse, error)
	ListNetworkInterfaces(ctx context.Context, in *ListNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNetworkInterfacesResponse, error)
	// Add New List Cloud Resource RPCs above this
	GetVPCIDForCIDR(ctx context.Context, in *GetVPCIDForCIDRRequest, opts ...grpc.CallOption) (*GetVPCIDForCIDRResponse, error)
	GetCIDRsForLabels(ctx context.Context, in *GetCIDRsForLabelsRequest, opts ...grpc.CallOption) (*GetCIDRsForLabelsResponse, error)
	GetIPsForLabels(ctx context.Context, in *GetIPsForLabelsRequest, opts ...grpc.CallOption) (*GetIPsForLabelsResponse, error)
	GetInstancesForLabels(ctx context.Context, in *GetInstancesForLabelsRequest, opts ...grpc.CallOption) (*GetInstancesForLabelsResponse, error)
	GetVPCIDWithTag(ctx context.Context, in *GetVPCIDWithTagRequest, opts ...grpc.CallOption) (*GetVPCIDWithTagResponse, error)
	ListCloudClusters(ctx context.Context, in *ListCloudClustersRequest, opts ...grpc.CallOption) (*ListCloudClustersResponse, error)
	Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error)
	SearchResources(ctx context.Context, in *SearchResourcesRequest, opts ...grpc.CallOption) (*SearchResourcesResponse, error)
}

type cloudProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudProviderServiceClient(cc grpc.ClientConnInterface) CloudProviderServiceClient {
	return &cloudProviderServiceClient{cc}
}

func (c *cloudProviderServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegionsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListRegions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListVPC(ctx context.Context, in *ListVPCRequest, opts ...grpc.CallOption) (*ListVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubnetResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetSubnet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListSubnets(ctx context.Context, in *ListSubnetsRequest, opts ...grpc.CallOption) (*ListSubnetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubnetsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListSubnets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListACLs(ctx context.Context, in *ListACLsRequest, opts ...grpc.CallOption) (*ListACLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListACLsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListACLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityGroupsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListSecurityGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListRouteTables(ctx context.Context, in *ListRouteTablesRequest, opts ...grpc.CallOption) (*ListRouteTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRouteTablesResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListRouteTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListNATGateways(ctx context.Context, in *ListNATGatewaysRequest, opts ...grpc.CallOption) (*ListNATGatewaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNATGatewaysResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListNATGateways_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListRouters(ctx context.Context, in *ListRoutersRequest, opts ...grpc.CallOption) (*ListRoutersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutersResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListRouters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListInternetGateways(ctx context.Context, in *ListInternetGatewaysRequest, opts ...grpc.CallOption) (*ListInternetGatewaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInternetGatewaysResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListInternetGateways_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListVPCEndpoints(ctx context.Context, in *ListVPCEndpointsRequest, opts ...grpc.CallOption) (*ListVPCEndpointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCEndpointsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListVPCEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListPublicIPs(ctx context.Context, in *ListPublicIPsRequest, opts ...grpc.CallOption) (*ListPublicIPsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicIPsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListPublicIPs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListLBs(ctx context.Context, in *ListLBsRequest, opts ...grpc.CallOption) (*ListLBsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLBsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListLBs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListNetworkInterfaces(ctx context.Context, in *ListNetworkInterfacesRequest, opts ...grpc.CallOption) (*ListNetworkInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworkInterfacesResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListNetworkInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetVPCIDForCIDR(ctx context.Context, in *GetVPCIDForCIDRRequest, opts ...grpc.CallOption) (*GetVPCIDForCIDRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVPCIDForCIDRResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetVPCIDForCIDR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetCIDRsForLabels(ctx context.Context, in *GetCIDRsForLabelsRequest, opts ...grpc.CallOption) (*GetCIDRsForLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCIDRsForLabelsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetCIDRsForLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetIPsForLabels(ctx context.Context, in *GetIPsForLabelsRequest, opts ...grpc.CallOption) (*GetIPsForLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIPsForLabelsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetIPsForLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetInstancesForLabels(ctx context.Context, in *GetInstancesForLabelsRequest, opts ...grpc.CallOption) (*GetInstancesForLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInstancesForLabelsResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetInstancesForLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) GetVPCIDWithTag(ctx context.Context, in *GetVPCIDWithTagRequest, opts ...grpc.CallOption) (*GetVPCIDWithTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVPCIDWithTagResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_GetVPCIDWithTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) ListCloudClusters(ctx context.Context, in *ListCloudClustersRequest, opts ...grpc.CallOption) (*ListCloudClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCloudClustersResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_ListCloudClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) Summary(ctx context.Context, in *SummaryRequest, opts ...grpc.CallOption) (*SummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummaryResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_Summary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudProviderServiceClient) SearchResources(ctx context.Context, in *SearchResourcesRequest, opts ...grpc.CallOption) (*SearchResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResourcesResponse)
	err := c.cc.Invoke(ctx, CloudProviderService_SearchResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudProviderServiceServer is the server API for CloudProviderService service.
// All implementations must embed UnimplementedCloudProviderServiceServer
// for forward compatibility
//
// CloudProvider service definition
type CloudProviderServiceServer interface {
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	ListVPC(context.Context, *ListVPCRequest) (*ListVPCResponse, error)
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error)
	ListACLs(context.Context, *ListACLsRequest) (*ListACLsResponse, error)
	ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error)
	ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error)
	ListNATGateways(context.Context, *ListNATGatewaysRequest) (*ListNATGatewaysResponse, error)
	ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error)
	ListInternetGateways(context.Context, *ListInternetGatewaysRequest) (*ListInternetGatewaysResponse, error)
	ListVPCEndpoints(context.Context, *ListVPCEndpointsRequest) (*ListVPCEndpointsResponse, error)
	ListPublicIPs(context.Context, *ListPublicIPsRequest) (*ListPublicIPsResponse, error)
	ListLBs(context.Context, *ListLBsRequest) (*ListLBsResponse, error)
	ListNetworkInterfaces(context.Context, *ListNetworkInterfacesRequest) (*ListNetworkInterfacesResponse, error)
	// Add New List Cloud Resource RPCs above this
	GetVPCIDForCIDR(context.Context, *GetVPCIDForCIDRRequest) (*GetVPCIDForCIDRResponse, error)
	GetCIDRsForLabels(context.Context, *GetCIDRsForLabelsRequest) (*GetCIDRsForLabelsResponse, error)
	GetIPsForLabels(context.Context, *GetIPsForLabelsRequest) (*GetIPsForLabelsResponse, error)
	GetInstancesForLabels(context.Context, *GetInstancesForLabelsRequest) (*GetInstancesForLabelsResponse, error)
	GetVPCIDWithTag(context.Context, *GetVPCIDWithTagRequest) (*GetVPCIDWithTagResponse, error)
	ListCloudClusters(context.Context, *ListCloudClustersRequest) (*ListCloudClustersResponse, error)
	Summary(context.Context, *SummaryRequest) (*SummaryResponse, error)
	SearchResources(context.Context, *SearchResourcesRequest) (*SearchResourcesResponse, error)
	mustEmbedUnimplementedCloudProviderServiceServer()
}

// UnimplementedCloudProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudProviderServiceServer struct {
}

func (UnimplementedCloudProviderServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegions not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListVPC(context.Context, *ListVPCRequest) (*ListVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPC not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListSubnets(context.Context, *ListSubnetsRequest) (*ListSubnetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListACLs(context.Context, *ListACLsRequest) (*ListACLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListACLs not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListRouteTables(context.Context, *ListRouteTablesRequest) (*ListRouteTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouteTables not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListNATGateways(context.Context, *ListNATGatewaysRequest) (*ListNATGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNATGateways not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListRouters(context.Context, *ListRoutersRequest) (*ListRoutersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouters not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListInternetGateways(context.Context, *ListInternetGatewaysRequest) (*ListInternetGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternetGateways not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListVPCEndpoints(context.Context, *ListVPCEndpointsRequest) (*ListVPCEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCEndpoints not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListPublicIPs(context.Context, *ListPublicIPsRequest) (*ListPublicIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicIPs not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListLBs(context.Context, *ListLBsRequest) (*ListLBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLBs not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListNetworkInterfaces(context.Context, *ListNetworkInterfacesRequest) (*ListNetworkInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworkInterfaces not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetVPCIDForCIDR(context.Context, *GetVPCIDForCIDRRequest) (*GetVPCIDForCIDRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCIDForCIDR not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetCIDRsForLabels(context.Context, *GetCIDRsForLabelsRequest) (*GetCIDRsForLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCIDRsForLabels not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetIPsForLabels(context.Context, *GetIPsForLabelsRequest) (*GetIPsForLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPsForLabels not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetInstancesForLabels(context.Context, *GetInstancesForLabelsRequest) (*GetInstancesForLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstancesForLabels not implemented")
}
func (UnimplementedCloudProviderServiceServer) GetVPCIDWithTag(context.Context, *GetVPCIDWithTagRequest) (*GetVPCIDWithTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPCIDWithTag not implemented")
}
func (UnimplementedCloudProviderServiceServer) ListCloudClusters(context.Context, *ListCloudClustersRequest) (*ListCloudClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudClusters not implemented")
}
func (UnimplementedCloudProviderServiceServer) Summary(context.Context, *SummaryRequest) (*SummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summary not implemented")
}
func (UnimplementedCloudProviderServiceServer) SearchResources(context.Context, *SearchResourcesRequest) (*SearchResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResources not implemented")
}
func (UnimplementedCloudProviderServiceServer) mustEmbedUnimplementedCloudProviderServiceServer() {}

// UnsafeCloudProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudProviderServiceServer will
// result in compilation errors.
type UnsafeCloudProviderServiceServer interface {
	mustEmbedUnimplementedCloudProviderServiceServer()
}

func RegisterCloudProviderServiceServer(s grpc.ServiceRegistrar, srv CloudProviderServiceServer) {
	s.RegisterService(&CloudProviderService_ServiceDesc, srv)
}

func _CloudProviderService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListVPC(ctx, req.(*ListVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListSubnets(ctx, req.(*ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListACLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListACLs(ctx, req.(*ListACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListSecurityGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListSecurityGroups(ctx, req.(*ListSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListRouteTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListRouteTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListRouteTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListRouteTables(ctx, req.(*ListRouteTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListNATGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNATGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListNATGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListNATGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListNATGateways(ctx, req.(*ListNATGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListRouters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListRouters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListRouters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListRouters(ctx, req.(*ListRoutersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListInternetGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInternetGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListInternetGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListInternetGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListInternetGateways(ctx, req.(*ListInternetGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListVPCEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListVPCEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListVPCEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListVPCEndpoints(ctx, req.(*ListVPCEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListPublicIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListPublicIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListPublicIPs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListPublicIPs(ctx, req.(*ListPublicIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListLBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListLBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListLBs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListLBs(ctx, req.(*ListLBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListNetworkInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListNetworkInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListNetworkInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListNetworkInterfaces(ctx, req.(*ListNetworkInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetVPCIDForCIDR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCIDForCIDRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetVPCIDForCIDR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetVPCIDForCIDR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetVPCIDForCIDR(ctx, req.(*GetVPCIDForCIDRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetCIDRsForLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCIDRsForLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetCIDRsForLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetCIDRsForLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetCIDRsForLabels(ctx, req.(*GetCIDRsForLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetIPsForLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPsForLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetIPsForLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetIPsForLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetIPsForLabels(ctx, req.(*GetIPsForLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetInstancesForLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstancesForLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetInstancesForLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetInstancesForLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetInstancesForLabels(ctx, req.(*GetInstancesForLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_GetVPCIDWithTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCIDWithTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).GetVPCIDWithTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_GetVPCIDWithTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).GetVPCIDWithTag(ctx, req.(*GetVPCIDWithTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_ListCloudClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).ListCloudClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_ListCloudClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).ListCloudClusters(ctx, req.(*ListCloudClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_Summary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).Summary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_Summary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).Summary(ctx, req.(*SummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudProviderService_SearchResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudProviderServiceServer).SearchResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudProviderService_SearchResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudProviderServiceServer).SearchResources(ctx, req.(*SearchResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudProviderService_ServiceDesc is the grpc.ServiceDesc for CloudProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infra.CloudProviderService",
	HandlerType: (*CloudProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _CloudProviderService_ListAccounts_Handler,
		},
		{
			MethodName: "ListRegions",
			Handler:    _CloudProviderService_ListRegions_Handler,
		},
		{
			MethodName: "ListVPC",
			Handler:    _CloudProviderService_ListVPC_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _CloudProviderService_ListInstances_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _CloudProviderService_GetSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _CloudProviderService_ListSubnets_Handler,
		},
		{
			MethodName: "ListACLs",
			Handler:    _CloudProviderService_ListACLs_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _CloudProviderService_ListSecurityGroups_Handler,
		},
		{
			MethodName: "ListRouteTables",
			Handler:    _CloudProviderService_ListRouteTables_Handler,
		},
		{
			MethodName: "ListNATGateways",
			Handler:    _CloudProviderService_ListNATGateways_Handler,
		},
		{
			MethodName: "ListRouters",
			Handler:    _CloudProviderService_ListRouters_Handler,
		},
		{
			MethodName: "ListInternetGateways",
			Handler:    _CloudProviderService_ListInternetGateways_Handler,
		},
		{
			MethodName: "ListVPCEndpoints",
			Handler:    _CloudProviderService_ListVPCEndpoints_Handler,
		},
		{
			MethodName: "ListPublicIPs",
			Handler:    _CloudProviderService_ListPublicIPs_Handler,
		},
		{
			MethodName: "ListLBs",
			Handler:    _CloudProviderService_ListLBs_Handler,
		},
		{
			MethodName: "ListNetworkInterfaces",
			Handler:    _CloudProviderService_ListNetworkInterfaces_Handler,
		},
		{
			MethodName: "GetVPCIDForCIDR",
			Handler:    _CloudProviderService_GetVPCIDForCIDR_Handler,
		},
		{
			MethodName: "GetCIDRsForLabels",
			Handler:    _CloudProviderService_GetCIDRsForLabels_Handler,
		},
		{
			MethodName: "GetIPsForLabels",
			Handler:    _CloudProviderService_GetIPsForLabels_Handler,
		},
		{
			MethodName: "GetInstancesForLabels",
			Handler:    _CloudProviderService_GetInstancesForLabels_Handler,
		},
		{
			MethodName: "GetVPCIDWithTag",
			Handler:    _CloudProviderService_GetVPCIDWithTag_Handler,
		},
		{
			MethodName: "ListCloudClusters",
			Handler:    _CloudProviderService_ListCloudClusters_Handler,
		},
		{
			MethodName: "Summary",
			Handler:    _CloudProviderService_Summary_Handler,
		},
		{
			MethodName: "SearchResources",
			Handler:    _CloudProviderService_SearchResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.proto",
}
