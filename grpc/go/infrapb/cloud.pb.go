// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: cloud.proto

package infrapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *ListAccountsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Err      *Error     `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *ListAccountsResponse) GetAccounts() []*Account {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *ListAccountsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string       `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	AccountId string       `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials `protobuf:"bytes,3,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListRegionsRequest) Reset() {
	*x = ListRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsRequest) ProtoMessage() {}

func (x *ListRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsRequest.ProtoReflect.Descriptor instead.
func (*ListRegionsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *ListRegionsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListRegionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListRegionsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
	Err     *Error    `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListRegionsResponse) Reset() {
	*x = ListRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsResponse) ProtoMessage() {}

func (x *ListRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsResponse.ProtoReflect.Descriptor instead.
func (*ListRegionsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{3}
}

func (x *ListRegionsResponse) GetRegions() []*Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ListRegionsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// ListVPC
type ListVPCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Region    string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,5,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListVPCRequest) Reset() {
	*x = ListVPCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCRequest) ProtoMessage() {}

func (x *ListVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCRequest.ProtoReflect.Descriptor instead.
func (*ListVPCRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{4}
}

func (x *ListVPCRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListVPCRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListVPCRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListVPCRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListVPCRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListVPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpcs         []*VPC `protobuf:"bytes,1,rep,name=vpcs,proto3" json:"vpcs,omitempty"`
	LastSyncTime string `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListVPCResponse) Reset() {
	*x = ListVPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCResponse) ProtoMessage() {}

func (x *ListVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCResponse.ProtoReflect.Descriptor instead.
func (*ListVPCResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{5}
}

func (x *ListVPCResponse) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *ListVPCResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListVPCResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// ListInstances
type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Zone      string            `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region    string            `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	AccountId string            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,7,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{6}
}

func (x *ListInstancesRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListInstancesRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListInstancesRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListInstancesRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListInstancesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListInstancesRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances    []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	LastSyncTime string      `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error      `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{7}
}

func (x *ListInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ListInstancesResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListInstancesResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListACLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListACLsRequest) Reset() {
	*x = ListACLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsRequest) ProtoMessage() {}

func (x *ListACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsRequest.ProtoReflect.Descriptor instead.
func (*ListACLsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{8}
}

func (x *ListACLsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListACLsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListACLsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListACLsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListACLsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListACLsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListACLsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acls         []*ACL `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty"`
	LastSyncTime string `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListACLsResponse) Reset() {
	*x = ListACLsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListACLsResponse) ProtoMessage() {}

func (x *ListACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListACLsResponse.ProtoReflect.Descriptor instead.
func (*ListACLsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{9}
}

func (x *ListACLsResponse) GetAcls() []*ACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *ListACLsResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListACLsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListSecurityGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListSecurityGroupsRequest) Reset() {
	*x = ListSecurityGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsRequest) ProtoMessage() {}

func (x *ListSecurityGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{10}
}

func (x *ListSecurityGroupsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListSecurityGroupsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListSecurityGroupsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListSecurityGroupsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListSecurityGroupsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListSecurityGroupsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListSecurityGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroups []*SecurityGroup `protobuf:"bytes,1,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	LastSyncTime   string           `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err            *Error           `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListSecurityGroupsResponse) Reset() {
	*x = ListSecurityGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecurityGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecurityGroupsResponse) ProtoMessage() {}

func (x *ListSecurityGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecurityGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListSecurityGroupsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{11}
}

func (x *ListSecurityGroupsResponse) GetSecurityGroups() []*SecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ListSecurityGroupsResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListSecurityGroupsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListRouteTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListRouteTablesRequest) Reset() {
	*x = ListRouteTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouteTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesRequest) ProtoMessage() {}

func (x *ListRouteTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesRequest.ProtoReflect.Descriptor instead.
func (*ListRouteTablesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{12}
}

func (x *ListRouteTablesRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListRouteTablesRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListRouteTablesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListRouteTablesRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListRouteTablesRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListRouteTablesRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListRouteTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteTables  []*RouteTable `protobuf:"bytes,1,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	LastSyncTime string        `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error        `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListRouteTablesResponse) Reset() {
	*x = ListRouteTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouteTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouteTablesResponse) ProtoMessage() {}

func (x *ListRouteTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouteTablesResponse.ProtoReflect.Descriptor instead.
func (*ListRouteTablesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{13}
}

func (x *ListRouteTablesResponse) GetRouteTables() []*RouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *ListRouteTablesResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListRouteTablesResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListNATGatewaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListNATGatewaysRequest) Reset() {
	*x = ListNATGatewaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNATGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNATGatewaysRequest) ProtoMessage() {}

func (x *ListNATGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNATGatewaysRequest.ProtoReflect.Descriptor instead.
func (*ListNATGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{14}
}

func (x *ListNATGatewaysRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListNATGatewaysRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListNATGatewaysRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListNATGatewaysRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListNATGatewaysRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListNATGatewaysRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListNATGatewaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatGateways  []*NATGateway `protobuf:"bytes,1,rep,name=nat_gateways,json=natGateways,proto3" json:"nat_gateways,omitempty"`
	LastSyncTime string        `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error        `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListNATGatewaysResponse) Reset() {
	*x = ListNATGatewaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNATGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNATGatewaysResponse) ProtoMessage() {}

func (x *ListNATGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNATGatewaysResponse.ProtoReflect.Descriptor instead.
func (*ListNATGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{15}
}

func (x *ListNATGatewaysResponse) GetNatGateways() []*NATGateway {
	if x != nil {
		return x.NatGateways
	}
	return nil
}

func (x *ListNATGatewaysResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListNATGatewaysResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListRoutersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListRoutersRequest) Reset() {
	*x = ListRoutersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutersRequest) ProtoMessage() {}

func (x *ListRoutersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutersRequest.ProtoReflect.Descriptor instead.
func (*ListRoutersRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{16}
}

func (x *ListRoutersRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListRoutersRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListRoutersRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListRoutersRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListRoutersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListRoutersRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListRoutersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routers      []*Router `protobuf:"bytes,1,rep,name=routers,proto3" json:"routers,omitempty"`
	LastSyncTime string    `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error    `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListRoutersResponse) Reset() {
	*x = ListRoutersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutersResponse) ProtoMessage() {}

func (x *ListRoutersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutersResponse.ProtoReflect.Descriptor instead.
func (*ListRoutersResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{17}
}

func (x *ListRoutersResponse) GetRouters() []*Router {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *ListRoutersResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListRoutersResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListInternetGatewaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListInternetGatewaysRequest) Reset() {
	*x = ListInternetGatewaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInternetGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInternetGatewaysRequest) ProtoMessage() {}

func (x *ListInternetGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInternetGatewaysRequest.ProtoReflect.Descriptor instead.
func (*ListInternetGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{18}
}

func (x *ListInternetGatewaysRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListInternetGatewaysRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListInternetGatewaysRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListInternetGatewaysRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListInternetGatewaysRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListInternetGatewaysRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListInternetGatewaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Igws         []*IGW `protobuf:"bytes,1,rep,name=igws,proto3" json:"igws,omitempty"`
	LastSyncTime string `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListInternetGatewaysResponse) Reset() {
	*x = ListInternetGatewaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInternetGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInternetGatewaysResponse) ProtoMessage() {}

func (x *ListInternetGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInternetGatewaysResponse.ProtoReflect.Descriptor instead.
func (*ListInternetGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{19}
}

func (x *ListInternetGatewaysResponse) GetIgws() []*IGW {
	if x != nil {
		return x.Igws
	}
	return nil
}

func (x *ListInternetGatewaysResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListInternetGatewaysResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListVPCEndpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Veps         []*VPCEndpoint `protobuf:"bytes,1,rep,name=veps,proto3" json:"veps,omitempty"`
	LastSyncTime string         `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error         `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListVPCEndpointsResponse) Reset() {
	*x = ListVPCEndpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCEndpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCEndpointsResponse) ProtoMessage() {}

func (x *ListVPCEndpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCEndpointsResponse.ProtoReflect.Descriptor instead.
func (*ListVPCEndpointsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{20}
}

func (x *ListVPCEndpointsResponse) GetVeps() []*VPCEndpoint {
	if x != nil {
		return x.Veps
	}
	return nil
}

func (x *ListVPCEndpointsResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListVPCEndpointsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListPublicIPsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListPublicIPsRequest) Reset() {
	*x = ListPublicIPsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicIPsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicIPsRequest) ProtoMessage() {}

func (x *ListPublicIPsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicIPsRequest.ProtoReflect.Descriptor instead.
func (*ListPublicIPsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{21}
}

func (x *ListPublicIPsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListPublicIPsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListPublicIPsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListPublicIPsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListPublicIPsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListPublicIPsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListPublicIPsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicIps    []*PublicIP `protobuf:"bytes,1,rep,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
	LastSyncTime string      `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error      `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListPublicIPsResponse) Reset() {
	*x = ListPublicIPsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicIPsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicIPsResponse) ProtoMessage() {}

func (x *ListPublicIPsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicIPsResponse.ProtoReflect.Descriptor instead.
func (*ListPublicIPsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{22}
}

func (x *ListPublicIPsResponse) GetPublicIps() []*PublicIP {
	if x != nil {
		return x.PublicIps
	}
	return nil
}

func (x *ListPublicIPsResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListPublicIPsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListVPCEndpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListVPCEndpointsRequest) Reset() {
	*x = ListVPCEndpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVPCEndpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCEndpointsRequest) ProtoMessage() {}

func (x *ListVPCEndpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCEndpointsRequest.ProtoReflect.Descriptor instead.
func (*ListVPCEndpointsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{23}
}

func (x *ListVPCEndpointsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListVPCEndpointsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListVPCEndpointsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListVPCEndpointsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListVPCEndpointsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListVPCEndpointsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

// GetSubnet
type GetSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Id        string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Region    string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,7,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetSubnetRequest) Reset() {
	*x = GetSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetRequest) ProtoMessage() {}

func (x *GetSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{24}
}

func (x *GetSubnetRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetSubnetRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetSubnetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSubnetRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetSubnetRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetSubnetRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetSubnetRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Err    *Error  `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetSubnetResponse) Reset() {
	*x = GetSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetResponse) ProtoMessage() {}

func (x *GetSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetResponse.ProtoReflect.Descriptor instead.
func (*GetSubnetResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{25}
}

func (x *GetSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnetResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// ListSubnets
type ListSubnetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Zone      string            `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	Cidr      string            `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Labels    map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region    string            `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	AccountId string            `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,8,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{26}
}

func (x *ListSubnetsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListSubnetsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListSubnetsRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListSubnetsRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *ListSubnetsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListSubnetsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListSubnetsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListSubnetsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListSubnetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets      []*Subnet `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	LastSyncTime string    `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error    `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListSubnetsResponse) Reset() {
	*x = ListSubnetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsResponse) ProtoMessage() {}

func (x *ListSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{27}
}

func (x *ListSubnetsResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *ListSubnetsResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListSubnetsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// GetVPCIDForCIDR
type GetVPCIDForCIDRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Cidr      string            `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Region    string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetVPCIDForCIDRRequest) Reset() {
	*x = GetVPCIDForCIDRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCIDForCIDRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCIDForCIDRRequest) ProtoMessage() {}

func (x *GetVPCIDForCIDRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCIDForCIDRRequest.ProtoReflect.Descriptor instead.
func (*GetVPCIDForCIDRRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{28}
}

func (x *GetVPCIDForCIDRRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetVPCIDForCIDRRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *GetVPCIDForCIDRRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetVPCIDForCIDRRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetVPCIDForCIDRRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetVPCIDForCIDRRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetVPCIDForCIDRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Err   *Error `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetVPCIDForCIDRResponse) Reset() {
	*x = GetVPCIDForCIDRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCIDForCIDRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCIDForCIDRResponse) ProtoMessage() {}

func (x *GetVPCIDForCIDRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCIDForCIDRResponse.ProtoReflect.Descriptor instead.
func (*GetVPCIDForCIDRResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{29}
}

func (x *GetVPCIDForCIDRResponse) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetVPCIDForCIDRResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// GetCIDRsForLabels
type GetCIDRsForLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Region    string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,5,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetCIDRsForLabelsRequest) Reset() {
	*x = GetCIDRsForLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCIDRsForLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCIDRsForLabelsRequest) ProtoMessage() {}

func (x *GetCIDRsForLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCIDRsForLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetCIDRsForLabelsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{30}
}

func (x *GetCIDRsForLabelsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetCIDRsForLabelsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetCIDRsForLabelsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetCIDRsForLabelsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetCIDRsForLabelsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetCIDRsForLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidrs []string `protobuf:"bytes,1,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	Err   *Error   `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetCIDRsForLabelsResponse) Reset() {
	*x = GetCIDRsForLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCIDRsForLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCIDRsForLabelsResponse) ProtoMessage() {}

func (x *GetCIDRsForLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCIDRsForLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetCIDRsForLabelsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{31}
}

func (x *GetCIDRsForLabelsResponse) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *GetCIDRsForLabelsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// GetIPsForLabels
type GetIPsForLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Region    string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,5,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetIPsForLabelsRequest) Reset() {
	*x = GetIPsForLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPsForLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPsForLabelsRequest) ProtoMessage() {}

func (x *GetIPsForLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPsForLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetIPsForLabelsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{32}
}

func (x *GetIPsForLabelsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetIPsForLabelsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetIPsForLabelsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetIPsForLabelsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetIPsForLabelsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetIPsForLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	Err *Error   `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetIPsForLabelsResponse) Reset() {
	*x = GetIPsForLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPsForLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPsForLabelsResponse) ProtoMessage() {}

func (x *GetIPsForLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPsForLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetIPsForLabelsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{33}
}

func (x *GetIPsForLabelsResponse) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *GetIPsForLabelsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// GetInstancesForLabels
type GetInstancesForLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	VpcId     string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Labels    map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Region    string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetInstancesForLabelsRequest) Reset() {
	*x = GetInstancesForLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstancesForLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstancesForLabelsRequest) ProtoMessage() {}

func (x *GetInstancesForLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstancesForLabelsRequest.ProtoReflect.Descriptor instead.
func (*GetInstancesForLabelsRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{34}
}

func (x *GetInstancesForLabelsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetInstancesForLabelsRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetInstancesForLabelsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetInstancesForLabelsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetInstancesForLabelsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetInstancesForLabelsRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetInstancesForLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	Err       *Error      `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetInstancesForLabelsResponse) Reset() {
	*x = GetInstancesForLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstancesForLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstancesForLabelsResponse) ProtoMessage() {}

func (x *GetInstancesForLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstancesForLabelsResponse.ProtoReflect.Descriptor instead.
func (*GetInstancesForLabelsResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{35}
}

func (x *GetInstancesForLabelsResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *GetInstancesForLabelsResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// GetVPCIDWithTag
type GetVPCIDWithTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Key       string            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     string            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Region    string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Labels    map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,7,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *GetVPCIDWithTagRequest) Reset() {
	*x = GetVPCIDWithTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCIDWithTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCIDWithTagRequest) ProtoMessage() {}

func (x *GetVPCIDWithTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCIDWithTagRequest.ProtoReflect.Descriptor instead.
func (*GetVPCIDWithTagRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{36}
}

func (x *GetVPCIDWithTagRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetVPCIDWithTagRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetVPCIDWithTagRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetVPCIDWithTagRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetVPCIDWithTagRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetVPCIDWithTagRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetVPCIDWithTagRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type GetVPCIDWithTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Err   *Error `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetVPCIDWithTagResponse) Reset() {
	*x = GetVPCIDWithTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVPCIDWithTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVPCIDWithTagResponse) ProtoMessage() {}

func (x *GetVPCIDWithTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVPCIDWithTagResponse.ProtoReflect.Descriptor instead.
func (*GetVPCIDWithTagResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{37}
}

func (x *GetVPCIDWithTagResponse) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *GetVPCIDWithTagResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type ListCloudClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  string            `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Region    string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	VpcId     string            `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Labels    map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountId string            `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Creds     *Credentials      `protobuf:"bytes,6,opt,name=creds,proto3,oneof" json:"creds,omitempty"`
}

func (x *ListCloudClustersRequest) Reset() {
	*x = ListCloudClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudClustersRequest) ProtoMessage() {}

func (x *ListCloudClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudClustersRequest.ProtoReflect.Descriptor instead.
func (*ListCloudClustersRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{38}
}

func (x *ListCloudClustersRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListCloudClustersRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListCloudClustersRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListCloudClustersRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListCloudClustersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ListCloudClustersRequest) GetCreds() *Credentials {
	if x != nil {
		return x.Creds
	}
	return nil
}

type ListCloudClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters     []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	LastSyncTime string     `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	Err          *Error     `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ListCloudClustersResponse) Reset() {
	*x = ListCloudClustersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCloudClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCloudClustersResponse) ProtoMessage() {}

func (x *ListCloudClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCloudClustersResponse.ProtoReflect.Descriptor instead.
func (*ListCloudClustersResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{39}
}

func (x *ListCloudClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListCloudClustersResponse) GetLastSyncTime() string {
	if x != nil {
		return x.LastSyncTime
	}
	return ""
}

func (x *ListCloudClustersResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

type SummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *SummaryRequest) Reset() {
	*x = SummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryRequest) ProtoMessage() {}

func (x *SummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryRequest.ProtoReflect.Descriptor instead.
func (*SummaryRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{40}
}

func (x *SummaryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

type Counters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts       int32 `protobuf:"varint,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	Vpc            int32 `protobuf:"varint,2,opt,name=vpc,proto3" json:"vpc,omitempty"`
	Subnets        int32 `protobuf:"varint,3,opt,name=subnets,proto3" json:"subnets,omitempty"`
	RouteTables    int32 `protobuf:"varint,4,opt,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	Instances      int32 `protobuf:"varint,5,opt,name=instances,proto3" json:"instances,omitempty"`
	Clusters       int32 `protobuf:"varint,6,opt,name=clusters,proto3" json:"clusters,omitempty"`
	Pods           int32 `protobuf:"varint,7,opt,name=pods,proto3" json:"pods,omitempty"`
	Services       int32 `protobuf:"varint,8,opt,name=services,proto3" json:"services,omitempty"`
	Namespaces     int32 `protobuf:"varint,9,opt,name=namespaces,proto3" json:"namespaces,omitempty"`
	Acls           int32 `protobuf:"varint,10,opt,name=acls,proto3" json:"acls,omitempty"`
	SecurityGroups int32 `protobuf:"varint,11,opt,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	NatGateways    int32 `protobuf:"varint,12,opt,name=nat_gateways,json=natGateways,proto3" json:"nat_gateways,omitempty"`
	Routers        int32 `protobuf:"varint,13,opt,name=routers,proto3" json:"routers,omitempty"`
	Igws           int32 `protobuf:"varint,14,opt,name=igws,proto3" json:"igws,omitempty"`
	VpcEndpoints   int32 `protobuf:"varint,15,opt,name=vpc_endpoints,json=vpcEndpoints,proto3" json:"vpc_endpoints,omitempty"`
	PublicIps      int32 `protobuf:"varint,16,opt,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
}

func (x *Counters) Reset() {
	*x = Counters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counters) ProtoMessage() {}

func (x *Counters) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counters.ProtoReflect.Descriptor instead.
func (*Counters) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{41}
}

func (x *Counters) GetAccounts() int32 {
	if x != nil {
		return x.Accounts
	}
	return 0
}

func (x *Counters) GetVpc() int32 {
	if x != nil {
		return x.Vpc
	}
	return 0
}

func (x *Counters) GetSubnets() int32 {
	if x != nil {
		return x.Subnets
	}
	return 0
}

func (x *Counters) GetRouteTables() int32 {
	if x != nil {
		return x.RouteTables
	}
	return 0
}

func (x *Counters) GetInstances() int32 {
	if x != nil {
		return x.Instances
	}
	return 0
}

func (x *Counters) GetClusters() int32 {
	if x != nil {
		return x.Clusters
	}
	return 0
}

func (x *Counters) GetPods() int32 {
	if x != nil {
		return x.Pods
	}
	return 0
}

func (x *Counters) GetServices() int32 {
	if x != nil {
		return x.Services
	}
	return 0
}

func (x *Counters) GetNamespaces() int32 {
	if x != nil {
		return x.Namespaces
	}
	return 0
}

func (x *Counters) GetAcls() int32 {
	if x != nil {
		return x.Acls
	}
	return 0
}

func (x *Counters) GetSecurityGroups() int32 {
	if x != nil {
		return x.SecurityGroups
	}
	return 0
}

func (x *Counters) GetNatGateways() int32 {
	if x != nil {
		return x.NatGateways
	}
	return 0
}

func (x *Counters) GetRouters() int32 {
	if x != nil {
		return x.Routers
	}
	return 0
}

func (x *Counters) GetIgws() int32 {
	if x != nil {
		return x.Igws
	}
	return 0
}

func (x *Counters) GetVpcEndpoints() int32 {
	if x != nil {
		return x.VpcEndpoints
	}
	return 0
}

func (x *Counters) GetPublicIps() int32 {
	if x != nil {
		return x.PublicIps
	}
	return 0
}

type StatusSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmStatus  map[string]int32 `protobuf:"bytes,1,rep,name=vm_status,json=vmStatus,proto3" json:"vm_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PodStatus map[string]int32 `protobuf:"bytes,2,rep,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VmTypes   map[string]int32 `protobuf:"bytes,3,rep,name=vm_types,json=vmTypes,proto3" json:"vm_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StatusSummary) Reset() {
	*x = StatusSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSummary) ProtoMessage() {}

func (x *StatusSummary) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSummary.ProtoReflect.Descriptor instead.
func (*StatusSummary) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{42}
}

func (x *StatusSummary) GetVmStatus() map[string]int32 {
	if x != nil {
		return x.VmStatus
	}
	return nil
}

func (x *StatusSummary) GetPodStatus() map[string]int32 {
	if x != nil {
		return x.PodStatus
	}
	return nil
}

func (x *StatusSummary) GetVmTypes() map[string]int32 {
	if x != nil {
		return x.VmTypes
	}
	return nil
}

type SummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    *Counters      `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	Statuses *StatusSummary `protobuf:"bytes,2,opt,name=statuses,proto3" json:"statuses,omitempty"`
	Err      *Error         `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *SummaryResponse) Reset() {
	*x = SummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryResponse) ProtoMessage() {}

func (x *SummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryResponse.ProtoReflect.Descriptor instead.
func (*SummaryResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{43}
}

func (x *SummaryResponse) GetCount() *Counters {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *SummaryResponse) GetStatuses() *StatusSummary {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *SummaryResponse) GetErr() *Error {
	if x != nil {
		return x.Err
	}
	return nil
}

// Request message for searching resources
type SearchResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter parameters
	FilterProvider  string `protobuf:"bytes,1,opt,name=filter_provider,json=filterProvider,proto3" json:"filter_provider,omitempty"`      // Cloud provider (e.g., aws, gcp, azure)
	FilterAccountId string `protobuf:"bytes,2,opt,name=filter_account_id,json=filterAccountId,proto3" json:"filter_account_id,omitempty"` // Account ID within the cloud provider
	FilterRegion    string `protobuf:"bytes,3,opt,name=filter_region,json=filterRegion,proto3" json:"filter_region,omitempty"`            // Region within the cloud provider
	FilterVpcId     string `protobuf:"bytes,4,opt,name=filter_vpc_id,json=filterVpcId,proto3" json:"filter_vpc_id,omitempty"`             // VPC ID
	FilterZone      string `protobuf:"bytes,5,opt,name=filter_zone,json=filterZone,proto3" json:"filter_zone,omitempty"`                  // Zone within the region
	// Search criteria
	SearchLabels               map[string]string      `protobuf:"bytes,6,rep,name=search_labels,json=searchLabels,proto3" json:"search_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Labels associated with the resources
	SearchName                 string                 `protobuf:"bytes,7,opt,name=search_name,json=searchName,proto3" json:"search_name,omitempty"`                                                                                               // Name of the resource
	SearchId                   string                 `protobuf:"bytes,8,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`                                                                                                     // ID of the resource
	SearchStatus               string                 `protobuf:"bytes,9,opt,name=search_status,json=searchStatus,proto3" json:"search_status,omitempty"`                                                                                         // Status of the resource (e.g., running, stopped)
	SearchCreationTimeStart    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=search_creation_time_start,json=searchCreationTimeStart,proto3" json:"search_creation_time_start,omitempty"`                                                   // Start of the creation time range
	SearchCreationTimeEnd      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=search_creation_time_end,json=searchCreationTimeEnd,proto3" json:"search_creation_time_end,omitempty"`                                                         // End of the creation time range
	SearchTerminationTimeStart *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=search_termination_time_start,json=searchTerminationTimeStart,proto3" json:"search_termination_time_start,omitempty"`                                          // Start of the termination time range
	SearchTerminationTimeEnd   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=search_termination_time_end,json=searchTerminationTimeEnd,proto3" json:"search_termination_time_end,omitempty"`                                                // End of the termination time range
	// Pagination and sorting
	PageSize       int32  `protobuf:"varint,14,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                   // Number of results to return per page
	PageNumber     int32  `protobuf:"varint,15,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`             // Page number to return
	SortBy         string `protobuf:"bytes,16,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                          // Field to sort by (e.g., name, creation_time)
	SortDescending bool   `protobuf:"varint,17,opt,name=sort_descending,json=sortDescending,proto3" json:"sort_descending,omitempty"` // Whether to sort in descending order
	// Field mask to specify which fields to include in the response
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,18,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Resource types to include in the search
	ResourceTypes []string `protobuf:"bytes,19,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"` // Specify which resource types to search for (e.g., "instance", "vpc", "subnet")
}

func (x *SearchResourcesRequest) Reset() {
	*x = SearchResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourcesRequest) ProtoMessage() {}

func (x *SearchResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourcesRequest.ProtoReflect.Descriptor instead.
func (*SearchResourcesRequest) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{44}
}

func (x *SearchResourcesRequest) GetFilterProvider() string {
	if x != nil {
		return x.FilterProvider
	}
	return ""
}

func (x *SearchResourcesRequest) GetFilterAccountId() string {
	if x != nil {
		return x.FilterAccountId
	}
	return ""
}

func (x *SearchResourcesRequest) GetFilterRegion() string {
	if x != nil {
		return x.FilterRegion
	}
	return ""
}

func (x *SearchResourcesRequest) GetFilterVpcId() string {
	if x != nil {
		return x.FilterVpcId
	}
	return ""
}

func (x *SearchResourcesRequest) GetFilterZone() string {
	if x != nil {
		return x.FilterZone
	}
	return ""
}

func (x *SearchResourcesRequest) GetSearchLabels() map[string]string {
	if x != nil {
		return x.SearchLabels
	}
	return nil
}

func (x *SearchResourcesRequest) GetSearchName() string {
	if x != nil {
		return x.SearchName
	}
	return ""
}

func (x *SearchResourcesRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *SearchResourcesRequest) GetSearchStatus() string {
	if x != nil {
		return x.SearchStatus
	}
	return ""
}

func (x *SearchResourcesRequest) GetSearchCreationTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchCreationTimeStart
	}
	return nil
}

func (x *SearchResourcesRequest) GetSearchCreationTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchCreationTimeEnd
	}
	return nil
}

func (x *SearchResourcesRequest) GetSearchTerminationTimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchTerminationTimeStart
	}
	return nil
}

func (x *SearchResourcesRequest) GetSearchTerminationTimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.SearchTerminationTimeEnd
	}
	return nil
}

func (x *SearchResourcesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchResourcesRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *SearchResourcesRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *SearchResourcesRequest) GetSortDescending() bool {
	if x != nil {
		return x.SortDescending
	}
	return false
}

func (x *SearchResourcesRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *SearchResourcesRequest) GetResourceTypes() []string {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

// Response message for the search results
type SearchResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances      []*Instance      `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	Vpcs           []*VPC           `protobuf:"bytes,2,rep,name=vpcs,proto3" json:"vpcs,omitempty"`
	Subnets        []*Subnet        `protobuf:"bytes,3,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Acls           []*ACL           `protobuf:"bytes,4,rep,name=acls,proto3" json:"acls,omitempty"`
	SecurityGroups []*SecurityGroup `protobuf:"bytes,5,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	RouteTables    []*RouteTable    `protobuf:"bytes,6,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	NatGateways    []*NATGateway    `protobuf:"bytes,7,rep,name=nat_gateways,json=natGateways,proto3" json:"nat_gateways,omitempty"`
	Routers        []*Router        `protobuf:"bytes,8,rep,name=routers,proto3" json:"routers,omitempty"`
	Igws           []*IGW           `protobuf:"bytes,9,rep,name=igws,proto3" json:"igws,omitempty"`
	VpcEndpoints   []*VPCEndpoint   `protobuf:"bytes,10,rep,name=vpc_endpoints,json=vpcEndpoints,proto3" json:"vpc_endpoints,omitempty"`
	PublicIps      []*PublicIP      `protobuf:"bytes,11,rep,name=public_ips,json=publicIps,proto3" json:"public_ips,omitempty"`
	Clusters       []*Cluster       `protobuf:"bytes,12,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// Pagination information
	TotalResults int32 `protobuf:"varint,13,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"` // Total number of results
	TotalPages   int32 `protobuf:"varint,14,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`       // Total number of pages
	CurrentPage  int32 `protobuf:"varint,15,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`    // Current page number
}

func (x *SearchResourcesResponse) Reset() {
	*x = SearchResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloud_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourcesResponse) ProtoMessage() {}

func (x *SearchResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloud_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourcesResponse.ProtoReflect.Descriptor instead.
func (*SearchResourcesResponse) Descriptor() ([]byte, []int) {
	return file_cloud_proto_rawDescGZIP(), []int{45}
}

func (x *SearchResourcesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *SearchResourcesResponse) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *SearchResourcesResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *SearchResourcesResponse) GetAcls() []*ACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *SearchResourcesResponse) GetSecurityGroups() []*SecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *SearchResourcesResponse) GetRouteTables() []*RouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *SearchResourcesResponse) GetNatGateways() []*NATGateway {
	if x != nil {
		return x.NatGateways
	}
	return nil
}

func (x *SearchResourcesResponse) GetRouters() []*Router {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *SearchResourcesResponse) GetIgws() []*IGW {
	if x != nil {
		return x.Igws
	}
	return nil
}

func (x *SearchResourcesResponse) GetVpcEndpoints() []*VPCEndpoint {
	if x != nil {
		return x.VpcEndpoints
	}
	return nil
}

func (x *SearchResourcesResponse) GetPublicIps() []*PublicIP {
	if x != nil {
		return x.PublicIps
	}
	return nil
}

func (x *SearchResourcesResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *SearchResourcesResponse) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *SearchResourcesResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *SearchResourcesResponse) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

var File_cloud_proto protoreflect.FileDescriptor

var file_cloud_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72,
	0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x76, 0x70, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x56, 0x50, 0x43, 0x52, 0x04, 0x76, 0x70, 0x63, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x22, 0xc9, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x22, 0x8c, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22,
	0xab, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x78, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xbf, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb9, 0x02,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x22, 0xb9, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x95, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x6e, 0x61, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x22, 0xc3, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x67, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x47,
	0x57, 0x52, 0x04, 0x69, 0x67, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x88, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x76, 0x65,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x76, 0x65,
	0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x22, 0xbb, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72,
	0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0xbd,
	0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72,
	0x65, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x5a,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xd9, 0x02, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a,
	0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x3d, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb6, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x43, 0x49, 0x44,
	0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49,
	0x44, 0x46, 0x6f, 0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43,
	0x49, 0x44, 0x46, 0x6f, 0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x49, 0x44, 0x52, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x22, 0x51, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x73, 0x46, 0x6f, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x69, 0x64, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x22, 0xa2, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x46,
	0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x50, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xc5, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72,
	0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x6e,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xca,
	0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05, 0x63, 0x72,
	0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xbd, 0x02,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x72, 0x65,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x2c, 0x0a,
	0x0e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xd1, 0x03, 0x0a, 0x08,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x63, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x61, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x67, 0x77, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x67, 0x77, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x76, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x73, 0x22,
	0x89, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x56, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x56,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3a, 0x0a, 0x0c, 0x56, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x01, 0x0a, 0x0f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x9b, 0x08, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x53, 0x0a, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x1d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x1b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x18, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x05, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x04, 0x76, 0x70, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x56, 0x50, 0x43, 0x52, 0x04, 0x76, 0x70, 0x63,
	0x73, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x61, 0x63,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4e, 0x41,
	0x54, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x04, 0x69, 0x67, 0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x2e, 0x49, 0x47, 0x57, 0x52, 0x04, 0x69, 0x67, 0x77, 0x73, 0x12, 0x37,
	0x0a, 0x0d, 0x76, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x56, 0x50,
	0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x70, 0x63, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x32, 0xf5, 0x0d, 0x0a,
	0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x50, 0x43, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x17, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x41, 0x54, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x19, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73,
	0x12, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x50, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x50, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x43,
	0x49, 0x44, 0x52, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x50, 0x43, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50,
	0x43, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x43, 0x49, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x73,
	0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73,
	0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x73, 0x46,
	0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56,
	0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x50, 0x43, 0x49, 0x44, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x15, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloud_proto_rawDescOnce sync.Once
	file_cloud_proto_rawDescData = file_cloud_proto_rawDesc
)

func file_cloud_proto_rawDescGZIP() []byte {
	file_cloud_proto_rawDescOnce.Do(func() {
		file_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloud_proto_rawDescData)
	})
	return file_cloud_proto_rawDescData
}

var file_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_cloud_proto_goTypes = []any{
	(*ListAccountsRequest)(nil),           // 0: infra.ListAccountsRequest
	(*ListAccountsResponse)(nil),          // 1: infra.ListAccountsResponse
	(*ListRegionsRequest)(nil),            // 2: infra.ListRegionsRequest
	(*ListRegionsResponse)(nil),           // 3: infra.ListRegionsResponse
	(*ListVPCRequest)(nil),                // 4: infra.ListVPCRequest
	(*ListVPCResponse)(nil),               // 5: infra.ListVPCResponse
	(*ListInstancesRequest)(nil),          // 6: infra.ListInstancesRequest
	(*ListInstancesResponse)(nil),         // 7: infra.ListInstancesResponse
	(*ListACLsRequest)(nil),               // 8: infra.ListACLsRequest
	(*ListACLsResponse)(nil),              // 9: infra.ListACLsResponse
	(*ListSecurityGroupsRequest)(nil),     // 10: infra.ListSecurityGroupsRequest
	(*ListSecurityGroupsResponse)(nil),    // 11: infra.ListSecurityGroupsResponse
	(*ListRouteTablesRequest)(nil),        // 12: infra.ListRouteTablesRequest
	(*ListRouteTablesResponse)(nil),       // 13: infra.ListRouteTablesResponse
	(*ListNATGatewaysRequest)(nil),        // 14: infra.ListNATGatewaysRequest
	(*ListNATGatewaysResponse)(nil),       // 15: infra.ListNATGatewaysResponse
	(*ListRoutersRequest)(nil),            // 16: infra.ListRoutersRequest
	(*ListRoutersResponse)(nil),           // 17: infra.ListRoutersResponse
	(*ListInternetGatewaysRequest)(nil),   // 18: infra.ListInternetGatewaysRequest
	(*ListInternetGatewaysResponse)(nil),  // 19: infra.ListInternetGatewaysResponse
	(*ListVPCEndpointsResponse)(nil),      // 20: infra.ListVPCEndpointsResponse
	(*ListPublicIPsRequest)(nil),          // 21: infra.ListPublicIPsRequest
	(*ListPublicIPsResponse)(nil),         // 22: infra.ListPublicIPsResponse
	(*ListVPCEndpointsRequest)(nil),       // 23: infra.ListVPCEndpointsRequest
	(*GetSubnetRequest)(nil),              // 24: infra.GetSubnetRequest
	(*GetSubnetResponse)(nil),             // 25: infra.GetSubnetResponse
	(*ListSubnetsRequest)(nil),            // 26: infra.ListSubnetsRequest
	(*ListSubnetsResponse)(nil),           // 27: infra.ListSubnetsResponse
	(*GetVPCIDForCIDRRequest)(nil),        // 28: infra.GetVPCIDForCIDRRequest
	(*GetVPCIDForCIDRResponse)(nil),       // 29: infra.GetVPCIDForCIDRResponse
	(*GetCIDRsForLabelsRequest)(nil),      // 30: infra.GetCIDRsForLabelsRequest
	(*GetCIDRsForLabelsResponse)(nil),     // 31: infra.GetCIDRsForLabelsResponse
	(*GetIPsForLabelsRequest)(nil),        // 32: infra.GetIPsForLabelsRequest
	(*GetIPsForLabelsResponse)(nil),       // 33: infra.GetIPsForLabelsResponse
	(*GetInstancesForLabelsRequest)(nil),  // 34: infra.GetInstancesForLabelsRequest
	(*GetInstancesForLabelsResponse)(nil), // 35: infra.GetInstancesForLabelsResponse
	(*GetVPCIDWithTagRequest)(nil),        // 36: infra.GetVPCIDWithTagRequest
	(*GetVPCIDWithTagResponse)(nil),       // 37: infra.GetVPCIDWithTagResponse
	(*ListCloudClustersRequest)(nil),      // 38: infra.ListCloudClustersRequest
	(*ListCloudClustersResponse)(nil),     // 39: infra.ListCloudClustersResponse
	(*SummaryRequest)(nil),                // 40: infra.SummaryRequest
	(*Counters)(nil),                      // 41: infra.Counters
	(*StatusSummary)(nil),                 // 42: infra.StatusSummary
	(*SummaryResponse)(nil),               // 43: infra.SummaryResponse
	(*SearchResourcesRequest)(nil),        // 44: infra.SearchResourcesRequest
	(*SearchResourcesResponse)(nil),       // 45: infra.SearchResourcesResponse
	nil,                                   // 46: infra.ListVPCRequest.LabelsEntry
	nil,                                   // 47: infra.ListInstancesRequest.LabelsEntry
	nil,                                   // 48: infra.ListACLsRequest.LabelsEntry
	nil,                                   // 49: infra.ListSecurityGroupsRequest.LabelsEntry
	nil,                                   // 50: infra.ListRouteTablesRequest.LabelsEntry
	nil,                                   // 51: infra.ListNATGatewaysRequest.LabelsEntry
	nil,                                   // 52: infra.ListRoutersRequest.LabelsEntry
	nil,                                   // 53: infra.ListInternetGatewaysRequest.LabelsEntry
	nil,                                   // 54: infra.ListPublicIPsRequest.LabelsEntry
	nil,                                   // 55: infra.ListVPCEndpointsRequest.LabelsEntry
	nil,                                   // 56: infra.GetSubnetRequest.LabelsEntry
	nil,                                   // 57: infra.ListSubnetsRequest.LabelsEntry
	nil,                                   // 58: infra.GetVPCIDForCIDRRequest.LabelsEntry
	nil,                                   // 59: infra.GetCIDRsForLabelsRequest.LabelsEntry
	nil,                                   // 60: infra.GetIPsForLabelsRequest.LabelsEntry
	nil,                                   // 61: infra.GetInstancesForLabelsRequest.LabelsEntry
	nil,                                   // 62: infra.GetVPCIDWithTagRequest.LabelsEntry
	nil,                                   // 63: infra.ListCloudClustersRequest.LabelsEntry
	nil,                                   // 64: infra.StatusSummary.VmStatusEntry
	nil,                                   // 65: infra.StatusSummary.PodStatusEntry
	nil,                                   // 66: infra.StatusSummary.VmTypesEntry
	nil,                                   // 67: infra.SearchResourcesRequest.SearchLabelsEntry
	(*Account)(nil),                       // 68: infra.Account
	(*Error)(nil),                         // 69: infra.Error
	(*Credentials)(nil),                   // 70: infra.Credentials
	(*Region)(nil),                        // 71: infra.Region
	(*VPC)(nil),                           // 72: infra.VPC
	(*Instance)(nil),                      // 73: infra.Instance
	(*ACL)(nil),                           // 74: infra.ACL
	(*SecurityGroup)(nil),                 // 75: infra.SecurityGroup
	(*RouteTable)(nil),                    // 76: infra.RouteTable
	(*NATGateway)(nil),                    // 77: infra.NATGateway
	(*Router)(nil),                        // 78: infra.Router
	(*IGW)(nil),                           // 79: infra.IGW
	(*VPCEndpoint)(nil),                   // 80: infra.VPCEndpoint
	(*PublicIP)(nil),                      // 81: infra.PublicIP
	(*Subnet)(nil),                        // 82: infra.Subnet
	(*Cluster)(nil),                       // 83: infra.Cluster
	(*timestamppb.Timestamp)(nil),         // 84: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),         // 85: google.protobuf.FieldMask
}
var file_cloud_proto_depIdxs = []int32{
	68,  // 0: infra.ListAccountsResponse.accounts:type_name -> infra.Account
	69,  // 1: infra.ListAccountsResponse.err:type_name -> infra.Error
	70,  // 2: infra.ListRegionsRequest.creds:type_name -> infra.Credentials
	71,  // 3: infra.ListRegionsResponse.regions:type_name -> infra.Region
	69,  // 4: infra.ListRegionsResponse.err:type_name -> infra.Error
	46,  // 5: infra.ListVPCRequest.labels:type_name -> infra.ListVPCRequest.LabelsEntry
	70,  // 6: infra.ListVPCRequest.creds:type_name -> infra.Credentials
	72,  // 7: infra.ListVPCResponse.vpcs:type_name -> infra.VPC
	69,  // 8: infra.ListVPCResponse.err:type_name -> infra.Error
	47,  // 9: infra.ListInstancesRequest.labels:type_name -> infra.ListInstancesRequest.LabelsEntry
	70,  // 10: infra.ListInstancesRequest.creds:type_name -> infra.Credentials
	73,  // 11: infra.ListInstancesResponse.instances:type_name -> infra.Instance
	69,  // 12: infra.ListInstancesResponse.err:type_name -> infra.Error
	48,  // 13: infra.ListACLsRequest.labels:type_name -> infra.ListACLsRequest.LabelsEntry
	70,  // 14: infra.ListACLsRequest.creds:type_name -> infra.Credentials
	74,  // 15: infra.ListACLsResponse.acls:type_name -> infra.ACL
	69,  // 16: infra.ListACLsResponse.err:type_name -> infra.Error
	49,  // 17: infra.ListSecurityGroupsRequest.labels:type_name -> infra.ListSecurityGroupsRequest.LabelsEntry
	70,  // 18: infra.ListSecurityGroupsRequest.creds:type_name -> infra.Credentials
	75,  // 19: infra.ListSecurityGroupsResponse.security_groups:type_name -> infra.SecurityGroup
	69,  // 20: infra.ListSecurityGroupsResponse.err:type_name -> infra.Error
	50,  // 21: infra.ListRouteTablesRequest.labels:type_name -> infra.ListRouteTablesRequest.LabelsEntry
	70,  // 22: infra.ListRouteTablesRequest.creds:type_name -> infra.Credentials
	76,  // 23: infra.ListRouteTablesResponse.route_tables:type_name -> infra.RouteTable
	69,  // 24: infra.ListRouteTablesResponse.err:type_name -> infra.Error
	51,  // 25: infra.ListNATGatewaysRequest.labels:type_name -> infra.ListNATGatewaysRequest.LabelsEntry
	70,  // 26: infra.ListNATGatewaysRequest.creds:type_name -> infra.Credentials
	77,  // 27: infra.ListNATGatewaysResponse.nat_gateways:type_name -> infra.NATGateway
	69,  // 28: infra.ListNATGatewaysResponse.err:type_name -> infra.Error
	52,  // 29: infra.ListRoutersRequest.labels:type_name -> infra.ListRoutersRequest.LabelsEntry
	70,  // 30: infra.ListRoutersRequest.creds:type_name -> infra.Credentials
	78,  // 31: infra.ListRoutersResponse.routers:type_name -> infra.Router
	69,  // 32: infra.ListRoutersResponse.err:type_name -> infra.Error
	53,  // 33: infra.ListInternetGatewaysRequest.labels:type_name -> infra.ListInternetGatewaysRequest.LabelsEntry
	70,  // 34: infra.ListInternetGatewaysRequest.creds:type_name -> infra.Credentials
	79,  // 35: infra.ListInternetGatewaysResponse.igws:type_name -> infra.IGW
	69,  // 36: infra.ListInternetGatewaysResponse.err:type_name -> infra.Error
	80,  // 37: infra.ListVPCEndpointsResponse.veps:type_name -> infra.VPCEndpoint
	69,  // 38: infra.ListVPCEndpointsResponse.err:type_name -> infra.Error
	54,  // 39: infra.ListPublicIPsRequest.labels:type_name -> infra.ListPublicIPsRequest.LabelsEntry
	70,  // 40: infra.ListPublicIPsRequest.creds:type_name -> infra.Credentials
	81,  // 41: infra.ListPublicIPsResponse.public_ips:type_name -> infra.PublicIP
	69,  // 42: infra.ListPublicIPsResponse.err:type_name -> infra.Error
	55,  // 43: infra.ListVPCEndpointsRequest.labels:type_name -> infra.ListVPCEndpointsRequest.LabelsEntry
	70,  // 44: infra.ListVPCEndpointsRequest.creds:type_name -> infra.Credentials
	56,  // 45: infra.GetSubnetRequest.labels:type_name -> infra.GetSubnetRequest.LabelsEntry
	70,  // 46: infra.GetSubnetRequest.creds:type_name -> infra.Credentials
	82,  // 47: infra.GetSubnetResponse.subnet:type_name -> infra.Subnet
	69,  // 48: infra.GetSubnetResponse.err:type_name -> infra.Error
	57,  // 49: infra.ListSubnetsRequest.labels:type_name -> infra.ListSubnetsRequest.LabelsEntry
	70,  // 50: infra.ListSubnetsRequest.creds:type_name -> infra.Credentials
	82,  // 51: infra.ListSubnetsResponse.subnets:type_name -> infra.Subnet
	69,  // 52: infra.ListSubnetsResponse.err:type_name -> infra.Error
	58,  // 53: infra.GetVPCIDForCIDRRequest.labels:type_name -> infra.GetVPCIDForCIDRRequest.LabelsEntry
	70,  // 54: infra.GetVPCIDForCIDRRequest.creds:type_name -> infra.Credentials
	69,  // 55: infra.GetVPCIDForCIDRResponse.err:type_name -> infra.Error
	59,  // 56: infra.GetCIDRsForLabelsRequest.labels:type_name -> infra.GetCIDRsForLabelsRequest.LabelsEntry
	70,  // 57: infra.GetCIDRsForLabelsRequest.creds:type_name -> infra.Credentials
	69,  // 58: infra.GetCIDRsForLabelsResponse.err:type_name -> infra.Error
	60,  // 59: infra.GetIPsForLabelsRequest.labels:type_name -> infra.GetIPsForLabelsRequest.LabelsEntry
	70,  // 60: infra.GetIPsForLabelsRequest.creds:type_name -> infra.Credentials
	69,  // 61: infra.GetIPsForLabelsResponse.err:type_name -> infra.Error
	61,  // 62: infra.GetInstancesForLabelsRequest.labels:type_name -> infra.GetInstancesForLabelsRequest.LabelsEntry
	70,  // 63: infra.GetInstancesForLabelsRequest.creds:type_name -> infra.Credentials
	73,  // 64: infra.GetInstancesForLabelsResponse.instances:type_name -> infra.Instance
	69,  // 65: infra.GetInstancesForLabelsResponse.err:type_name -> infra.Error
	62,  // 66: infra.GetVPCIDWithTagRequest.labels:type_name -> infra.GetVPCIDWithTagRequest.LabelsEntry
	70,  // 67: infra.GetVPCIDWithTagRequest.creds:type_name -> infra.Credentials
	69,  // 68: infra.GetVPCIDWithTagResponse.err:type_name -> infra.Error
	63,  // 69: infra.ListCloudClustersRequest.labels:type_name -> infra.ListCloudClustersRequest.LabelsEntry
	70,  // 70: infra.ListCloudClustersRequest.creds:type_name -> infra.Credentials
	83,  // 71: infra.ListCloudClustersResponse.clusters:type_name -> infra.Cluster
	69,  // 72: infra.ListCloudClustersResponse.err:type_name -> infra.Error
	64,  // 73: infra.StatusSummary.vm_status:type_name -> infra.StatusSummary.VmStatusEntry
	65,  // 74: infra.StatusSummary.pod_status:type_name -> infra.StatusSummary.PodStatusEntry
	66,  // 75: infra.StatusSummary.vm_types:type_name -> infra.StatusSummary.VmTypesEntry
	41,  // 76: infra.SummaryResponse.count:type_name -> infra.Counters
	42,  // 77: infra.SummaryResponse.statuses:type_name -> infra.StatusSummary
	69,  // 78: infra.SummaryResponse.err:type_name -> infra.Error
	67,  // 79: infra.SearchResourcesRequest.search_labels:type_name -> infra.SearchResourcesRequest.SearchLabelsEntry
	84,  // 80: infra.SearchResourcesRequest.search_creation_time_start:type_name -> google.protobuf.Timestamp
	84,  // 81: infra.SearchResourcesRequest.search_creation_time_end:type_name -> google.protobuf.Timestamp
	84,  // 82: infra.SearchResourcesRequest.search_termination_time_start:type_name -> google.protobuf.Timestamp
	84,  // 83: infra.SearchResourcesRequest.search_termination_time_end:type_name -> google.protobuf.Timestamp
	85,  // 84: infra.SearchResourcesRequest.field_mask:type_name -> google.protobuf.FieldMask
	73,  // 85: infra.SearchResourcesResponse.instances:type_name -> infra.Instance
	72,  // 86: infra.SearchResourcesResponse.vpcs:type_name -> infra.VPC
	82,  // 87: infra.SearchResourcesResponse.subnets:type_name -> infra.Subnet
	74,  // 88: infra.SearchResourcesResponse.acls:type_name -> infra.ACL
	75,  // 89: infra.SearchResourcesResponse.security_groups:type_name -> infra.SecurityGroup
	76,  // 90: infra.SearchResourcesResponse.route_tables:type_name -> infra.RouteTable
	77,  // 91: infra.SearchResourcesResponse.nat_gateways:type_name -> infra.NATGateway
	78,  // 92: infra.SearchResourcesResponse.routers:type_name -> infra.Router
	79,  // 93: infra.SearchResourcesResponse.igws:type_name -> infra.IGW
	80,  // 94: infra.SearchResourcesResponse.vpc_endpoints:type_name -> infra.VPCEndpoint
	81,  // 95: infra.SearchResourcesResponse.public_ips:type_name -> infra.PublicIP
	83,  // 96: infra.SearchResourcesResponse.clusters:type_name -> infra.Cluster
	0,   // 97: infra.CloudProviderService.ListAccounts:input_type -> infra.ListAccountsRequest
	2,   // 98: infra.CloudProviderService.ListRegions:input_type -> infra.ListRegionsRequest
	4,   // 99: infra.CloudProviderService.ListVPC:input_type -> infra.ListVPCRequest
	6,   // 100: infra.CloudProviderService.ListInstances:input_type -> infra.ListInstancesRequest
	24,  // 101: infra.CloudProviderService.GetSubnet:input_type -> infra.GetSubnetRequest
	26,  // 102: infra.CloudProviderService.ListSubnets:input_type -> infra.ListSubnetsRequest
	8,   // 103: infra.CloudProviderService.ListACLs:input_type -> infra.ListACLsRequest
	10,  // 104: infra.CloudProviderService.ListSecurityGroups:input_type -> infra.ListSecurityGroupsRequest
	12,  // 105: infra.CloudProviderService.ListRouteTables:input_type -> infra.ListRouteTablesRequest
	14,  // 106: infra.CloudProviderService.ListNATGateways:input_type -> infra.ListNATGatewaysRequest
	16,  // 107: infra.CloudProviderService.ListRouters:input_type -> infra.ListRoutersRequest
	18,  // 108: infra.CloudProviderService.ListInternetGateways:input_type -> infra.ListInternetGatewaysRequest
	23,  // 109: infra.CloudProviderService.ListVPCEndpoints:input_type -> infra.ListVPCEndpointsRequest
	21,  // 110: infra.CloudProviderService.ListPublicIPs:input_type -> infra.ListPublicIPsRequest
	28,  // 111: infra.CloudProviderService.GetVPCIDForCIDR:input_type -> infra.GetVPCIDForCIDRRequest
	30,  // 112: infra.CloudProviderService.GetCIDRsForLabels:input_type -> infra.GetCIDRsForLabelsRequest
	32,  // 113: infra.CloudProviderService.GetIPsForLabels:input_type -> infra.GetIPsForLabelsRequest
	34,  // 114: infra.CloudProviderService.GetInstancesForLabels:input_type -> infra.GetInstancesForLabelsRequest
	36,  // 115: infra.CloudProviderService.GetVPCIDWithTag:input_type -> infra.GetVPCIDWithTagRequest
	38,  // 116: infra.CloudProviderService.ListCloudClusters:input_type -> infra.ListCloudClustersRequest
	40,  // 117: infra.CloudProviderService.Summary:input_type -> infra.SummaryRequest
	44,  // 118: infra.CloudProviderService.SearchResources:input_type -> infra.SearchResourcesRequest
	1,   // 119: infra.CloudProviderService.ListAccounts:output_type -> infra.ListAccountsResponse
	3,   // 120: infra.CloudProviderService.ListRegions:output_type -> infra.ListRegionsResponse
	5,   // 121: infra.CloudProviderService.ListVPC:output_type -> infra.ListVPCResponse
	7,   // 122: infra.CloudProviderService.ListInstances:output_type -> infra.ListInstancesResponse
	25,  // 123: infra.CloudProviderService.GetSubnet:output_type -> infra.GetSubnetResponse
	27,  // 124: infra.CloudProviderService.ListSubnets:output_type -> infra.ListSubnetsResponse
	9,   // 125: infra.CloudProviderService.ListACLs:output_type -> infra.ListACLsResponse
	11,  // 126: infra.CloudProviderService.ListSecurityGroups:output_type -> infra.ListSecurityGroupsResponse
	13,  // 127: infra.CloudProviderService.ListRouteTables:output_type -> infra.ListRouteTablesResponse
	15,  // 128: infra.CloudProviderService.ListNATGateways:output_type -> infra.ListNATGatewaysResponse
	17,  // 129: infra.CloudProviderService.ListRouters:output_type -> infra.ListRoutersResponse
	19,  // 130: infra.CloudProviderService.ListInternetGateways:output_type -> infra.ListInternetGatewaysResponse
	20,  // 131: infra.CloudProviderService.ListVPCEndpoints:output_type -> infra.ListVPCEndpointsResponse
	22,  // 132: infra.CloudProviderService.ListPublicIPs:output_type -> infra.ListPublicIPsResponse
	29,  // 133: infra.CloudProviderService.GetVPCIDForCIDR:output_type -> infra.GetVPCIDForCIDRResponse
	31,  // 134: infra.CloudProviderService.GetCIDRsForLabels:output_type -> infra.GetCIDRsForLabelsResponse
	33,  // 135: infra.CloudProviderService.GetIPsForLabels:output_type -> infra.GetIPsForLabelsResponse
	35,  // 136: infra.CloudProviderService.GetInstancesForLabels:output_type -> infra.GetInstancesForLabelsResponse
	37,  // 137: infra.CloudProviderService.GetVPCIDWithTag:output_type -> infra.GetVPCIDWithTagResponse
	39,  // 138: infra.CloudProviderService.ListCloudClusters:output_type -> infra.ListCloudClustersResponse
	43,  // 139: infra.CloudProviderService.Summary:output_type -> infra.SummaryResponse
	45,  // 140: infra.CloudProviderService.SearchResources:output_type -> infra.SearchResourcesResponse
	119, // [119:141] is the sub-list for method output_type
	97,  // [97:119] is the sub-list for method input_type
	97,  // [97:97] is the sub-list for extension type_name
	97,  // [97:97] is the sub-list for extension extendee
	0,   // [0:97] is the sub-list for field type_name
}

func init() { file_cloud_proto_init() }
func file_cloud_proto_init() {
	if File_cloud_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloud_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListAccountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListVPCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListVPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListACLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListACLsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListSecurityGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListSecurityGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ListRouteTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListRouteTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListNATGatewaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ListNATGatewaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListInternetGatewaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListInternetGatewaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ListVPCEndpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicIPsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicIPsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListVPCEndpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubnetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubnetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetVPCIDForCIDRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetVPCIDForCIDRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetCIDRsForLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetCIDRsForLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetIPsForLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetIPsForLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetInstancesForLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetInstancesForLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetVPCIDWithTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetVPCIDWithTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ListCloudClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ListCloudClustersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*Counters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*StatusSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*SummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloud_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cloud_proto_msgTypes[2].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[4].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[6].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[8].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[10].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[12].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[14].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[16].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[18].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[21].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[23].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[24].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[26].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[28].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[30].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[32].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[34].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[36].OneofWrappers = []any{}
	file_cloud_proto_msgTypes[38].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloud_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloud_proto_goTypes,
		DependencyIndexes: file_cloud_proto_depIdxs,
		MessageInfos:      file_cloud_proto_msgTypes,
	}.Build()
	File_cloud_proto = out.File
	file_cloud_proto_rawDesc = nil
	file_cloud_proto_goTypes = nil
	file_cloud_proto_depIdxs = nil
}
