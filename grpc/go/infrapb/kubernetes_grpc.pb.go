// Copyright (c) 2023 Cisco Systems, Inc. and its affiliates
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http:www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: kubernetes.proto

package infrapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KubernetesService_ListClusters_FullMethodName      = "/infra.KubernetesService/ListClusters"
	KubernetesService_ListNamespaces_FullMethodName    = "/infra.KubernetesService/ListNamespaces"
	KubernetesService_ListNodes_FullMethodName         = "/infra.KubernetesService/ListNodes"
	KubernetesService_ListPods_FullMethodName          = "/infra.KubernetesService/ListPods"
	KubernetesService_ListServices_FullMethodName      = "/infra.KubernetesService/ListServices"
	KubernetesService_ListPodsCIDRs_FullMethodName     = "/infra.KubernetesService/ListPodsCIDRs"
	KubernetesService_ListServicesCIDRs_FullMethodName = "/infra.KubernetesService/ListServicesCIDRs"
)

// KubernetesServiceClient is the client API for KubernetesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesServiceClient interface {
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
	ListPodsCIDRs(ctx context.Context, in *ListPodsCIDRsRequest, opts ...grpc.CallOption) (*ListPodsCIDRsResponse, error)
	ListServicesCIDRs(ctx context.Context, in *ListServicesCIDRsRequest, opts ...grpc.CallOption) (*ListServicesCIDRsResponse, error)
}

type kubernetesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesServiceClient(cc grpc.ClientConnInterface) KubernetesServiceClient {
	return &kubernetesServiceClient{cc}
}

func (c *kubernetesServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListPods(ctx context.Context, in *ListPodsRequest, opts ...grpc.CallOption) (*ListPodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPodsResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListPods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListPodsCIDRs(ctx context.Context, in *ListPodsCIDRsRequest, opts ...grpc.CallOption) (*ListPodsCIDRsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPodsCIDRsResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListPodsCIDRs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesServiceClient) ListServicesCIDRs(ctx context.Context, in *ListServicesCIDRsRequest, opts ...grpc.CallOption) (*ListServicesCIDRsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesCIDRsResponse)
	err := c.cc.Invoke(ctx, KubernetesService_ListServicesCIDRs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubernetesServiceServer is the server API for KubernetesService service.
// All implementations must embed UnimplementedKubernetesServiceServer
// for forward compatibility
type KubernetesServiceServer interface {
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	ListPodsCIDRs(context.Context, *ListPodsCIDRsRequest) (*ListPodsCIDRsResponse, error)
	ListServicesCIDRs(context.Context, *ListServicesCIDRsRequest) (*ListServicesCIDRsResponse, error)
	mustEmbedUnimplementedKubernetesServiceServer()
}

// UnimplementedKubernetesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKubernetesServiceServer struct {
}

func (UnimplementedKubernetesServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedKubernetesServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedKubernetesServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedKubernetesServiceServer) ListPods(context.Context, *ListPodsRequest) (*ListPodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedKubernetesServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedKubernetesServiceServer) ListPodsCIDRs(context.Context, *ListPodsCIDRsRequest) (*ListPodsCIDRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPodsCIDRs not implemented")
}
func (UnimplementedKubernetesServiceServer) ListServicesCIDRs(context.Context, *ListServicesCIDRsRequest) (*ListServicesCIDRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServicesCIDRs not implemented")
}
func (UnimplementedKubernetesServiceServer) mustEmbedUnimplementedKubernetesServiceServer() {}

// UnsafeKubernetesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesServiceServer will
// result in compilation errors.
type UnsafeKubernetesServiceServer interface {
	mustEmbedUnimplementedKubernetesServiceServer()
}

func RegisterKubernetesServiceServer(s grpc.ServiceRegistrar, srv KubernetesServiceServer) {
	s.RegisterService(&KubernetesService_ServiceDesc, srv)
}

func _KubernetesService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListPods(ctx, req.(*ListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListPodsCIDRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsCIDRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListPodsCIDRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListPodsCIDRs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListPodsCIDRs(ctx, req.(*ListPodsCIDRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubernetesService_ListServicesCIDRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesCIDRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServiceServer).ListServicesCIDRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KubernetesService_ListServicesCIDRs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServiceServer).ListServicesCIDRs(ctx, req.(*ListServicesCIDRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubernetesService_ServiceDesc is the grpc.ServiceDesc for KubernetesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubernetesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infra.KubernetesService",
	HandlerType: (*KubernetesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _KubernetesService_ListClusters_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _KubernetesService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _KubernetesService_ListNodes_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _KubernetesService_ListPods_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _KubernetesService_ListServices_Handler,
		},
		{
			MethodName: "ListPodsCIDRs",
			Handler:    _KubernetesService_ListPodsCIDRs_Handler,
		},
		{
			MethodName: "ListServicesCIDRs",
			Handler:    _KubernetesService_ListServicesCIDRs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubernetes.proto",
}
