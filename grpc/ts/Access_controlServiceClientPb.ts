/**
 * @fileoverview gRPC-Web generated client stub for infra
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: access_control.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as access_control_pb from './access_control_pb';


export class AccessControlServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddInboundAllowRuleInVPC = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/AddInboundAllowRuleInVPC',
    grpcWeb.MethodType.UNARY,
    access_control_pb.AddInboundAllowRuleInVPCRequest,
    access_control_pb.AddInboundAllowRuleInVPCResponse,
    (request: access_control_pb.AddInboundAllowRuleInVPCRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.AddInboundAllowRuleInVPCResponse.deserializeBinary
  );

  addInboundAllowRuleInVPC(
    request: access_control_pb.AddInboundAllowRuleInVPCRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.AddInboundAllowRuleInVPCResponse>;

  addInboundAllowRuleInVPC(
    request: access_control_pb.AddInboundAllowRuleInVPCRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleInVPCResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.AddInboundAllowRuleInVPCResponse>;

  addInboundAllowRuleInVPC(
    request: access_control_pb.AddInboundAllowRuleInVPCRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleInVPCResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/AddInboundAllowRuleInVPC',
        request,
        metadata || {},
        this.methodDescriptorAddInboundAllowRuleInVPC,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/AddInboundAllowRuleInVPC',
    request,
    metadata || {},
    this.methodDescriptorAddInboundAllowRuleInVPC);
  }

  methodDescriptorAddInboundAllowRuleByLabelsMatch = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/AddInboundAllowRuleByLabelsMatch',
    grpcWeb.MethodType.UNARY,
    access_control_pb.AddInboundAllowRuleByLabelsMatchRequest,
    access_control_pb.AddInboundAllowRuleByLabelsMatchResponse,
    (request: access_control_pb.AddInboundAllowRuleByLabelsMatchRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.AddInboundAllowRuleByLabelsMatchResponse.deserializeBinary
  );

  addInboundAllowRuleByLabelsMatch(
    request: access_control_pb.AddInboundAllowRuleByLabelsMatchRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.AddInboundAllowRuleByLabelsMatchResponse>;

  addInboundAllowRuleByLabelsMatch(
    request: access_control_pb.AddInboundAllowRuleByLabelsMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleByLabelsMatchResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.AddInboundAllowRuleByLabelsMatchResponse>;

  addInboundAllowRuleByLabelsMatch(
    request: access_control_pb.AddInboundAllowRuleByLabelsMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleByLabelsMatchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/AddInboundAllowRuleByLabelsMatch',
        request,
        metadata || {},
        this.methodDescriptorAddInboundAllowRuleByLabelsMatch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/AddInboundAllowRuleByLabelsMatch',
    request,
    metadata || {},
    this.methodDescriptorAddInboundAllowRuleByLabelsMatch);
  }

  methodDescriptorAddInboundAllowRuleBySubnetMatch = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/AddInboundAllowRuleBySubnetMatch',
    grpcWeb.MethodType.UNARY,
    access_control_pb.AddInboundAllowRuleBySubnetMatchRequest,
    access_control_pb.AddInboundAllowRuleBySubnetMatchResponse,
    (request: access_control_pb.AddInboundAllowRuleBySubnetMatchRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.AddInboundAllowRuleBySubnetMatchResponse.deserializeBinary
  );

  addInboundAllowRuleBySubnetMatch(
    request: access_control_pb.AddInboundAllowRuleBySubnetMatchRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.AddInboundAllowRuleBySubnetMatchResponse>;

  addInboundAllowRuleBySubnetMatch(
    request: access_control_pb.AddInboundAllowRuleBySubnetMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleBySubnetMatchResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.AddInboundAllowRuleBySubnetMatchResponse>;

  addInboundAllowRuleBySubnetMatch(
    request: access_control_pb.AddInboundAllowRuleBySubnetMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleBySubnetMatchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/AddInboundAllowRuleBySubnetMatch',
        request,
        metadata || {},
        this.methodDescriptorAddInboundAllowRuleBySubnetMatch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/AddInboundAllowRuleBySubnetMatch',
    request,
    metadata || {},
    this.methodDescriptorAddInboundAllowRuleBySubnetMatch);
  }

  methodDescriptorAddInboundAllowRuleByInstanceIPMatch = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/AddInboundAllowRuleByInstanceIPMatch',
    grpcWeb.MethodType.UNARY,
    access_control_pb.AddInboundAllowRuleByInstanceIPMatchRequest,
    access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse,
    (request: access_control_pb.AddInboundAllowRuleByInstanceIPMatchRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse.deserializeBinary
  );

  addInboundAllowRuleByInstanceIPMatch(
    request: access_control_pb.AddInboundAllowRuleByInstanceIPMatchRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse>;

  addInboundAllowRuleByInstanceIPMatch(
    request: access_control_pb.AddInboundAllowRuleByInstanceIPMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse>;

  addInboundAllowRuleByInstanceIPMatch(
    request: access_control_pb.AddInboundAllowRuleByInstanceIPMatchRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleByInstanceIPMatchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/AddInboundAllowRuleByInstanceIPMatch',
        request,
        metadata || {},
        this.methodDescriptorAddInboundAllowRuleByInstanceIPMatch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/AddInboundAllowRuleByInstanceIPMatch',
    request,
    metadata || {},
    this.methodDescriptorAddInboundAllowRuleByInstanceIPMatch);
  }

  methodDescriptorAddInboundAllowRuleForLoadBalancerByDNS = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/AddInboundAllowRuleForLoadBalancerByDNS',
    grpcWeb.MethodType.UNARY,
    access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSRequest,
    access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse,
    (request: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse.deserializeBinary
  );

  addInboundAllowRuleForLoadBalancerByDNS(
    request: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse>;

  addInboundAllowRuleForLoadBalancerByDNS(
    request: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse>;

  addInboundAllowRuleForLoadBalancerByDNS(
    request: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.AddInboundAllowRuleForLoadBalancerByDNSResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/AddInboundAllowRuleForLoadBalancerByDNS',
        request,
        metadata || {},
        this.methodDescriptorAddInboundAllowRuleForLoadBalancerByDNS,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/AddInboundAllowRuleForLoadBalancerByDNS',
    request,
    metadata || {},
    this.methodDescriptorAddInboundAllowRuleForLoadBalancerByDNS);
  }

  methodDescriptorRemoveInboundAllowRuleFromVPCByName = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/RemoveInboundAllowRuleFromVPCByName',
    grpcWeb.MethodType.UNARY,
    access_control_pb.RemoveInboundAllowRuleFromVPCByNameRequest,
    access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse,
    (request: access_control_pb.RemoveInboundAllowRuleFromVPCByNameRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse.deserializeBinary
  );

  removeInboundAllowRuleFromVPCByName(
    request: access_control_pb.RemoveInboundAllowRuleFromVPCByNameRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse>;

  removeInboundAllowRuleFromVPCByName(
    request: access_control_pb.RemoveInboundAllowRuleFromVPCByNameRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse>;

  removeInboundAllowRuleFromVPCByName(
    request: access_control_pb.RemoveInboundAllowRuleFromVPCByNameRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRuleFromVPCByNameResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/RemoveInboundAllowRuleFromVPCByName',
        request,
        metadata || {},
        this.methodDescriptorRemoveInboundAllowRuleFromVPCByName,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/RemoveInboundAllowRuleFromVPCByName',
    request,
    metadata || {},
    this.methodDescriptorRemoveInboundAllowRuleFromVPCByName);
  }

  methodDescriptorRemoveInboundAllowRulesFromVPCById = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/RemoveInboundAllowRulesFromVPCById',
    grpcWeb.MethodType.UNARY,
    access_control_pb.RemoveInboundAllowRulesFromVPCByIdRequest,
    access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse,
    (request: access_control_pb.RemoveInboundAllowRulesFromVPCByIdRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse.deserializeBinary
  );

  removeInboundAllowRulesFromVPCById(
    request: access_control_pb.RemoveInboundAllowRulesFromVPCByIdRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse>;

  removeInboundAllowRulesFromVPCById(
    request: access_control_pb.RemoveInboundAllowRulesFromVPCByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse>;

  removeInboundAllowRulesFromVPCById(
    request: access_control_pb.RemoveInboundAllowRulesFromVPCByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRulesFromVPCByIdResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/RemoveInboundAllowRulesFromVPCById',
        request,
        metadata || {},
        this.methodDescriptorRemoveInboundAllowRulesFromVPCById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/RemoveInboundAllowRulesFromVPCById',
    request,
    metadata || {},
    this.methodDescriptorRemoveInboundAllowRulesFromVPCById);
  }

  methodDescriptorRemoveInboundAllowRuleRulesByTags = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/RemoveInboundAllowRuleRulesByTags',
    grpcWeb.MethodType.UNARY,
    access_control_pb.RemoveInboundAllowRuleRulesByTagsRequest,
    access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse,
    (request: access_control_pb.RemoveInboundAllowRuleRulesByTagsRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse.deserializeBinary
  );

  removeInboundAllowRuleRulesByTags(
    request: access_control_pb.RemoveInboundAllowRuleRulesByTagsRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse>;

  removeInboundAllowRuleRulesByTags(
    request: access_control_pb.RemoveInboundAllowRuleRulesByTagsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse>;

  removeInboundAllowRuleRulesByTags(
    request: access_control_pb.RemoveInboundAllowRuleRulesByTagsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.RemoveInboundAllowRuleRulesByTagsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/RemoveInboundAllowRuleRulesByTags',
        request,
        metadata || {},
        this.methodDescriptorRemoveInboundAllowRuleRulesByTags,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/RemoveInboundAllowRuleRulesByTags',
    request,
    metadata || {},
    this.methodDescriptorRemoveInboundAllowRuleRulesByTags);
  }

  methodDescriptorRefreshInboundAllowRule = new grpcWeb.MethodDescriptor(
    '/infra.AccessControlService/RefreshInboundAllowRule',
    grpcWeb.MethodType.UNARY,
    access_control_pb.RefreshInboundAllowRuleRequest,
    access_control_pb.RefreshInboundAllowRuleResponse,
    (request: access_control_pb.RefreshInboundAllowRuleRequest) => {
      return request.serializeBinary();
    },
    access_control_pb.RefreshInboundAllowRuleResponse.deserializeBinary
  );

  refreshInboundAllowRule(
    request: access_control_pb.RefreshInboundAllowRuleRequest,
    metadata: grpcWeb.Metadata | null): Promise<access_control_pb.RefreshInboundAllowRuleResponse>;

  refreshInboundAllowRule(
    request: access_control_pb.RefreshInboundAllowRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: access_control_pb.RefreshInboundAllowRuleResponse) => void): grpcWeb.ClientReadableStream<access_control_pb.RefreshInboundAllowRuleResponse>;

  refreshInboundAllowRule(
    request: access_control_pb.RefreshInboundAllowRuleRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: access_control_pb.RefreshInboundAllowRuleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.AccessControlService/RefreshInboundAllowRule',
        request,
        metadata || {},
        this.methodDescriptorRefreshInboundAllowRule,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.AccessControlService/RefreshInboundAllowRule',
    request,
    metadata || {},
    this.methodDescriptorRefreshInboundAllowRule);
  }

}

