/**
 * @fileoverview gRPC-Web generated client stub for infra
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: kubernetes.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as kubernetes_pb from './kubernetes_pb';


export class KubernetesServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorListClusters = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListClusters',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListClustersRequest,
    kubernetes_pb.ListClustersResponse,
    (request: kubernetes_pb.ListClustersRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListClustersResponse.deserializeBinary
  );

  listClusters(
    request: kubernetes_pb.ListClustersRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListClustersResponse>;

  listClusters(
    request: kubernetes_pb.ListClustersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListClustersResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListClustersResponse>;

  listClusters(
    request: kubernetes_pb.ListClustersRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListClustersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListClusters',
        request,
        metadata || {},
        this.methodDescriptorListClusters,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListClusters',
    request,
    metadata || {},
    this.methodDescriptorListClusters);
  }

  methodDescriptorListNamespaces = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListNamespaces',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListNamespacesRequest,
    kubernetes_pb.ListNamespacesResponse,
    (request: kubernetes_pb.ListNamespacesRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListNamespacesResponse.deserializeBinary
  );

  listNamespaces(
    request: kubernetes_pb.ListNamespacesRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListNamespacesResponse>;

  listNamespaces(
    request: kubernetes_pb.ListNamespacesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListNamespacesResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListNamespacesResponse>;

  listNamespaces(
    request: kubernetes_pb.ListNamespacesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListNamespacesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListNamespaces',
        request,
        metadata || {},
        this.methodDescriptorListNamespaces,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListNamespaces',
    request,
    metadata || {},
    this.methodDescriptorListNamespaces);
  }

  methodDescriptorListNodes = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListNodes',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListNodesRequest,
    kubernetes_pb.ListNodesResponse,
    (request: kubernetes_pb.ListNodesRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListNodesResponse.deserializeBinary
  );

  listNodes(
    request: kubernetes_pb.ListNodesRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListNodesResponse>;

  listNodes(
    request: kubernetes_pb.ListNodesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListNodesResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListNodesResponse>;

  listNodes(
    request: kubernetes_pb.ListNodesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListNodesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListNodes',
        request,
        metadata || {},
        this.methodDescriptorListNodes,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListNodes',
    request,
    metadata || {},
    this.methodDescriptorListNodes);
  }

  methodDescriptorListPods = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListPods',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListPodsRequest,
    kubernetes_pb.ListPodsResponse,
    (request: kubernetes_pb.ListPodsRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListPodsResponse.deserializeBinary
  );

  listPods(
    request: kubernetes_pb.ListPodsRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListPodsResponse>;

  listPods(
    request: kubernetes_pb.ListPodsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListPodsResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListPodsResponse>;

  listPods(
    request: kubernetes_pb.ListPodsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListPodsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListPods',
        request,
        metadata || {},
        this.methodDescriptorListPods,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListPods',
    request,
    metadata || {},
    this.methodDescriptorListPods);
  }

  methodDescriptorListServices = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListServices',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListServicesRequest,
    kubernetes_pb.ListServicesResponse,
    (request: kubernetes_pb.ListServicesRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListServicesResponse.deserializeBinary
  );

  listServices(
    request: kubernetes_pb.ListServicesRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListServicesResponse>;

  listServices(
    request: kubernetes_pb.ListServicesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListServicesResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListServicesResponse>;

  listServices(
    request: kubernetes_pb.ListServicesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListServicesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListServices',
        request,
        metadata || {},
        this.methodDescriptorListServices,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListServices',
    request,
    metadata || {},
    this.methodDescriptorListServices);
  }

  methodDescriptorListPodsCIDRs = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListPodsCIDRs',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListPodsCIDRsRequest,
    kubernetes_pb.ListPodsCIDRsResponse,
    (request: kubernetes_pb.ListPodsCIDRsRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListPodsCIDRsResponse.deserializeBinary
  );

  listPodsCIDRs(
    request: kubernetes_pb.ListPodsCIDRsRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListPodsCIDRsResponse>;

  listPodsCIDRs(
    request: kubernetes_pb.ListPodsCIDRsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListPodsCIDRsResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListPodsCIDRsResponse>;

  listPodsCIDRs(
    request: kubernetes_pb.ListPodsCIDRsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListPodsCIDRsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListPodsCIDRs',
        request,
        metadata || {},
        this.methodDescriptorListPodsCIDRs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListPodsCIDRs',
    request,
    metadata || {},
    this.methodDescriptorListPodsCIDRs);
  }

  methodDescriptorListServicesCIDRs = new grpcWeb.MethodDescriptor(
    '/infra.KubernetesService/ListServicesCIDRs',
    grpcWeb.MethodType.UNARY,
    kubernetes_pb.ListServicesCIDRsRequest,
    kubernetes_pb.ListServicesCIDRsResponse,
    (request: kubernetes_pb.ListServicesCIDRsRequest) => {
      return request.serializeBinary();
    },
    kubernetes_pb.ListServicesCIDRsResponse.deserializeBinary
  );

  listServicesCIDRs(
    request: kubernetes_pb.ListServicesCIDRsRequest,
    metadata: grpcWeb.Metadata | null): Promise<kubernetes_pb.ListServicesCIDRsResponse>;

  listServicesCIDRs(
    request: kubernetes_pb.ListServicesCIDRsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListServicesCIDRsResponse) => void): grpcWeb.ClientReadableStream<kubernetes_pb.ListServicesCIDRsResponse>;

  listServicesCIDRs(
    request: kubernetes_pb.ListServicesCIDRsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: kubernetes_pb.ListServicesCIDRsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/infra.KubernetesService/ListServicesCIDRs',
        request,
        metadata || {},
        this.methodDescriptorListServicesCIDRs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/infra.KubernetesService/ListServicesCIDRs',
    request,
    metadata || {},
    this.methodDescriptorListServicesCIDRs);
  }

}

