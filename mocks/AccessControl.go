// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/app-net-interface/awi-infra-guard/types"
)

// AccessControl is an autogenerated mock type for the AccessControl type
type AccessControl struct {
	mock.Mock
}

type AccessControl_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessControl) EXPECT() *AccessControl_Expecter {
	return &AccessControl_Expecter{mock: &_m.Mock}
}

// AddInboundAllowRuleByInstanceIPMatch provides a mock function with given fields: ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts
func (_m *AccessControl) AddInboundAllowRuleByInstanceIPMatch(ctx context.Context, account string, region string, vpcID string, ruleName string, instancesIPs []string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts) (string, []types.Instance, error) {
	ret := _m.Called(ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)

	var r0 string
	var r1 []types.Instance
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) (string, []types.Instance, error)); ok {
		return rf(ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) string); ok {
		r0 = rf(ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) []types.Instance); ok {
		r1 = rf(ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.Instance)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) error); ok {
		r2 = rf(ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleByInstanceIPMatch'
type AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleByInstanceIPMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - ruleName string
//   - instancesIPs []string
//   - cidrsToAllow []string
//   - protocolsAndPorts types.ProtocolsAndPorts
func (_e *AccessControl_Expecter) AddInboundAllowRuleByInstanceIPMatch(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, ruleName interface{}, instancesIPs interface{}, cidrsToAllow interface{}, protocolsAndPorts interface{}) *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call {
	return &AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call{Call: _e.mock.On("AddInboundAllowRuleByInstanceIPMatch", ctx, account, region, vpcID, ruleName, instancesIPs, cidrsToAllow, protocolsAndPorts)}
}

func (_c *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, ruleName string, instancesIPs []string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts)) *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]string), args[6].([]string), args[7].(types.ProtocolsAndPorts))
	})
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call) Return(ruleId string, instances []types.Instance, err error) *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Return(ruleId, instances, err)
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call) RunAndReturn(run func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) (string, []types.Instance, error)) *AccessControl_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleByLabelsMatch provides a mock function with given fields: ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts
func (_m *AccessControl) AddInboundAllowRuleByLabelsMatch(ctx context.Context, account string, region string, vpcID string, ruleName string, labels map[string]string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts) (string, []types.Instance, error) {
	ret := _m.Called(ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)

	var r0 string
	var r1 []types.Instance
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string, []string, types.ProtocolsAndPorts) (string, []types.Instance, error)); ok {
		return rf(ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string, []string, types.ProtocolsAndPorts) string); ok {
		r0 = rf(ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, map[string]string, []string, types.ProtocolsAndPorts) []types.Instance); ok {
		r1 = rf(ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.Instance)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, map[string]string, []string, types.ProtocolsAndPorts) error); ok {
		r2 = rf(ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessControl_AddInboundAllowRuleByLabelsMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleByLabelsMatch'
type AccessControl_AddInboundAllowRuleByLabelsMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleByLabelsMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - ruleName string
//   - labels map[string]string
//   - cidrsToAllow []string
//   - protocolsAndPorts types.ProtocolsAndPorts
func (_e *AccessControl_Expecter) AddInboundAllowRuleByLabelsMatch(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, ruleName interface{}, labels interface{}, cidrsToAllow interface{}, protocolsAndPorts interface{}) *AccessControl_AddInboundAllowRuleByLabelsMatch_Call {
	return &AccessControl_AddInboundAllowRuleByLabelsMatch_Call{Call: _e.mock.On("AddInboundAllowRuleByLabelsMatch", ctx, account, region, vpcID, ruleName, labels, cidrsToAllow, protocolsAndPorts)}
}

func (_c *AccessControl_AddInboundAllowRuleByLabelsMatch_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, ruleName string, labels map[string]string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts)) *AccessControl_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(map[string]string), args[6].([]string), args[7].(types.ProtocolsAndPorts))
	})
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleByLabelsMatch_Call) Return(ruleId string, instances []types.Instance, err error) *AccessControl_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Return(ruleId, instances, err)
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleByLabelsMatch_Call) RunAndReturn(run func(context.Context, string, string, string, string, map[string]string, []string, types.ProtocolsAndPorts) (string, []types.Instance, error)) *AccessControl_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleBySubnetMatch provides a mock function with given fields: ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts
func (_m *AccessControl) AddInboundAllowRuleBySubnetMatch(ctx context.Context, account string, region string, vpcID string, ruleName string, subnetCidrs []string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts) (string, []types.Instance, []types.Subnet, error) {
	ret := _m.Called(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)

	var r0 string
	var r1 []types.Instance
	var r2 []types.Subnet
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) (string, []types.Instance, []types.Subnet, error)); ok {
		return rf(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) string); ok {
		r0 = rf(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) []types.Instance); ok {
		r1 = rf(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.Instance)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) []types.Subnet); ok {
		r2 = rf(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]types.Subnet)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) error); ok {
		r3 = rf(ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// AccessControl_AddInboundAllowRuleBySubnetMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleBySubnetMatch'
type AccessControl_AddInboundAllowRuleBySubnetMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleBySubnetMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - ruleName string
//   - subnetCidrs []string
//   - cidrsToAllow []string
//   - protocolsAndPorts types.ProtocolsAndPorts
func (_e *AccessControl_Expecter) AddInboundAllowRuleBySubnetMatch(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, ruleName interface{}, subnetCidrs interface{}, cidrsToAllow interface{}, protocolsAndPorts interface{}) *AccessControl_AddInboundAllowRuleBySubnetMatch_Call {
	return &AccessControl_AddInboundAllowRuleBySubnetMatch_Call{Call: _e.mock.On("AddInboundAllowRuleBySubnetMatch", ctx, account, region, vpcID, ruleName, subnetCidrs, cidrsToAllow, protocolsAndPorts)}
}

func (_c *AccessControl_AddInboundAllowRuleBySubnetMatch_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, ruleName string, subnetCidrs []string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts)) *AccessControl_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].([]string), args[6].([]string), args[7].(types.ProtocolsAndPorts))
	})
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleBySubnetMatch_Call) Return(ruleId string, instances []types.Instance, subnets []types.Subnet, err error) *AccessControl_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Return(ruleId, instances, subnets, err)
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleBySubnetMatch_Call) RunAndReturn(run func(context.Context, string, string, string, string, []string, []string, types.ProtocolsAndPorts) (string, []types.Instance, []types.Subnet, error)) *AccessControl_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleForLoadBalancerByDNS provides a mock function with given fields: ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts
func (_m *AccessControl) AddInboundAllowRuleForLoadBalancerByDNS(ctx context.Context, account string, region string, loadBalancerDNS string, vpcID string, ruleName string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts) (string, string, error) {
	ret := _m.Called(ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, []string, types.ProtocolsAndPorts) (string, string, error)); ok {
		return rf(ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, []string, types.ProtocolsAndPorts) string); ok {
		r0 = rf(ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, []string, types.ProtocolsAndPorts) string); ok {
		r1 = rf(ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, string, string, []string, types.ProtocolsAndPorts) error); ok {
		r2 = rf(ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleForLoadBalancerByDNS'
type AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call struct {
	*mock.Call
}

// AddInboundAllowRuleForLoadBalancerByDNS is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - loadBalancerDNS string
//   - vpcID string
//   - ruleName string
//   - cidrsToAllow []string
//   - protocolsAndPorts types.ProtocolsAndPorts
func (_e *AccessControl_Expecter) AddInboundAllowRuleForLoadBalancerByDNS(ctx interface{}, account interface{}, region interface{}, loadBalancerDNS interface{}, vpcID interface{}, ruleName interface{}, cidrsToAllow interface{}, protocolsAndPorts interface{}) *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	return &AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call{Call: _e.mock.On("AddInboundAllowRuleForLoadBalancerByDNS", ctx, account, region, loadBalancerDNS, vpcID, ruleName, cidrsToAllow, protocolsAndPorts)}
}

func (_c *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call) Run(run func(ctx context.Context, account string, region string, loadBalancerDNS string, vpcID string, ruleName string, cidrsToAllow []string, protocolsAndPorts types.ProtocolsAndPorts)) *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].([]string), args[7].(types.ProtocolsAndPorts))
	})
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call) Return(loadBalancerId string, ruleId string, err error) *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Return(loadBalancerId, ruleId, err)
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, []string, types.ProtocolsAndPorts) (string, string, error)) *AccessControl_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleInVPC provides a mock function with given fields: ctx, account, region, destinationVpcID, cidrsToAllow, ruleName, tags
func (_m *AccessControl) AddInboundAllowRuleInVPC(ctx context.Context, account string, region string, destinationVpcID string, cidrsToAllow []string, ruleName string, tags map[string]string) error {
	ret := _m.Called(ctx, account, region, destinationVpcID, cidrsToAllow, ruleName, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, string, map[string]string) error); ok {
		r0 = rf(ctx, account, region, destinationVpcID, cidrsToAllow, ruleName, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessControl_AddInboundAllowRuleInVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleInVPC'
type AccessControl_AddInboundAllowRuleInVPC_Call struct {
	*mock.Call
}

// AddInboundAllowRuleInVPC is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - destinationVpcID string
//   - cidrsToAllow []string
//   - ruleName string
//   - tags map[string]string
func (_e *AccessControl_Expecter) AddInboundAllowRuleInVPC(ctx interface{}, account interface{}, region interface{}, destinationVpcID interface{}, cidrsToAllow interface{}, ruleName interface{}, tags interface{}) *AccessControl_AddInboundAllowRuleInVPC_Call {
	return &AccessControl_AddInboundAllowRuleInVPC_Call{Call: _e.mock.On("AddInboundAllowRuleInVPC", ctx, account, region, destinationVpcID, cidrsToAllow, ruleName, tags)}
}

func (_c *AccessControl_AddInboundAllowRuleInVPC_Call) Run(run func(ctx context.Context, account string, region string, destinationVpcID string, cidrsToAllow []string, ruleName string, tags map[string]string)) *AccessControl_AddInboundAllowRuleInVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string), args[6].(map[string]string))
	})
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleInVPC_Call) Return(_a0 error) *AccessControl_AddInboundAllowRuleInVPC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessControl_AddInboundAllowRuleInVPC_Call) RunAndReturn(run func(context.Context, string, string, string, []string, string, map[string]string) error) *AccessControl_AddInboundAllowRuleInVPC_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshInboundAllowRule provides a mock function with given fields: ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts
func (_m *AccessControl) RefreshInboundAllowRule(ctx context.Context, account string, region string, ruleId string, cidrsToAdd []string, cidrsToRemove []string, destinationLabels map[string]string, destinationPrefixes []string, destinationVPCId string, protocolsAndPorts types.ProtocolsAndPorts) ([]types.Instance, []types.Subnet, error) {
	ret := _m.Called(ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)

	var r0 []types.Instance
	var r1 []types.Subnet
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string, map[string]string, []string, string, types.ProtocolsAndPorts) ([]types.Instance, []types.Subnet, error)); ok {
		return rf(ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string, map[string]string, []string, string, types.ProtocolsAndPorts) []types.Instance); ok {
		r0 = rf(ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string, []string, map[string]string, []string, string, types.ProtocolsAndPorts) []types.Subnet); ok {
		r1 = rf(ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.Subnet)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, []string, []string, map[string]string, []string, string, types.ProtocolsAndPorts) error); ok {
		r2 = rf(ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AccessControl_RefreshInboundAllowRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshInboundAllowRule'
type AccessControl_RefreshInboundAllowRule_Call struct {
	*mock.Call
}

// RefreshInboundAllowRule is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - ruleId string
//   - cidrsToAdd []string
//   - cidrsToRemove []string
//   - destinationLabels map[string]string
//   - destinationPrefixes []string
//   - destinationVPCId string
//   - protocolsAndPorts types.ProtocolsAndPorts
func (_e *AccessControl_Expecter) RefreshInboundAllowRule(ctx interface{}, account interface{}, region interface{}, ruleId interface{}, cidrsToAdd interface{}, cidrsToRemove interface{}, destinationLabels interface{}, destinationPrefixes interface{}, destinationVPCId interface{}, protocolsAndPorts interface{}) *AccessControl_RefreshInboundAllowRule_Call {
	return &AccessControl_RefreshInboundAllowRule_Call{Call: _e.mock.On("RefreshInboundAllowRule", ctx, account, region, ruleId, cidrsToAdd, cidrsToRemove, destinationLabels, destinationPrefixes, destinationVPCId, protocolsAndPorts)}
}

func (_c *AccessControl_RefreshInboundAllowRule_Call) Run(run func(ctx context.Context, account string, region string, ruleId string, cidrsToAdd []string, cidrsToRemove []string, destinationLabels map[string]string, destinationPrefixes []string, destinationVPCId string, protocolsAndPorts types.ProtocolsAndPorts)) *AccessControl_RefreshInboundAllowRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].([]string), args[6].(map[string]string), args[7].([]string), args[8].(string), args[9].(types.ProtocolsAndPorts))
	})
	return _c
}

func (_c *AccessControl_RefreshInboundAllowRule_Call) Return(instances []types.Instance, subnets []types.Subnet, err error) *AccessControl_RefreshInboundAllowRule_Call {
	_c.Call.Return(instances, subnets, err)
	return _c
}

func (_c *AccessControl_RefreshInboundAllowRule_Call) RunAndReturn(run func(context.Context, string, string, string, []string, []string, map[string]string, []string, string, types.ProtocolsAndPorts) ([]types.Instance, []types.Subnet, error)) *AccessControl_RefreshInboundAllowRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRuleFromVPCByName provides a mock function with given fields: ctx, account, region, vpcID, ruleName
func (_m *AccessControl) RemoveInboundAllowRuleFromVPCByName(ctx context.Context, account string, region string, vpcID string, ruleName string) error {
	ret := _m.Called(ctx, account, region, vpcID, ruleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, account, region, vpcID, ruleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessControl_RemoveInboundAllowRuleFromVPCByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRuleFromVPCByName'
type AccessControl_RemoveInboundAllowRuleFromVPCByName_Call struct {
	*mock.Call
}

// RemoveInboundAllowRuleFromVPCByName is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - ruleName string
func (_e *AccessControl_Expecter) RemoveInboundAllowRuleFromVPCByName(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, ruleName interface{}) *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call {
	return &AccessControl_RemoveInboundAllowRuleFromVPCByName_Call{Call: _e.mock.On("RemoveInboundAllowRuleFromVPCByName", ctx, account, region, vpcID, ruleName)}
}

func (_c *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, ruleName string)) *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call) Return(_a0 error) *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *AccessControl_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRuleRulesByTags provides a mock function with given fields: ctx, account, region, vpcID, ruleName, tags
func (_m *AccessControl) RemoveInboundAllowRuleRulesByTags(ctx context.Context, account string, region string, vpcID string, ruleName string, tags map[string]string) error {
	ret := _m.Called(ctx, account, region, vpcID, ruleName, tags)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]string) error); ok {
		r0 = rf(ctx, account, region, vpcID, ruleName, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessControl_RemoveInboundAllowRuleRulesByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRuleRulesByTags'
type AccessControl_RemoveInboundAllowRuleRulesByTags_Call struct {
	*mock.Call
}

// RemoveInboundAllowRuleRulesByTags is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - ruleName string
//   - tags map[string]string
func (_e *AccessControl_Expecter) RemoveInboundAllowRuleRulesByTags(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, ruleName interface{}, tags interface{}) *AccessControl_RemoveInboundAllowRuleRulesByTags_Call {
	return &AccessControl_RemoveInboundAllowRuleRulesByTags_Call{Call: _e.mock.On("RemoveInboundAllowRuleRulesByTags", ctx, account, region, vpcID, ruleName, tags)}
}

func (_c *AccessControl_RemoveInboundAllowRuleRulesByTags_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, ruleName string, tags map[string]string)) *AccessControl_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(map[string]string))
	})
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRuleRulesByTags_Call) Return(_a0 error) *AccessControl_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRuleRulesByTags_Call) RunAndReturn(run func(context.Context, string, string, string, string, map[string]string) error) *AccessControl_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRulesFromVPCById provides a mock function with given fields: ctx, account, region, vpcID, instanceIDs, loadBalancersIDs, ruleId
func (_m *AccessControl) RemoveInboundAllowRulesFromVPCById(ctx context.Context, account string, region string, vpcID string, instanceIDs []string, loadBalancersIDs []string, ruleId string) error {
	ret := _m.Called(ctx, account, region, vpcID, instanceIDs, loadBalancersIDs, ruleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string, string) error); ok {
		r0 = rf(ctx, account, region, vpcID, instanceIDs, loadBalancersIDs, ruleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccessControl_RemoveInboundAllowRulesFromVPCById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRulesFromVPCById'
type AccessControl_RemoveInboundAllowRulesFromVPCById_Call struct {
	*mock.Call
}

// RemoveInboundAllowRulesFromVPCById is a helper method to define mock.On call
//   - ctx context.Context
//   - account string
//   - region string
//   - vpcID string
//   - instanceIDs []string
//   - loadBalancersIDs []string
//   - ruleId string
func (_e *AccessControl_Expecter) RemoveInboundAllowRulesFromVPCById(ctx interface{}, account interface{}, region interface{}, vpcID interface{}, instanceIDs interface{}, loadBalancersIDs interface{}, ruleId interface{}) *AccessControl_RemoveInboundAllowRulesFromVPCById_Call {
	return &AccessControl_RemoveInboundAllowRulesFromVPCById_Call{Call: _e.mock.On("RemoveInboundAllowRulesFromVPCById", ctx, account, region, vpcID, instanceIDs, loadBalancersIDs, ruleId)}
}

func (_c *AccessControl_RemoveInboundAllowRulesFromVPCById_Call) Run(run func(ctx context.Context, account string, region string, vpcID string, instanceIDs []string, loadBalancersIDs []string, ruleId string)) *AccessControl_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].([]string), args[6].(string))
	})
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRulesFromVPCById_Call) Return(_a0 error) *AccessControl_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessControl_RemoveInboundAllowRulesFromVPCById_Call) RunAndReturn(run func(context.Context, string, string, string, []string, []string, string) error) *AccessControl_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessControl creates a new instance of AccessControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessControl {
	mock := &AccessControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
