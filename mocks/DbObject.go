// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DbObject is an autogenerated mock type for the DbObject type
type DbObject struct {
	mock.Mock
}

type DbObject_Expecter struct {
	mock *mock.Mock
}

func (_m *DbObject) EXPECT() *DbObject_Expecter {
	return &DbObject_Expecter{mock: &_m.Mock}
}

// DbId provides a mock function with given fields:
func (_m *DbObject) DbId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DbObject_DbId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DbId'
type DbObject_DbId_Call struct {
	*mock.Call
}

// DbId is a helper method to define mock.On call
func (_e *DbObject_Expecter) DbId() *DbObject_DbId_Call {
	return &DbObject_DbId_Call{Call: _e.mock.On("DbId")}
}

func (_c *DbObject_DbId_Call) Run(run func()) *DbObject_DbId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DbObject_DbId_Call) Return(_a0 string) *DbObject_DbId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbObject_DbId_Call) RunAndReturn(run func() string) *DbObject_DbId_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvider provides a mock function with given fields:
func (_m *DbObject) GetProvider() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DbObject_GetProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvider'
type DbObject_GetProvider_Call struct {
	*mock.Call
}

// GetProvider is a helper method to define mock.On call
func (_e *DbObject_Expecter) GetProvider() *DbObject_GetProvider_Call {
	return &DbObject_GetProvider_Call{Call: _e.mock.On("GetProvider")}
}

func (_c *DbObject_GetProvider_Call) Run(run func()) *DbObject_GetProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DbObject_GetProvider_Call) Return(_a0 string) *DbObject_GetProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DbObject_GetProvider_Call) RunAndReturn(run func() string) *DbObject_GetProvider_Call {
	_c.Call.Return(run)
	return _c
}

// SetSyncTime provides a mock function with given fields: _a0
func (_m *DbObject) SetSyncTime(_a0 string) {
	_m.Called(_a0)
}

// DbObject_SetSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSyncTime'
type DbObject_SetSyncTime_Call struct {
	*mock.Call
}

// SetSyncTime is a helper method to define mock.On call
//   - _a0 string
func (_e *DbObject_Expecter) SetSyncTime(_a0 interface{}) *DbObject_SetSyncTime_Call {
	return &DbObject_SetSyncTime_Call{Call: _e.mock.On("SetSyncTime", _a0)}
}

func (_c *DbObject_SetSyncTime_Call) Run(run func(_a0 string)) *DbObject_SetSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DbObject_SetSyncTime_Call) Return() *DbObject_SetSyncTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *DbObject_SetSyncTime_Call) RunAndReturn(run func(string)) *DbObject_SetSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewDbObject creates a new instance of DbObject. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbObject(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbObject {
	mock := &DbObject{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
