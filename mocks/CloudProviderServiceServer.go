// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	infrapb "github.com/app-net-interface/awi-infra-guard/grpc/go/infrapb"
)

// CloudProviderServiceServer is an autogenerated mock type for the CloudProviderServiceServer type
type CloudProviderServiceServer struct {
	mock.Mock
}

type CloudProviderServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudProviderServiceServer) EXPECT() *CloudProviderServiceServer_Expecter {
	return &CloudProviderServiceServer_Expecter{mock: &_m.Mock}
}

// GetCIDRsForLabels provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetCIDRsForLabels(_a0 context.Context, _a1 *infrapb.GetCIDRsForLabelsRequest) (*infrapb.GetCIDRsForLabelsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetCIDRsForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest) (*infrapb.GetCIDRsForLabelsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest) *infrapb.GetCIDRsForLabelsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetCIDRsForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetCIDRsForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRsForLabels'
type CloudProviderServiceServer_GetCIDRsForLabels_Call struct {
	*mock.Call
}

// GetCIDRsForLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetCIDRsForLabelsRequest
func (_e *CloudProviderServiceServer_Expecter) GetCIDRsForLabels(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetCIDRsForLabels_Call {
	return &CloudProviderServiceServer_GetCIDRsForLabels_Call{Call: _e.mock.On("GetCIDRsForLabels", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetCIDRsForLabels_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetCIDRsForLabelsRequest)) *CloudProviderServiceServer_GetCIDRsForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetCIDRsForLabelsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetCIDRsForLabels_Call) Return(_a0 *infrapb.GetCIDRsForLabelsResponse, _a1 error) *CloudProviderServiceServer_GetCIDRsForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetCIDRsForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetCIDRsForLabelsRequest) (*infrapb.GetCIDRsForLabelsResponse, error)) *CloudProviderServiceServer_GetCIDRsForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPsForLabels provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetIPsForLabels(_a0 context.Context, _a1 *infrapb.GetIPsForLabelsRequest) (*infrapb.GetIPsForLabelsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetIPsForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetIPsForLabelsRequest) (*infrapb.GetIPsForLabelsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetIPsForLabelsRequest) *infrapb.GetIPsForLabelsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetIPsForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetIPsForLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetIPsForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPsForLabels'
type CloudProviderServiceServer_GetIPsForLabels_Call struct {
	*mock.Call
}

// GetIPsForLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetIPsForLabelsRequest
func (_e *CloudProviderServiceServer_Expecter) GetIPsForLabels(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetIPsForLabels_Call {
	return &CloudProviderServiceServer_GetIPsForLabels_Call{Call: _e.mock.On("GetIPsForLabels", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetIPsForLabels_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetIPsForLabelsRequest)) *CloudProviderServiceServer_GetIPsForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetIPsForLabelsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetIPsForLabels_Call) Return(_a0 *infrapb.GetIPsForLabelsResponse, _a1 error) *CloudProviderServiceServer_GetIPsForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetIPsForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetIPsForLabelsRequest) (*infrapb.GetIPsForLabelsResponse, error)) *CloudProviderServiceServer_GetIPsForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstancesForLabels provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetInstancesForLabels(_a0 context.Context, _a1 *infrapb.GetInstancesForLabelsRequest) (*infrapb.GetInstancesForLabelsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetInstancesForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetInstancesForLabelsRequest) (*infrapb.GetInstancesForLabelsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetInstancesForLabelsRequest) *infrapb.GetInstancesForLabelsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetInstancesForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetInstancesForLabelsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetInstancesForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstancesForLabels'
type CloudProviderServiceServer_GetInstancesForLabels_Call struct {
	*mock.Call
}

// GetInstancesForLabels is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetInstancesForLabelsRequest
func (_e *CloudProviderServiceServer_Expecter) GetInstancesForLabels(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetInstancesForLabels_Call {
	return &CloudProviderServiceServer_GetInstancesForLabels_Call{Call: _e.mock.On("GetInstancesForLabels", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetInstancesForLabels_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetInstancesForLabelsRequest)) *CloudProviderServiceServer_GetInstancesForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetInstancesForLabelsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetInstancesForLabels_Call) Return(_a0 *infrapb.GetInstancesForLabelsResponse, _a1 error) *CloudProviderServiceServer_GetInstancesForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetInstancesForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetInstancesForLabelsRequest) (*infrapb.GetInstancesForLabelsResponse, error)) *CloudProviderServiceServer_GetInstancesForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubnet provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetSubnet(_a0 context.Context, _a1 *infrapb.GetSubnetRequest) (*infrapb.GetSubnetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetSubnetRequest) (*infrapb.GetSubnetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetSubnetRequest) *infrapb.GetSubnetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetSubnetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubnet'
type CloudProviderServiceServer_GetSubnet_Call struct {
	*mock.Call
}

// GetSubnet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetSubnetRequest
func (_e *CloudProviderServiceServer_Expecter) GetSubnet(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetSubnet_Call {
	return &CloudProviderServiceServer_GetSubnet_Call{Call: _e.mock.On("GetSubnet", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetSubnet_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetSubnetRequest)) *CloudProviderServiceServer_GetSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetSubnetRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetSubnet_Call) Return(_a0 *infrapb.GetSubnetResponse, _a1 error) *CloudProviderServiceServer_GetSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetSubnet_Call) RunAndReturn(run func(context.Context, *infrapb.GetSubnetRequest) (*infrapb.GetSubnetResponse, error)) *CloudProviderServiceServer_GetSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCIDForCIDR provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetVPCIDForCIDR(_a0 context.Context, _a1 *infrapb.GetVPCIDForCIDRRequest) (*infrapb.GetVPCIDForCIDRResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetVPCIDForCIDRResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest) (*infrapb.GetVPCIDForCIDRResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest) *infrapb.GetVPCIDForCIDRResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetVPCIDForCIDRResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetVPCIDForCIDR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCIDForCIDR'
type CloudProviderServiceServer_GetVPCIDForCIDR_Call struct {
	*mock.Call
}

// GetVPCIDForCIDR is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetVPCIDForCIDRRequest
func (_e *CloudProviderServiceServer_Expecter) GetVPCIDForCIDR(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetVPCIDForCIDR_Call {
	return &CloudProviderServiceServer_GetVPCIDForCIDR_Call{Call: _e.mock.On("GetVPCIDForCIDR", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetVPCIDForCIDR_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetVPCIDForCIDRRequest)) *CloudProviderServiceServer_GetVPCIDForCIDR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetVPCIDForCIDRRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetVPCIDForCIDR_Call) Return(_a0 *infrapb.GetVPCIDForCIDRResponse, _a1 error) *CloudProviderServiceServer_GetVPCIDForCIDR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetVPCIDForCIDR_Call) RunAndReturn(run func(context.Context, *infrapb.GetVPCIDForCIDRRequest) (*infrapb.GetVPCIDForCIDRResponse, error)) *CloudProviderServiceServer_GetVPCIDForCIDR_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCIDWithTag provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) GetVPCIDWithTag(_a0 context.Context, _a1 *infrapb.GetVPCIDWithTagRequest) (*infrapb.GetVPCIDWithTagResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.GetVPCIDWithTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDWithTagRequest) (*infrapb.GetVPCIDWithTagResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDWithTagRequest) *infrapb.GetVPCIDWithTagResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetVPCIDWithTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetVPCIDWithTagRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_GetVPCIDWithTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCIDWithTag'
type CloudProviderServiceServer_GetVPCIDWithTag_Call struct {
	*mock.Call
}

// GetVPCIDWithTag is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.GetVPCIDWithTagRequest
func (_e *CloudProviderServiceServer_Expecter) GetVPCIDWithTag(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_GetVPCIDWithTag_Call {
	return &CloudProviderServiceServer_GetVPCIDWithTag_Call{Call: _e.mock.On("GetVPCIDWithTag", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_GetVPCIDWithTag_Call) Run(run func(_a0 context.Context, _a1 *infrapb.GetVPCIDWithTagRequest)) *CloudProviderServiceServer_GetVPCIDWithTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.GetVPCIDWithTagRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_GetVPCIDWithTag_Call) Return(_a0 *infrapb.GetVPCIDWithTagResponse, _a1 error) *CloudProviderServiceServer_GetVPCIDWithTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_GetVPCIDWithTag_Call) RunAndReturn(run func(context.Context, *infrapb.GetVPCIDWithTagRequest) (*infrapb.GetVPCIDWithTagResponse, error)) *CloudProviderServiceServer_GetVPCIDWithTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListACLs provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListACLs(_a0 context.Context, _a1 *infrapb.ListACLsRequest) (*infrapb.ListACLsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListACLsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListACLsRequest) (*infrapb.ListACLsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListACLsRequest) *infrapb.ListACLsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListACLsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListACLsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListACLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListACLs'
type CloudProviderServiceServer_ListACLs_Call struct {
	*mock.Call
}

// ListACLs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListACLsRequest
func (_e *CloudProviderServiceServer_Expecter) ListACLs(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListACLs_Call {
	return &CloudProviderServiceServer_ListACLs_Call{Call: _e.mock.On("ListACLs", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListACLs_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListACLsRequest)) *CloudProviderServiceServer_ListACLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListACLsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListACLs_Call) Return(_a0 *infrapb.ListACLsResponse, _a1 error) *CloudProviderServiceServer_ListACLs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListACLs_Call) RunAndReturn(run func(context.Context, *infrapb.ListACLsRequest) (*infrapb.ListACLsResponse, error)) *CloudProviderServiceServer_ListACLs_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListAccounts(_a0 context.Context, _a1 *infrapb.ListAccountsRequest) (*infrapb.ListAccountsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListAccountsRequest) (*infrapb.ListAccountsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListAccountsRequest) *infrapb.ListAccountsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListAccountsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type CloudProviderServiceServer_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListAccountsRequest
func (_e *CloudProviderServiceServer_Expecter) ListAccounts(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListAccounts_Call {
	return &CloudProviderServiceServer_ListAccounts_Call{Call: _e.mock.On("ListAccounts", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListAccounts_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListAccountsRequest)) *CloudProviderServiceServer_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListAccountsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListAccounts_Call) Return(_a0 *infrapb.ListAccountsResponse, _a1 error) *CloudProviderServiceServer_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListAccounts_Call) RunAndReturn(run func(context.Context, *infrapb.ListAccountsRequest) (*infrapb.ListAccountsResponse, error)) *CloudProviderServiceServer_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListCloudClusters provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListCloudClusters(_a0 context.Context, _a1 *infrapb.ListCloudClustersRequest) (*infrapb.ListCloudClustersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListCloudClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListCloudClustersRequest) (*infrapb.ListCloudClustersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListCloudClustersRequest) *infrapb.ListCloudClustersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListCloudClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListCloudClustersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListCloudClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCloudClusters'
type CloudProviderServiceServer_ListCloudClusters_Call struct {
	*mock.Call
}

// ListCloudClusters is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListCloudClustersRequest
func (_e *CloudProviderServiceServer_Expecter) ListCloudClusters(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListCloudClusters_Call {
	return &CloudProviderServiceServer_ListCloudClusters_Call{Call: _e.mock.On("ListCloudClusters", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListCloudClusters_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListCloudClustersRequest)) *CloudProviderServiceServer_ListCloudClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListCloudClustersRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListCloudClusters_Call) Return(_a0 *infrapb.ListCloudClustersResponse, _a1 error) *CloudProviderServiceServer_ListCloudClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListCloudClusters_Call) RunAndReturn(run func(context.Context, *infrapb.ListCloudClustersRequest) (*infrapb.ListCloudClustersResponse, error)) *CloudProviderServiceServer_ListCloudClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstances provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListInstances(_a0 context.Context, _a1 *infrapb.ListInstancesRequest) (*infrapb.ListInstancesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListInstancesRequest) (*infrapb.ListInstancesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListInstancesRequest) *infrapb.ListInstancesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListInstancesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type CloudProviderServiceServer_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListInstancesRequest
func (_e *CloudProviderServiceServer_Expecter) ListInstances(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListInstances_Call {
	return &CloudProviderServiceServer_ListInstances_Call{Call: _e.mock.On("ListInstances", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListInstances_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListInstancesRequest)) *CloudProviderServiceServer_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListInstancesRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListInstances_Call) Return(_a0 *infrapb.ListInstancesResponse, _a1 error) *CloudProviderServiceServer_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListInstances_Call) RunAndReturn(run func(context.Context, *infrapb.ListInstancesRequest) (*infrapb.ListInstancesResponse, error)) *CloudProviderServiceServer_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListRouteTables provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListRouteTables(_a0 context.Context, _a1 *infrapb.ListRouteTablesRequest) (*infrapb.ListRouteTablesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListRouteTablesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListRouteTablesRequest) (*infrapb.ListRouteTablesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListRouteTablesRequest) *infrapb.ListRouteTablesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListRouteTablesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListRouteTablesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRouteTables'
type CloudProviderServiceServer_ListRouteTables_Call struct {
	*mock.Call
}

// ListRouteTables is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListRouteTablesRequest
func (_e *CloudProviderServiceServer_Expecter) ListRouteTables(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListRouteTables_Call {
	return &CloudProviderServiceServer_ListRouteTables_Call{Call: _e.mock.On("ListRouteTables", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListRouteTables_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListRouteTablesRequest)) *CloudProviderServiceServer_ListRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListRouteTablesRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListRouteTables_Call) Return(_a0 *infrapb.ListRouteTablesResponse, _a1 error) *CloudProviderServiceServer_ListRouteTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListRouteTables_Call) RunAndReturn(run func(context.Context, *infrapb.ListRouteTablesRequest) (*infrapb.ListRouteTablesResponse, error)) *CloudProviderServiceServer_ListRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityGroups provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListSecurityGroups(_a0 context.Context, _a1 *infrapb.ListSecurityGroupsRequest) (*infrapb.ListSecurityGroupsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListSecurityGroupsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSecurityGroupsRequest) (*infrapb.ListSecurityGroupsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSecurityGroupsRequest) *infrapb.ListSecurityGroupsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListSecurityGroupsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListSecurityGroupsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityGroups'
type CloudProviderServiceServer_ListSecurityGroups_Call struct {
	*mock.Call
}

// ListSecurityGroups is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListSecurityGroupsRequest
func (_e *CloudProviderServiceServer_Expecter) ListSecurityGroups(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListSecurityGroups_Call {
	return &CloudProviderServiceServer_ListSecurityGroups_Call{Call: _e.mock.On("ListSecurityGroups", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListSecurityGroups_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListSecurityGroupsRequest)) *CloudProviderServiceServer_ListSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListSecurityGroupsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListSecurityGroups_Call) Return(_a0 *infrapb.ListSecurityGroupsResponse, _a1 error) *CloudProviderServiceServer_ListSecurityGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListSecurityGroups_Call) RunAndReturn(run func(context.Context, *infrapb.ListSecurityGroupsRequest) (*infrapb.ListSecurityGroupsResponse, error)) *CloudProviderServiceServer_ListSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListSubnets(_a0 context.Context, _a1 *infrapb.ListSubnetsRequest) (*infrapb.ListSubnetsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSubnetsRequest) (*infrapb.ListSubnetsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSubnetsRequest) *infrapb.ListSubnetsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListSubnetsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type CloudProviderServiceServer_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListSubnetsRequest
func (_e *CloudProviderServiceServer_Expecter) ListSubnets(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListSubnets_Call {
	return &CloudProviderServiceServer_ListSubnets_Call{Call: _e.mock.On("ListSubnets", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListSubnets_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListSubnetsRequest)) *CloudProviderServiceServer_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListSubnetsRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListSubnets_Call) Return(_a0 *infrapb.ListSubnetsResponse, _a1 error) *CloudProviderServiceServer_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListSubnets_Call) RunAndReturn(run func(context.Context, *infrapb.ListSubnetsRequest) (*infrapb.ListSubnetsResponse, error)) *CloudProviderServiceServer_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPC provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) ListVPC(_a0 context.Context, _a1 *infrapb.ListVPCRequest) (*infrapb.ListVPCResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListVPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListVPCRequest) (*infrapb.ListVPCResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListVPCRequest) *infrapb.ListVPCResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListVPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListVPCRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_ListVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPC'
type CloudProviderServiceServer_ListVPC_Call struct {
	*mock.Call
}

// ListVPC is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListVPCRequest
func (_e *CloudProviderServiceServer_Expecter) ListVPC(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_ListVPC_Call {
	return &CloudProviderServiceServer_ListVPC_Call{Call: _e.mock.On("ListVPC", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_ListVPC_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListVPCRequest)) *CloudProviderServiceServer_ListVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListVPCRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_ListVPC_Call) Return(_a0 *infrapb.ListVPCResponse, _a1 error) *CloudProviderServiceServer_ListVPC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_ListVPC_Call) RunAndReturn(run func(context.Context, *infrapb.ListVPCRequest) (*infrapb.ListVPCResponse, error)) *CloudProviderServiceServer_ListVPC_Call {
	_c.Call.Return(run)
	return _c
}

// Summary provides a mock function with given fields: _a0, _a1
func (_m *CloudProviderServiceServer) Summary(_a0 context.Context, _a1 *infrapb.SummaryRequest) (*infrapb.SummaryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.SummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.SummaryRequest) (*infrapb.SummaryResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.SummaryRequest) *infrapb.SummaryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.SummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.SummaryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceServer_Summary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Summary'
type CloudProviderServiceServer_Summary_Call struct {
	*mock.Call
}

// Summary is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.SummaryRequest
func (_e *CloudProviderServiceServer_Expecter) Summary(_a0 interface{}, _a1 interface{}) *CloudProviderServiceServer_Summary_Call {
	return &CloudProviderServiceServer_Summary_Call{Call: _e.mock.On("Summary", _a0, _a1)}
}

func (_c *CloudProviderServiceServer_Summary_Call) Run(run func(_a0 context.Context, _a1 *infrapb.SummaryRequest)) *CloudProviderServiceServer_Summary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.SummaryRequest))
	})
	return _c
}

func (_c *CloudProviderServiceServer_Summary_Call) Return(_a0 *infrapb.SummaryResponse, _a1 error) *CloudProviderServiceServer_Summary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceServer_Summary_Call) RunAndReturn(run func(context.Context, *infrapb.SummaryRequest) (*infrapb.SummaryResponse, error)) *CloudProviderServiceServer_Summary_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedCloudProviderServiceServer provides a mock function with given fields:
func (_m *CloudProviderServiceServer) mustEmbedUnimplementedCloudProviderServiceServer() {
	_m.Called()
}

// CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedCloudProviderServiceServer'
type CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedCloudProviderServiceServer is a helper method to define mock.On call
func (_e *CloudProviderServiceServer_Expecter) mustEmbedUnimplementedCloudProviderServiceServer() *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call {
	return &CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedCloudProviderServiceServer")}
}

func (_c *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call) Run(run func()) *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call) Return() *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call) RunAndReturn(run func()) *CloudProviderServiceServer_mustEmbedUnimplementedCloudProviderServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudProviderServiceServer creates a new instance of CloudProviderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudProviderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudProviderServiceServer {
	mock := &CloudProviderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
