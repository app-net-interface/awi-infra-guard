// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	types "github.com/app-net-interface/awi-infra-guard/types"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteACL provides a mock function with given fields: id
func (_m *Client) DeleteACL(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteACL'
type Client_DeleteACL_Call struct {
	*mock.Call
}

// DeleteACL is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteACL(id interface{}) *Client_DeleteACL_Call {
	return &Client_DeleteACL_Call{Call: _e.mock.On("DeleteACL", id)}
}

func (_c *Client_DeleteACL_Call) Run(run func(id string)) *Client_DeleteACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteACL_Call) Return(_a0 error) *Client_DeleteACL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteACL_Call) RunAndReturn(run func(string) error) *Client_DeleteACL_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with given fields: id
func (_m *Client) DeleteCluster(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type Client_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteCluster(id interface{}) *Client_DeleteCluster_Call {
	return &Client_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster", id)}
}

func (_c *Client_DeleteCluster_Call) Run(run func(id string)) *Client_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteCluster_Call) Return(_a0 error) *Client_DeleteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteCluster_Call) RunAndReturn(run func(string) error) *Client_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInstance provides a mock function with given fields: id
func (_m *Client) DeleteInstance(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInstance'
type Client_DeleteInstance_Call struct {
	*mock.Call
}

// DeleteInstance is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteInstance(id interface{}) *Client_DeleteInstance_Call {
	return &Client_DeleteInstance_Call{Call: _e.mock.On("DeleteInstance", id)}
}

func (_c *Client_DeleteInstance_Call) Run(run func(id string)) *Client_DeleteInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteInstance_Call) Return(_a0 error) *Client_DeleteInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteInstance_Call) RunAndReturn(run func(string) error) *Client_DeleteInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKubernetesNode provides a mock function with given fields: id
func (_m *Client) DeleteKubernetesNode(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteKubernetesNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKubernetesNode'
type Client_DeleteKubernetesNode_Call struct {
	*mock.Call
}

// DeleteKubernetesNode is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteKubernetesNode(id interface{}) *Client_DeleteKubernetesNode_Call {
	return &Client_DeleteKubernetesNode_Call{Call: _e.mock.On("DeleteKubernetesNode", id)}
}

func (_c *Client_DeleteKubernetesNode_Call) Run(run func(id string)) *Client_DeleteKubernetesNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteKubernetesNode_Call) Return(_a0 error) *Client_DeleteKubernetesNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteKubernetesNode_Call) RunAndReturn(run func(string) error) *Client_DeleteKubernetesNode_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKubernetesService provides a mock function with given fields: id
func (_m *Client) DeleteKubernetesService(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteKubernetesService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKubernetesService'
type Client_DeleteKubernetesService_Call struct {
	*mock.Call
}

// DeleteKubernetesService is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteKubernetesService(id interface{}) *Client_DeleteKubernetesService_Call {
	return &Client_DeleteKubernetesService_Call{Call: _e.mock.On("DeleteKubernetesService", id)}
}

func (_c *Client_DeleteKubernetesService_Call) Run(run func(id string)) *Client_DeleteKubernetesService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteKubernetesService_Call) Return(_a0 error) *Client_DeleteKubernetesService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteKubernetesService_Call) RunAndReturn(run func(string) error) *Client_DeleteKubernetesService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function with given fields: id
func (_m *Client) DeleteNamespace(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type Client_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteNamespace(id interface{}) *Client_DeleteNamespace_Call {
	return &Client_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace", id)}
}

func (_c *Client_DeleteNamespace_Call) Run(run func(id string)) *Client_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteNamespace_Call) Return(_a0 error) *Client_DeleteNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteNamespace_Call) RunAndReturn(run func(string) error) *Client_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePod provides a mock function with given fields: id
func (_m *Client) DeletePod(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeletePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePod'
type Client_DeletePod_Call struct {
	*mock.Call
}

// DeletePod is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeletePod(id interface{}) *Client_DeletePod_Call {
	return &Client_DeletePod_Call{Call: _e.mock.On("DeletePod", id)}
}

func (_c *Client_DeletePod_Call) Run(run func(id string)) *Client_DeletePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeletePod_Call) Return(_a0 error) *Client_DeletePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeletePod_Call) RunAndReturn(run func(string) error) *Client_DeletePod_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRouteTable provides a mock function with given fields: id
func (_m *Client) DeleteRouteTable(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRouteTable'
type Client_DeleteRouteTable_Call struct {
	*mock.Call
}

// DeleteRouteTable is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteRouteTable(id interface{}) *Client_DeleteRouteTable_Call {
	return &Client_DeleteRouteTable_Call{Call: _e.mock.On("DeleteRouteTable", id)}
}

func (_c *Client_DeleteRouteTable_Call) Run(run func(id string)) *Client_DeleteRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteRouteTable_Call) Return(_a0 error) *Client_DeleteRouteTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteRouteTable_Call) RunAndReturn(run func(string) error) *Client_DeleteRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSecurityGroup provides a mock function with given fields: id
func (_m *Client) DeleteSecurityGroup(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSecurityGroup'
type Client_DeleteSecurityGroup_Call struct {
	*mock.Call
}

// DeleteSecurityGroup is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteSecurityGroup(id interface{}) *Client_DeleteSecurityGroup_Call {
	return &Client_DeleteSecurityGroup_Call{Call: _e.mock.On("DeleteSecurityGroup", id)}
}

func (_c *Client_DeleteSecurityGroup_Call) Run(run func(id string)) *Client_DeleteSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteSecurityGroup_Call) Return(_a0 error) *Client_DeleteSecurityGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteSecurityGroup_Call) RunAndReturn(run func(string) error) *Client_DeleteSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubnet provides a mock function with given fields: id
func (_m *Client) DeleteSubnet(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubnet'
type Client_DeleteSubnet_Call struct {
	*mock.Call
}

// DeleteSubnet is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteSubnet(id interface{}) *Client_DeleteSubnet_Call {
	return &Client_DeleteSubnet_Call{Call: _e.mock.On("DeleteSubnet", id)}
}

func (_c *Client_DeleteSubnet_Call) Run(run func(id string)) *Client_DeleteSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteSubnet_Call) Return(_a0 error) *Client_DeleteSubnet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteSubnet_Call) RunAndReturn(run func(string) error) *Client_DeleteSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncTime provides a mock function with given fields: id
func (_m *Client) DeleteSyncTime(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncTime'
type Client_DeleteSyncTime_Call struct {
	*mock.Call
}

// DeleteSyncTime is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteSyncTime(id interface{}) *Client_DeleteSyncTime_Call {
	return &Client_DeleteSyncTime_Call{Call: _e.mock.On("DeleteSyncTime", id)}
}

func (_c *Client_DeleteSyncTime_Call) Run(run func(id string)) *Client_DeleteSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteSyncTime_Call) Return(_a0 error) *Client_DeleteSyncTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteSyncTime_Call) RunAndReturn(run func(string) error) *Client_DeleteSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVPC provides a mock function with given fields: id
func (_m *Client) DeleteVPC(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DeleteVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVPC'
type Client_DeleteVPC_Call struct {
	*mock.Call
}

// DeleteVPC is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) DeleteVPC(id interface{}) *Client_DeleteVPC_Call {
	return &Client_DeleteVPC_Call{Call: _e.mock.On("DeleteVPC", id)}
}

func (_c *Client_DeleteVPC_Call) Run(run func(id string)) *Client_DeleteVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_DeleteVPC_Call) Return(_a0 error) *Client_DeleteVPC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DeleteVPC_Call) RunAndReturn(run func(string) error) *Client_DeleteVPC_Call {
	_c.Call.Return(run)
	return _c
}

// DropDB provides a mock function with given fields:
func (_m *Client) DropDB() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_DropDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDB'
type Client_DropDB_Call struct {
	*mock.Call
}

// DropDB is a helper method to define mock.On call
func (_e *Client_Expecter) DropDB() *Client_DropDB_Call {
	return &Client_DropDB_Call{Call: _e.mock.On("DropDB")}
}

func (_c *Client_DropDB_Call) Run(run func()) *Client_DropDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_DropDB_Call) Return(_a0 error) *Client_DropDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_DropDB_Call) RunAndReturn(run func() error) *Client_DropDB_Call {
	_c.Call.Return(run)
	return _c
}

// GetACL provides a mock function with given fields: id
func (_m *Client) GetACL(id string) (*types.ACL, error) {
	ret := _m.Called(id)

	var r0 *types.ACL
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.ACL, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.ACL); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ACL)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetACL'
type Client_GetACL_Call struct {
	*mock.Call
}

// GetACL is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetACL(id interface{}) *Client_GetACL_Call {
	return &Client_GetACL_Call{Call: _e.mock.On("GetACL", id)}
}

func (_c *Client_GetACL_Call) Run(run func(id string)) *Client_GetACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetACL_Call) Return(_a0 *types.ACL, _a1 error) *Client_GetACL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetACL_Call) RunAndReturn(run func(string) (*types.ACL, error)) *Client_GetACL_Call {
	_c.Call.Return(run)
	return _c
}

// GetCluster provides a mock function with given fields: id
func (_m *Client) GetCluster(id string) (*types.Cluster, error) {
	ret := _m.Called(id)

	var r0 *types.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Cluster, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Cluster); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCluster'
type Client_GetCluster_Call struct {
	*mock.Call
}

// GetCluster is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetCluster(id interface{}) *Client_GetCluster_Call {
	return &Client_GetCluster_Call{Call: _e.mock.On("GetCluster", id)}
}

func (_c *Client_GetCluster_Call) Run(run func(id string)) *Client_GetCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetCluster_Call) Return(_a0 *types.Cluster, _a1 error) *Client_GetCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetCluster_Call) RunAndReturn(run func(string) (*types.Cluster, error)) *Client_GetCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstance provides a mock function with given fields: id
func (_m *Client) GetInstance(id string) (*types.Instance, error) {
	ret := _m.Called(id)

	var r0 *types.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Instance, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Instance); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type Client_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetInstance(id interface{}) *Client_GetInstance_Call {
	return &Client_GetInstance_Call{Call: _e.mock.On("GetInstance", id)}
}

func (_c *Client_GetInstance_Call) Run(run func(id string)) *Client_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetInstance_Call) Return(_a0 *types.Instance, _a1 error) *Client_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetInstance_Call) RunAndReturn(run func(string) (*types.Instance, error)) *Client_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesNode provides a mock function with given fields: id
func (_m *Client) GetKubernetesNode(id string) (*types.K8sNode, error) {
	ret := _m.Called(id)

	var r0 *types.K8sNode
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.K8sNode, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.K8sNode); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.K8sNode)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetKubernetesNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesNode'
type Client_GetKubernetesNode_Call struct {
	*mock.Call
}

// GetKubernetesNode is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetKubernetesNode(id interface{}) *Client_GetKubernetesNode_Call {
	return &Client_GetKubernetesNode_Call{Call: _e.mock.On("GetKubernetesNode", id)}
}

func (_c *Client_GetKubernetesNode_Call) Run(run func(id string)) *Client_GetKubernetesNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetKubernetesNode_Call) Return(_a0 *types.K8sNode, _a1 error) *Client_GetKubernetesNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetKubernetesNode_Call) RunAndReturn(run func(string) (*types.K8sNode, error)) *Client_GetKubernetesNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetKubernetesService provides a mock function with given fields: id
func (_m *Client) GetKubernetesService(id string) (*types.K8SService, error) {
	ret := _m.Called(id)

	var r0 *types.K8SService
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.K8SService, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.K8SService); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.K8SService)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetKubernetesService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKubernetesService'
type Client_GetKubernetesService_Call struct {
	*mock.Call
}

// GetKubernetesService is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetKubernetesService(id interface{}) *Client_GetKubernetesService_Call {
	return &Client_GetKubernetesService_Call{Call: _e.mock.On("GetKubernetesService", id)}
}

func (_c *Client_GetKubernetesService_Call) Run(run func(id string)) *Client_GetKubernetesService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetKubernetesService_Call) Return(_a0 *types.K8SService, _a1 error) *Client_GetKubernetesService_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetKubernetesService_Call) RunAndReturn(run func(string) (*types.K8SService, error)) *Client_GetKubernetesService_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function with given fields: id
func (_m *Client) GetNamespace(id string) (*types.Namespace, error) {
	ret := _m.Called(id)

	var r0 *types.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Namespace, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Namespace); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type Client_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetNamespace(id interface{}) *Client_GetNamespace_Call {
	return &Client_GetNamespace_Call{Call: _e.mock.On("GetNamespace", id)}
}

func (_c *Client_GetNamespace_Call) Run(run func(id string)) *Client_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetNamespace_Call) Return(_a0 *types.Namespace, _a1 error) *Client_GetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetNamespace_Call) RunAndReturn(run func(string) (*types.Namespace, error)) *Client_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetPod provides a mock function with given fields: id
func (_m *Client) GetPod(id string) (*types.Pod, error) {
	ret := _m.Called(id)

	var r0 *types.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Pod, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Pod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPod'
type Client_GetPod_Call struct {
	*mock.Call
}

// GetPod is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetPod(id interface{}) *Client_GetPod_Call {
	return &Client_GetPod_Call{Call: _e.mock.On("GetPod", id)}
}

func (_c *Client_GetPod_Call) Run(run func(id string)) *Client_GetPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetPod_Call) Return(_a0 *types.Pod, _a1 error) *Client_GetPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetPod_Call) RunAndReturn(run func(string) (*types.Pod, error)) *Client_GetPod_Call {
	_c.Call.Return(run)
	return _c
}

// GetRouteTable provides a mock function with given fields: id
func (_m *Client) GetRouteTable(id string) (*types.RouteTable, error) {
	ret := _m.Called(id)

	var r0 *types.RouteTable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.RouteTable, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.RouteTable); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RouteTable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRouteTable'
type Client_GetRouteTable_Call struct {
	*mock.Call
}

// GetRouteTable is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetRouteTable(id interface{}) *Client_GetRouteTable_Call {
	return &Client_GetRouteTable_Call{Call: _e.mock.On("GetRouteTable", id)}
}

func (_c *Client_GetRouteTable_Call) Run(run func(id string)) *Client_GetRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetRouteTable_Call) Return(_a0 *types.RouteTable, _a1 error) *Client_GetRouteTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetRouteTable_Call) RunAndReturn(run func(string) (*types.RouteTable, error)) *Client_GetRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// GetSecurityGroup provides a mock function with given fields: id
func (_m *Client) GetSecurityGroup(id string) (*types.SecurityGroup, error) {
	ret := _m.Called(id)

	var r0 *types.SecurityGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.SecurityGroup, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.SecurityGroup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SecurityGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSecurityGroup'
type Client_GetSecurityGroup_Call struct {
	*mock.Call
}

// GetSecurityGroup is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetSecurityGroup(id interface{}) *Client_GetSecurityGroup_Call {
	return &Client_GetSecurityGroup_Call{Call: _e.mock.On("GetSecurityGroup", id)}
}

func (_c *Client_GetSecurityGroup_Call) Run(run func(id string)) *Client_GetSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetSecurityGroup_Call) Return(_a0 *types.SecurityGroup, _a1 error) *Client_GetSecurityGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSecurityGroup_Call) RunAndReturn(run func(string) (*types.SecurityGroup, error)) *Client_GetSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubnet provides a mock function with given fields: id
func (_m *Client) GetSubnet(id string) (*types.Subnet, error) {
	ret := _m.Called(id)

	var r0 *types.Subnet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.Subnet, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.Subnet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Subnet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubnet'
type Client_GetSubnet_Call struct {
	*mock.Call
}

// GetSubnet is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetSubnet(id interface{}) *Client_GetSubnet_Call {
	return &Client_GetSubnet_Call{Call: _e.mock.On("GetSubnet", id)}
}

func (_c *Client_GetSubnet_Call) Run(run func(id string)) *Client_GetSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetSubnet_Call) Return(_a0 *types.Subnet, _a1 error) *Client_GetSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSubnet_Call) RunAndReturn(run func(string) (*types.Subnet, error)) *Client_GetSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncTime provides a mock function with given fields: id
func (_m *Client) GetSyncTime(id string) (*types.SyncTime, error) {
	ret := _m.Called(id)

	var r0 *types.SyncTime
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.SyncTime, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.SyncTime); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SyncTime)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncTime'
type Client_GetSyncTime_Call struct {
	*mock.Call
}

// GetSyncTime is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetSyncTime(id interface{}) *Client_GetSyncTime_Call {
	return &Client_GetSyncTime_Call{Call: _e.mock.On("GetSyncTime", id)}
}

func (_c *Client_GetSyncTime_Call) Run(run func(id string)) *Client_GetSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetSyncTime_Call) Return(_a0 *types.SyncTime, _a1 error) *Client_GetSyncTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetSyncTime_Call) RunAndReturn(run func(string) (*types.SyncTime, error)) *Client_GetSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPC provides a mock function with given fields: id
func (_m *Client) GetVPC(id string) (*types.VPC, error) {
	ret := _m.Called(id)

	var r0 *types.VPC
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.VPC, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *types.VPC); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.VPC)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPC'
type Client_GetVPC_Call struct {
	*mock.Call
}

// GetVPC is a helper method to define mock.On call
//   - id string
func (_e *Client_Expecter) GetVPC(id interface{}) *Client_GetVPC_Call {
	return &Client_GetVPC_Call{Call: _e.mock.On("GetVPC", id)}
}

func (_c *Client_GetVPC_Call) Run(run func(id string)) *Client_GetVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_GetVPC_Call) Return(_a0 *types.VPC, _a1 error) *Client_GetVPC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetVPC_Call) RunAndReturn(run func(string) (*types.VPC, error)) *Client_GetVPC_Call {
	_c.Call.Return(run)
	return _c
}

// ListACLs provides a mock function with given fields:
func (_m *Client) ListACLs() ([]*types.ACL, error) {
	ret := _m.Called()

	var r0 []*types.ACL
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.ACL, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.ACL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.ACL)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListACLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListACLs'
type Client_ListACLs_Call struct {
	*mock.Call
}

// ListACLs is a helper method to define mock.On call
func (_e *Client_Expecter) ListACLs() *Client_ListACLs_Call {
	return &Client_ListACLs_Call{Call: _e.mock.On("ListACLs")}
}

func (_c *Client_ListACLs_Call) Run(run func()) *Client_ListACLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListACLs_Call) Return(_a0 []*types.ACL, _a1 error) *Client_ListACLs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListACLs_Call) RunAndReturn(run func() ([]*types.ACL, error)) *Client_ListACLs_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields:
func (_m *Client) ListClusters() ([]*types.Cluster, error) {
	ret := _m.Called()

	var r0 []*types.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Cluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type Client_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
func (_e *Client_Expecter) ListClusters() *Client_ListClusters_Call {
	return &Client_ListClusters_Call{Call: _e.mock.On("ListClusters")}
}

func (_c *Client_ListClusters_Call) Run(run func()) *Client_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListClusters_Call) Return(_a0 []*types.Cluster, _a1 error) *Client_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListClusters_Call) RunAndReturn(run func() ([]*types.Cluster, error)) *Client_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstances provides a mock function with given fields:
func (_m *Client) ListInstances() ([]*types.Instance, error) {
	ret := _m.Called()

	var r0 []*types.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Instance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Instance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type Client_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
func (_e *Client_Expecter) ListInstances() *Client_ListInstances_Call {
	return &Client_ListInstances_Call{Call: _e.mock.On("ListInstances")}
}

func (_c *Client_ListInstances_Call) Run(run func()) *Client_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListInstances_Call) Return(_a0 []*types.Instance, _a1 error) *Client_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListInstances_Call) RunAndReturn(run func() ([]*types.Instance, error)) *Client_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListKubernetesNodes provides a mock function with given fields:
func (_m *Client) ListKubernetesNodes() ([]*types.K8sNode, error) {
	ret := _m.Called()

	var r0 []*types.K8sNode
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.K8sNode, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.K8sNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.K8sNode)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListKubernetesNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKubernetesNodes'
type Client_ListKubernetesNodes_Call struct {
	*mock.Call
}

// ListKubernetesNodes is a helper method to define mock.On call
func (_e *Client_Expecter) ListKubernetesNodes() *Client_ListKubernetesNodes_Call {
	return &Client_ListKubernetesNodes_Call{Call: _e.mock.On("ListKubernetesNodes")}
}

func (_c *Client_ListKubernetesNodes_Call) Run(run func()) *Client_ListKubernetesNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListKubernetesNodes_Call) Return(_a0 []*types.K8sNode, _a1 error) *Client_ListKubernetesNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListKubernetesNodes_Call) RunAndReturn(run func() ([]*types.K8sNode, error)) *Client_ListKubernetesNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListKubernetesServices provides a mock function with given fields:
func (_m *Client) ListKubernetesServices() ([]*types.K8SService, error) {
	ret := _m.Called()

	var r0 []*types.K8SService
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.K8SService, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.K8SService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.K8SService)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListKubernetesServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListKubernetesServices'
type Client_ListKubernetesServices_Call struct {
	*mock.Call
}

// ListKubernetesServices is a helper method to define mock.On call
func (_e *Client_Expecter) ListKubernetesServices() *Client_ListKubernetesServices_Call {
	return &Client_ListKubernetesServices_Call{Call: _e.mock.On("ListKubernetesServices")}
}

func (_c *Client_ListKubernetesServices_Call) Run(run func()) *Client_ListKubernetesServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListKubernetesServices_Call) Return(_a0 []*types.K8SService, _a1 error) *Client_ListKubernetesServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListKubernetesServices_Call) RunAndReturn(run func() ([]*types.K8SService, error)) *Client_ListKubernetesServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields:
func (_m *Client) ListNamespaces() ([]*types.Namespace, error) {
	ret := _m.Called()

	var r0 []*types.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Namespace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type Client_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
func (_e *Client_Expecter) ListNamespaces() *Client_ListNamespaces_Call {
	return &Client_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces")}
}

func (_c *Client_ListNamespaces_Call) Run(run func()) *Client_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListNamespaces_Call) Return(_a0 []*types.Namespace, _a1 error) *Client_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListNamespaces_Call) RunAndReturn(run func() ([]*types.Namespace, error)) *Client_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields:
func (_m *Client) ListPods() ([]*types.Pod, error) {
	ret := _m.Called()

	var r0 []*types.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Pod, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Pod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type Client_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
func (_e *Client_Expecter) ListPods() *Client_ListPods_Call {
	return &Client_ListPods_Call{Call: _e.mock.On("ListPods")}
}

func (_c *Client_ListPods_Call) Run(run func()) *Client_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListPods_Call) Return(_a0 []*types.Pod, _a1 error) *Client_ListPods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListPods_Call) RunAndReturn(run func() ([]*types.Pod, error)) *Client_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// ListRouteTables provides a mock function with given fields:
func (_m *Client) ListRouteTables() ([]*types.RouteTable, error) {
	ret := _m.Called()

	var r0 []*types.RouteTable
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.RouteTable, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.RouteTable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.RouteTable)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRouteTables'
type Client_ListRouteTables_Call struct {
	*mock.Call
}

// ListRouteTables is a helper method to define mock.On call
func (_e *Client_Expecter) ListRouteTables() *Client_ListRouteTables_Call {
	return &Client_ListRouteTables_Call{Call: _e.mock.On("ListRouteTables")}
}

func (_c *Client_ListRouteTables_Call) Run(run func()) *Client_ListRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListRouteTables_Call) Return(_a0 []*types.RouteTable, _a1 error) *Client_ListRouteTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListRouteTables_Call) RunAndReturn(run func() ([]*types.RouteTable, error)) *Client_ListRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityGroups provides a mock function with given fields:
func (_m *Client) ListSecurityGroups() ([]*types.SecurityGroup, error) {
	ret := _m.Called()

	var r0 []*types.SecurityGroup
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.SecurityGroup, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.SecurityGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SecurityGroup)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityGroups'
type Client_ListSecurityGroups_Call struct {
	*mock.Call
}

// ListSecurityGroups is a helper method to define mock.On call
func (_e *Client_Expecter) ListSecurityGroups() *Client_ListSecurityGroups_Call {
	return &Client_ListSecurityGroups_Call{Call: _e.mock.On("ListSecurityGroups")}
}

func (_c *Client_ListSecurityGroups_Call) Run(run func()) *Client_ListSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListSecurityGroups_Call) Return(_a0 []*types.SecurityGroup, _a1 error) *Client_ListSecurityGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListSecurityGroups_Call) RunAndReturn(run func() ([]*types.SecurityGroup, error)) *Client_ListSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields:
func (_m *Client) ListSubnets() ([]*types.Subnet, error) {
	ret := _m.Called()

	var r0 []*types.Subnet
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.Subnet, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.Subnet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Subnet)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type Client_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
func (_e *Client_Expecter) ListSubnets() *Client_ListSubnets_Call {
	return &Client_ListSubnets_Call{Call: _e.mock.On("ListSubnets")}
}

func (_c *Client_ListSubnets_Call) Run(run func()) *Client_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListSubnets_Call) Return(_a0 []*types.Subnet, _a1 error) *Client_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListSubnets_Call) RunAndReturn(run func() ([]*types.Subnet, error)) *Client_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// ListSyncTimes provides a mock function with given fields:
func (_m *Client) ListSyncTimes() ([]*types.SyncTime, error) {
	ret := _m.Called()

	var r0 []*types.SyncTime
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.SyncTime, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.SyncTime); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.SyncTime)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListSyncTimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSyncTimes'
type Client_ListSyncTimes_Call struct {
	*mock.Call
}

// ListSyncTimes is a helper method to define mock.On call
func (_e *Client_Expecter) ListSyncTimes() *Client_ListSyncTimes_Call {
	return &Client_ListSyncTimes_Call{Call: _e.mock.On("ListSyncTimes")}
}

func (_c *Client_ListSyncTimes_Call) Run(run func()) *Client_ListSyncTimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListSyncTimes_Call) Return(_a0 []*types.SyncTime, _a1 error) *Client_ListSyncTimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListSyncTimes_Call) RunAndReturn(run func() ([]*types.SyncTime, error)) *Client_ListSyncTimes_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPCs provides a mock function with given fields:
func (_m *Client) ListVPCs() ([]*types.VPC, error) {
	ret := _m.Called()

	var r0 []*types.VPC
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*types.VPC, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*types.VPC); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.VPC)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_ListVPCs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPCs'
type Client_ListVPCs_Call struct {
	*mock.Call
}

// ListVPCs is a helper method to define mock.On call
func (_e *Client_Expecter) ListVPCs() *Client_ListVPCs_Call {
	return &Client_ListVPCs_Call{Call: _e.mock.On("ListVPCs")}
}

func (_c *Client_ListVPCs_Call) Run(run func()) *Client_ListVPCs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_ListVPCs_Call) Return(_a0 []*types.VPC, _a1 error) *Client_ListVPCs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_ListVPCs_Call) RunAndReturn(run func() ([]*types.VPC, error)) *Client_ListVPCs_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: filename
func (_m *Client) Open(filename string) error {
	ret := _m.Called(filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Client_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - filename string
func (_e *Client_Expecter) Open(filename interface{}) *Client_Open_Call {
	return &Client_Open_Call{Call: _e.mock.On("Open", filename)}
}

func (_c *Client_Open_Call) Run(run func(filename string)) *Client_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Client_Open_Call) Return(_a0 error) *Client_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Open_Call) RunAndReturn(run func(string) error) *Client_Open_Call {
	_c.Call.Return(run)
	return _c
}

// PutACL provides a mock function with given fields: acl
func (_m *Client) PutACL(acl *types.ACL) error {
	ret := _m.Called(acl)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ACL) error); ok {
		r0 = rf(acl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutACL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutACL'
type Client_PutACL_Call struct {
	*mock.Call
}

// PutACL is a helper method to define mock.On call
//   - acl *types.ACL
func (_e *Client_Expecter) PutACL(acl interface{}) *Client_PutACL_Call {
	return &Client_PutACL_Call{Call: _e.mock.On("PutACL", acl)}
}

func (_c *Client_PutACL_Call) Run(run func(acl *types.ACL)) *Client_PutACL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ACL))
	})
	return _c
}

func (_c *Client_PutACL_Call) Return(_a0 error) *Client_PutACL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutACL_Call) RunAndReturn(run func(*types.ACL) error) *Client_PutACL_Call {
	_c.Call.Return(run)
	return _c
}

// PutCluster provides a mock function with given fields: cluster
func (_m *Client) PutCluster(cluster *types.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCluster'
type Client_PutCluster_Call struct {
	*mock.Call
}

// PutCluster is a helper method to define mock.On call
//   - cluster *types.Cluster
func (_e *Client_Expecter) PutCluster(cluster interface{}) *Client_PutCluster_Call {
	return &Client_PutCluster_Call{Call: _e.mock.On("PutCluster", cluster)}
}

func (_c *Client_PutCluster_Call) Run(run func(cluster *types.Cluster)) *Client_PutCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Cluster))
	})
	return _c
}

func (_c *Client_PutCluster_Call) Return(_a0 error) *Client_PutCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutCluster_Call) RunAndReturn(run func(*types.Cluster) error) *Client_PutCluster_Call {
	_c.Call.Return(run)
	return _c
}

// PutInstance provides a mock function with given fields: instance
func (_m *Client) PutInstance(instance *types.Instance) error {
	ret := _m.Called(instance)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Instance) error); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutInstance'
type Client_PutInstance_Call struct {
	*mock.Call
}

// PutInstance is a helper method to define mock.On call
//   - instance *types.Instance
func (_e *Client_Expecter) PutInstance(instance interface{}) *Client_PutInstance_Call {
	return &Client_PutInstance_Call{Call: _e.mock.On("PutInstance", instance)}
}

func (_c *Client_PutInstance_Call) Run(run func(instance *types.Instance)) *Client_PutInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Instance))
	})
	return _c
}

func (_c *Client_PutInstance_Call) Return(_a0 error) *Client_PutInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutInstance_Call) RunAndReturn(run func(*types.Instance) error) *Client_PutInstance_Call {
	_c.Call.Return(run)
	return _c
}

// PutKubernetesNode provides a mock function with given fields: node
func (_m *Client) PutKubernetesNode(node *types.K8sNode) error {
	ret := _m.Called(node)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.K8sNode) error); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutKubernetesNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutKubernetesNode'
type Client_PutKubernetesNode_Call struct {
	*mock.Call
}

// PutKubernetesNode is a helper method to define mock.On call
//   - node *types.K8sNode
func (_e *Client_Expecter) PutKubernetesNode(node interface{}) *Client_PutKubernetesNode_Call {
	return &Client_PutKubernetesNode_Call{Call: _e.mock.On("PutKubernetesNode", node)}
}

func (_c *Client_PutKubernetesNode_Call) Run(run func(node *types.K8sNode)) *Client_PutKubernetesNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.K8sNode))
	})
	return _c
}

func (_c *Client_PutKubernetesNode_Call) Return(_a0 error) *Client_PutKubernetesNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutKubernetesNode_Call) RunAndReturn(run func(*types.K8sNode) error) *Client_PutKubernetesNode_Call {
	_c.Call.Return(run)
	return _c
}

// PutKubernetesService provides a mock function with given fields: service
func (_m *Client) PutKubernetesService(service *types.K8SService) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.K8SService) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutKubernetesService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutKubernetesService'
type Client_PutKubernetesService_Call struct {
	*mock.Call
}

// PutKubernetesService is a helper method to define mock.On call
//   - service *types.K8SService
func (_e *Client_Expecter) PutKubernetesService(service interface{}) *Client_PutKubernetesService_Call {
	return &Client_PutKubernetesService_Call{Call: _e.mock.On("PutKubernetesService", service)}
}

func (_c *Client_PutKubernetesService_Call) Run(run func(service *types.K8SService)) *Client_PutKubernetesService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.K8SService))
	})
	return _c
}

func (_c *Client_PutKubernetesService_Call) Return(_a0 error) *Client_PutKubernetesService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutKubernetesService_Call) RunAndReturn(run func(*types.K8SService) error) *Client_PutKubernetesService_Call {
	_c.Call.Return(run)
	return _c
}

// PutNamespace provides a mock function with given fields: namespace
func (_m *Client) PutNamespace(namespace *types.Namespace) error {
	ret := _m.Called(namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Namespace) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutNamespace'
type Client_PutNamespace_Call struct {
	*mock.Call
}

// PutNamespace is a helper method to define mock.On call
//   - namespace *types.Namespace
func (_e *Client_Expecter) PutNamespace(namespace interface{}) *Client_PutNamespace_Call {
	return &Client_PutNamespace_Call{Call: _e.mock.On("PutNamespace", namespace)}
}

func (_c *Client_PutNamespace_Call) Run(run func(namespace *types.Namespace)) *Client_PutNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Namespace))
	})
	return _c
}

func (_c *Client_PutNamespace_Call) Return(_a0 error) *Client_PutNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutNamespace_Call) RunAndReturn(run func(*types.Namespace) error) *Client_PutNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// PutPod provides a mock function with given fields: pod
func (_m *Client) PutPod(pod *types.Pod) error {
	ret := _m.Called(pod)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Pod) error); ok {
		r0 = rf(pod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPod'
type Client_PutPod_Call struct {
	*mock.Call
}

// PutPod is a helper method to define mock.On call
//   - pod *types.Pod
func (_e *Client_Expecter) PutPod(pod interface{}) *Client_PutPod_Call {
	return &Client_PutPod_Call{Call: _e.mock.On("PutPod", pod)}
}

func (_c *Client_PutPod_Call) Run(run func(pod *types.Pod)) *Client_PutPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Pod))
	})
	return _c
}

func (_c *Client_PutPod_Call) Return(_a0 error) *Client_PutPod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutPod_Call) RunAndReturn(run func(*types.Pod) error) *Client_PutPod_Call {
	_c.Call.Return(run)
	return _c
}

// PutRouteTable provides a mock function with given fields: routeTable
func (_m *Client) PutRouteTable(routeTable *types.RouteTable) error {
	ret := _m.Called(routeTable)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.RouteTable) error); ok {
		r0 = rf(routeTable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutRouteTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRouteTable'
type Client_PutRouteTable_Call struct {
	*mock.Call
}

// PutRouteTable is a helper method to define mock.On call
//   - routeTable *types.RouteTable
func (_e *Client_Expecter) PutRouteTable(routeTable interface{}) *Client_PutRouteTable_Call {
	return &Client_PutRouteTable_Call{Call: _e.mock.On("PutRouteTable", routeTable)}
}

func (_c *Client_PutRouteTable_Call) Run(run func(routeTable *types.RouteTable)) *Client_PutRouteTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.RouteTable))
	})
	return _c
}

func (_c *Client_PutRouteTable_Call) Return(_a0 error) *Client_PutRouteTable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutRouteTable_Call) RunAndReturn(run func(*types.RouteTable) error) *Client_PutRouteTable_Call {
	_c.Call.Return(run)
	return _c
}

// PutSecurityGroup provides a mock function with given fields: securityGroup
func (_m *Client) PutSecurityGroup(securityGroup *types.SecurityGroup) error {
	ret := _m.Called(securityGroup)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.SecurityGroup) error); ok {
		r0 = rf(securityGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutSecurityGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSecurityGroup'
type Client_PutSecurityGroup_Call struct {
	*mock.Call
}

// PutSecurityGroup is a helper method to define mock.On call
//   - securityGroup *types.SecurityGroup
func (_e *Client_Expecter) PutSecurityGroup(securityGroup interface{}) *Client_PutSecurityGroup_Call {
	return &Client_PutSecurityGroup_Call{Call: _e.mock.On("PutSecurityGroup", securityGroup)}
}

func (_c *Client_PutSecurityGroup_Call) Run(run func(securityGroup *types.SecurityGroup)) *Client_PutSecurityGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.SecurityGroup))
	})
	return _c
}

func (_c *Client_PutSecurityGroup_Call) Return(_a0 error) *Client_PutSecurityGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutSecurityGroup_Call) RunAndReturn(run func(*types.SecurityGroup) error) *Client_PutSecurityGroup_Call {
	_c.Call.Return(run)
	return _c
}

// PutSubnet provides a mock function with given fields: subnet
func (_m *Client) PutSubnet(subnet *types.Subnet) error {
	ret := _m.Called(subnet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Subnet) error); ok {
		r0 = rf(subnet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSubnet'
type Client_PutSubnet_Call struct {
	*mock.Call
}

// PutSubnet is a helper method to define mock.On call
//   - subnet *types.Subnet
func (_e *Client_Expecter) PutSubnet(subnet interface{}) *Client_PutSubnet_Call {
	return &Client_PutSubnet_Call{Call: _e.mock.On("PutSubnet", subnet)}
}

func (_c *Client_PutSubnet_Call) Run(run func(subnet *types.Subnet)) *Client_PutSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Subnet))
	})
	return _c
}

func (_c *Client_PutSubnet_Call) Return(_a0 error) *Client_PutSubnet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutSubnet_Call) RunAndReturn(run func(*types.Subnet) error) *Client_PutSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// PutSyncTime provides a mock function with given fields: time
func (_m *Client) PutSyncTime(time *types.SyncTime) error {
	ret := _m.Called(time)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.SyncTime) error); ok {
		r0 = rf(time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSyncTime'
type Client_PutSyncTime_Call struct {
	*mock.Call
}

// PutSyncTime is a helper method to define mock.On call
//   - time *types.SyncTime
func (_e *Client_Expecter) PutSyncTime(time interface{}) *Client_PutSyncTime_Call {
	return &Client_PutSyncTime_Call{Call: _e.mock.On("PutSyncTime", time)}
}

func (_c *Client_PutSyncTime_Call) Run(run func(time *types.SyncTime)) *Client_PutSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.SyncTime))
	})
	return _c
}

func (_c *Client_PutSyncTime_Call) Return(_a0 error) *Client_PutSyncTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutSyncTime_Call) RunAndReturn(run func(*types.SyncTime) error) *Client_PutSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// PutVPC provides a mock function with given fields: vpc
func (_m *Client) PutVPC(vpc *types.VPC) error {
	ret := _m.Called(vpc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.VPC) error); ok {
		r0 = rf(vpc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_PutVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutVPC'
type Client_PutVPC_Call struct {
	*mock.Call
}

// PutVPC is a helper method to define mock.On call
//   - vpc *types.VPC
func (_e *Client_Expecter) PutVPC(vpc interface{}) *Client_PutVPC_Call {
	return &Client_PutVPC_Call{Call: _e.mock.On("PutVPC", vpc)}
}

func (_c *Client_PutVPC_Call) Run(run func(vpc *types.VPC)) *Client_PutVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.VPC))
	})
	return _c
}

func (_c *Client_PutVPC_Call) Return(_a0 error) *Client_PutVPC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_PutVPC_Call) RunAndReturn(run func(*types.VPC) error) *Client_PutVPC_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
