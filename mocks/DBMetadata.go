// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/app-net-interface/awi-infra-guard/types"
)

// DBMetadata is an autogenerated mock type for the DBMetadata type
type DBMetadata struct {
	mock.Mock
}

type DBMetadata_Expecter struct {
	mock *mock.Mock
}

func (_m *DBMetadata) EXPECT() *DBMetadata_Expecter {
	return &DBMetadata_Expecter{mock: &_m.Mock}
}

// GetSyncTime provides a mock function with given fields: id
func (_m *DBMetadata) GetSyncTime(id string) (types.SyncTime, error) {
	ret := _m.Called(id)

	var r0 types.SyncTime
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.SyncTime, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) types.SyncTime); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(types.SyncTime)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DBMetadata_GetSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncTime'
type DBMetadata_GetSyncTime_Call struct {
	*mock.Call
}

// GetSyncTime is a helper method to define mock.On call
//   - id string
func (_e *DBMetadata_Expecter) GetSyncTime(id interface{}) *DBMetadata_GetSyncTime_Call {
	return &DBMetadata_GetSyncTime_Call{Call: _e.mock.On("GetSyncTime", id)}
}

func (_c *DBMetadata_GetSyncTime_Call) Run(run func(id string)) *DBMetadata_GetSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DBMetadata_GetSyncTime_Call) Return(_a0 types.SyncTime, _a1 error) *DBMetadata_GetSyncTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DBMetadata_GetSyncTime_Call) RunAndReturn(run func(string) (types.SyncTime, error)) *DBMetadata_GetSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBMetadata creates a new instance of DBMetadata. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBMetadata(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBMetadata {
	mock := &DBMetadata{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
