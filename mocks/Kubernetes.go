// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/app-net-interface/awi-infra-guard/types"
)

// Kubernetes is an autogenerated mock type for the Kubernetes type
type Kubernetes struct {
	mock.Mock
}

type Kubernetes_Expecter struct {
	mock *mock.Mock
}

func (_m *Kubernetes) EXPECT() *Kubernetes_Expecter {
	return &Kubernetes_Expecter{mock: &_m.Mock}
}

// GetSyncTime provides a mock function with given fields: id
func (_m *Kubernetes) GetSyncTime(id string) (types.SyncTime, error) {
	ret := _m.Called(id)

	var r0 types.SyncTime
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.SyncTime, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) types.SyncTime); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(types.SyncTime)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_GetSyncTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncTime'
type Kubernetes_GetSyncTime_Call struct {
	*mock.Call
}

// GetSyncTime is a helper method to define mock.On call
//   - id string
func (_e *Kubernetes_Expecter) GetSyncTime(id interface{}) *Kubernetes_GetSyncTime_Call {
	return &Kubernetes_GetSyncTime_Call{Call: _e.mock.On("GetSyncTime", id)}
}

func (_c *Kubernetes_GetSyncTime_Call) Run(run func(id string)) *Kubernetes_GetSyncTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Kubernetes_GetSyncTime_Call) Return(_a0 types.SyncTime, _a1 error) *Kubernetes_GetSyncTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Kubernetes_GetSyncTime_Call) RunAndReturn(run func(string) (types.SyncTime, error)) *Kubernetes_GetSyncTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields: ctx
func (_m *Kubernetes) ListClusters(ctx context.Context) ([]types.Cluster, error) {
	ret := _m.Called(ctx)

	var r0 []types.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.Cluster, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.Cluster); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type Kubernetes_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Kubernetes_Expecter) ListClusters(ctx interface{}) *Kubernetes_ListClusters_Call {
	return &Kubernetes_ListClusters_Call{Call: _e.mock.On("ListClusters", ctx)}
}

func (_c *Kubernetes_ListClusters_Call) Run(run func(ctx context.Context)) *Kubernetes_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Kubernetes_ListClusters_Call) Return(clusters []types.Cluster, err error) *Kubernetes_ListClusters_Call {
	_c.Call.Return(clusters, err)
	return _c
}

func (_c *Kubernetes_ListClusters_Call) RunAndReturn(run func(context.Context) ([]types.Cluster, error)) *Kubernetes_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: ctx, clusterName, labels
func (_m *Kubernetes) ListNamespaces(ctx context.Context, clusterName string, labels map[string]string) ([]types.Namespace, error) {
	ret := _m.Called(ctx, clusterName, labels)

	var r0 []types.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]types.Namespace, error)); ok {
		return rf(ctx, clusterName, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []types.Namespace); ok {
		r0 = rf(ctx, clusterName, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, clusterName, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type Kubernetes_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - labels map[string]string
func (_e *Kubernetes_Expecter) ListNamespaces(ctx interface{}, clusterName interface{}, labels interface{}) *Kubernetes_ListNamespaces_Call {
	return &Kubernetes_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", ctx, clusterName, labels)}
}

func (_c *Kubernetes_ListNamespaces_Call) Run(run func(ctx context.Context, clusterName string, labels map[string]string)) *Kubernetes_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *Kubernetes_ListNamespaces_Call) Return(namespaces []types.Namespace, err error) *Kubernetes_ListNamespaces_Call {
	_c.Call.Return(namespaces, err)
	return _c
}

func (_c *Kubernetes_ListNamespaces_Call) RunAndReturn(run func(context.Context, string, map[string]string) ([]types.Namespace, error)) *Kubernetes_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields: ctx, clusterName, labels
func (_m *Kubernetes) ListNodes(ctx context.Context, clusterName string, labels map[string]string) ([]types.K8sNode, error) {
	ret := _m.Called(ctx, clusterName, labels)

	var r0 []types.K8sNode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]types.K8sNode, error)); ok {
		return rf(ctx, clusterName, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []types.K8sNode); ok {
		r0 = rf(ctx, clusterName, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.K8sNode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, clusterName, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type Kubernetes_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - labels map[string]string
func (_e *Kubernetes_Expecter) ListNodes(ctx interface{}, clusterName interface{}, labels interface{}) *Kubernetes_ListNodes_Call {
	return &Kubernetes_ListNodes_Call{Call: _e.mock.On("ListNodes", ctx, clusterName, labels)}
}

func (_c *Kubernetes_ListNodes_Call) Run(run func(ctx context.Context, clusterName string, labels map[string]string)) *Kubernetes_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *Kubernetes_ListNodes_Call) Return(nodes []types.K8sNode, err error) *Kubernetes_ListNodes_Call {
	_c.Call.Return(nodes, err)
	return _c
}

func (_c *Kubernetes_ListNodes_Call) RunAndReturn(run func(context.Context, string, map[string]string) ([]types.K8sNode, error)) *Kubernetes_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields: ctx, clusterName, labels
func (_m *Kubernetes) ListPods(ctx context.Context, clusterName string, labels map[string]string) ([]types.Pod, error) {
	ret := _m.Called(ctx, clusterName, labels)

	var r0 []types.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]types.Pod, error)); ok {
		return rf(ctx, clusterName, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []types.Pod); ok {
		r0 = rf(ctx, clusterName, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, clusterName, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type Kubernetes_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - labels map[string]string
func (_e *Kubernetes_Expecter) ListPods(ctx interface{}, clusterName interface{}, labels interface{}) *Kubernetes_ListPods_Call {
	return &Kubernetes_ListPods_Call{Call: _e.mock.On("ListPods", ctx, clusterName, labels)}
}

func (_c *Kubernetes_ListPods_Call) Run(run func(ctx context.Context, clusterName string, labels map[string]string)) *Kubernetes_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *Kubernetes_ListPods_Call) Return(pods []types.Pod, err error) *Kubernetes_ListPods_Call {
	_c.Call.Return(pods, err)
	return _c
}

func (_c *Kubernetes_ListPods_Call) RunAndReturn(run func(context.Context, string, map[string]string) ([]types.Pod, error)) *Kubernetes_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodsCIDRs provides a mock function with given fields: ctx, clusterName
func (_m *Kubernetes) ListPodsCIDRs(ctx context.Context, clusterName string) ([]string, error) {
	ret := _m.Called(ctx, clusterName)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListPodsCIDRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodsCIDRs'
type Kubernetes_ListPodsCIDRs_Call struct {
	*mock.Call
}

// ListPodsCIDRs is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
func (_e *Kubernetes_Expecter) ListPodsCIDRs(ctx interface{}, clusterName interface{}) *Kubernetes_ListPodsCIDRs_Call {
	return &Kubernetes_ListPodsCIDRs_Call{Call: _e.mock.On("ListPodsCIDRs", ctx, clusterName)}
}

func (_c *Kubernetes_ListPodsCIDRs_Call) Run(run func(ctx context.Context, clusterName string)) *Kubernetes_ListPodsCIDRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Kubernetes_ListPodsCIDRs_Call) Return(_a0 []string, _a1 error) *Kubernetes_ListPodsCIDRs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Kubernetes_ListPodsCIDRs_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *Kubernetes_ListPodsCIDRs_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: ctx, clusterName, labels
func (_m *Kubernetes) ListServices(ctx context.Context, clusterName string, labels map[string]string) ([]types.K8SService, error) {
	ret := _m.Called(ctx, clusterName, labels)

	var r0 []types.K8SService
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]types.K8SService, error)); ok {
		return rf(ctx, clusterName, labels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []types.K8SService); ok {
		r0 = rf(ctx, clusterName, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.K8SService)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, clusterName, labels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type Kubernetes_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - labels map[string]string
func (_e *Kubernetes_Expecter) ListServices(ctx interface{}, clusterName interface{}, labels interface{}) *Kubernetes_ListServices_Call {
	return &Kubernetes_ListServices_Call{Call: _e.mock.On("ListServices", ctx, clusterName, labels)}
}

func (_c *Kubernetes_ListServices_Call) Run(run func(ctx context.Context, clusterName string, labels map[string]string)) *Kubernetes_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]string))
	})
	return _c
}

func (_c *Kubernetes_ListServices_Call) Return(services []types.K8SService, err error) *Kubernetes_ListServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *Kubernetes_ListServices_Call) RunAndReturn(run func(context.Context, string, map[string]string) ([]types.K8SService, error)) *Kubernetes_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListServicesCIDRs provides a mock function with given fields: ctx, clusterName
func (_m *Kubernetes) ListServicesCIDRs(ctx context.Context, clusterName string) (string, error) {
	ret := _m.Called(ctx, clusterName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, clusterName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kubernetes_ListServicesCIDRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServicesCIDRs'
type Kubernetes_ListServicesCIDRs_Call struct {
	*mock.Call
}

// ListServicesCIDRs is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
func (_e *Kubernetes_Expecter) ListServicesCIDRs(ctx interface{}, clusterName interface{}) *Kubernetes_ListServicesCIDRs_Call {
	return &Kubernetes_ListServicesCIDRs_Call{Call: _e.mock.On("ListServicesCIDRs", ctx, clusterName)}
}

func (_c *Kubernetes_ListServicesCIDRs_Call) Run(run func(ctx context.Context, clusterName string)) *Kubernetes_ListServicesCIDRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Kubernetes_ListServicesCIDRs_Call) Return(_a0 string, _a1 error) *Kubernetes_ListServicesCIDRs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Kubernetes_ListServicesCIDRs_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Kubernetes_ListServicesCIDRs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceSourceRanges provides a mock function with given fields: ctx, clusterName, namespace, name, cidrsToAdd, cidrsToRemove
func (_m *Kubernetes) UpdateServiceSourceRanges(ctx context.Context, clusterName string, namespace string, name string, cidrsToAdd []string, cidrsToRemove []string) error {
	ret := _m.Called(ctx, clusterName, namespace, name, cidrsToAdd, cidrsToRemove)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string) error); ok {
		r0 = rf(ctx, clusterName, namespace, name, cidrsToAdd, cidrsToRemove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Kubernetes_UpdateServiceSourceRanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceSourceRanges'
type Kubernetes_UpdateServiceSourceRanges_Call struct {
	*mock.Call
}

// UpdateServiceSourceRanges is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterName string
//   - namespace string
//   - name string
//   - cidrsToAdd []string
//   - cidrsToRemove []string
func (_e *Kubernetes_Expecter) UpdateServiceSourceRanges(ctx interface{}, clusterName interface{}, namespace interface{}, name interface{}, cidrsToAdd interface{}, cidrsToRemove interface{}) *Kubernetes_UpdateServiceSourceRanges_Call {
	return &Kubernetes_UpdateServiceSourceRanges_Call{Call: _e.mock.On("UpdateServiceSourceRanges", ctx, clusterName, namespace, name, cidrsToAdd, cidrsToRemove)}
}

func (_c *Kubernetes_UpdateServiceSourceRanges_Call) Run(run func(ctx context.Context, clusterName string, namespace string, name string, cidrsToAdd []string, cidrsToRemove []string)) *Kubernetes_UpdateServiceSourceRanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].([]string))
	})
	return _c
}

func (_c *Kubernetes_UpdateServiceSourceRanges_Call) Return(_a0 error) *Kubernetes_UpdateServiceSourceRanges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Kubernetes_UpdateServiceSourceRanges_Call) RunAndReturn(run func(context.Context, string, string, string, []string, []string) error) *Kubernetes_UpdateServiceSourceRanges_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubernetes creates a new instance of Kubernetes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubernetes(t interface {
	mock.TestingT
	Cleanup(func())
}) *Kubernetes {
	mock := &Kubernetes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
