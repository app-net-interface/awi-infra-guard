// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	infrapb "github.com/app-net-interface/awi-infra-guard/grpc/go/infrapb"

	mock "github.com/stretchr/testify/mock"
)

// CloudProviderServiceClient is an autogenerated mock type for the CloudProviderServiceClient type
type CloudProviderServiceClient struct {
	mock.Mock
}

type CloudProviderServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudProviderServiceClient) EXPECT() *CloudProviderServiceClient_Expecter {
	return &CloudProviderServiceClient_Expecter{mock: &_m.Mock}
}

// GetCIDRsForLabels provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetCIDRsForLabels(ctx context.Context, in *infrapb.GetCIDRsForLabelsRequest, opts ...grpc.CallOption) (*infrapb.GetCIDRsForLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetCIDRsForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest, ...grpc.CallOption) (*infrapb.GetCIDRsForLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest, ...grpc.CallOption) *infrapb.GetCIDRsForLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetCIDRsForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetCIDRsForLabelsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetCIDRsForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCIDRsForLabels'
type CloudProviderServiceClient_GetCIDRsForLabels_Call struct {
	*mock.Call
}

// GetCIDRsForLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetCIDRsForLabelsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetCIDRsForLabels(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetCIDRsForLabels_Call {
	return &CloudProviderServiceClient_GetCIDRsForLabels_Call{Call: _e.mock.On("GetCIDRsForLabels",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetCIDRsForLabels_Call) Run(run func(ctx context.Context, in *infrapb.GetCIDRsForLabelsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetCIDRsForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetCIDRsForLabelsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetCIDRsForLabels_Call) Return(_a0 *infrapb.GetCIDRsForLabelsResponse, _a1 error) *CloudProviderServiceClient_GetCIDRsForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetCIDRsForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetCIDRsForLabelsRequest, ...grpc.CallOption) (*infrapb.GetCIDRsForLabelsResponse, error)) *CloudProviderServiceClient_GetCIDRsForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetIPsForLabels provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetIPsForLabels(ctx context.Context, in *infrapb.GetIPsForLabelsRequest, opts ...grpc.CallOption) (*infrapb.GetIPsForLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetIPsForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetIPsForLabelsRequest, ...grpc.CallOption) (*infrapb.GetIPsForLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetIPsForLabelsRequest, ...grpc.CallOption) *infrapb.GetIPsForLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetIPsForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetIPsForLabelsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetIPsForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIPsForLabels'
type CloudProviderServiceClient_GetIPsForLabels_Call struct {
	*mock.Call
}

// GetIPsForLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetIPsForLabelsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetIPsForLabels(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetIPsForLabels_Call {
	return &CloudProviderServiceClient_GetIPsForLabels_Call{Call: _e.mock.On("GetIPsForLabels",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetIPsForLabels_Call) Run(run func(ctx context.Context, in *infrapb.GetIPsForLabelsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetIPsForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetIPsForLabelsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetIPsForLabels_Call) Return(_a0 *infrapb.GetIPsForLabelsResponse, _a1 error) *CloudProviderServiceClient_GetIPsForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetIPsForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetIPsForLabelsRequest, ...grpc.CallOption) (*infrapb.GetIPsForLabelsResponse, error)) *CloudProviderServiceClient_GetIPsForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetInstancesForLabels provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetInstancesForLabels(ctx context.Context, in *infrapb.GetInstancesForLabelsRequest, opts ...grpc.CallOption) (*infrapb.GetInstancesForLabelsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetInstancesForLabelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetInstancesForLabelsRequest, ...grpc.CallOption) (*infrapb.GetInstancesForLabelsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetInstancesForLabelsRequest, ...grpc.CallOption) *infrapb.GetInstancesForLabelsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetInstancesForLabelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetInstancesForLabelsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetInstancesForLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstancesForLabels'
type CloudProviderServiceClient_GetInstancesForLabels_Call struct {
	*mock.Call
}

// GetInstancesForLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetInstancesForLabelsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetInstancesForLabels(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetInstancesForLabels_Call {
	return &CloudProviderServiceClient_GetInstancesForLabels_Call{Call: _e.mock.On("GetInstancesForLabels",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetInstancesForLabels_Call) Run(run func(ctx context.Context, in *infrapb.GetInstancesForLabelsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetInstancesForLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetInstancesForLabelsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetInstancesForLabels_Call) Return(_a0 *infrapb.GetInstancesForLabelsResponse, _a1 error) *CloudProviderServiceClient_GetInstancesForLabels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetInstancesForLabels_Call) RunAndReturn(run func(context.Context, *infrapb.GetInstancesForLabelsRequest, ...grpc.CallOption) (*infrapb.GetInstancesForLabelsResponse, error)) *CloudProviderServiceClient_GetInstancesForLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubnet provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetSubnet(ctx context.Context, in *infrapb.GetSubnetRequest, opts ...grpc.CallOption) (*infrapb.GetSubnetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetSubnetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetSubnetRequest, ...grpc.CallOption) (*infrapb.GetSubnetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetSubnetRequest, ...grpc.CallOption) *infrapb.GetSubnetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetSubnetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetSubnetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetSubnet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubnet'
type CloudProviderServiceClient_GetSubnet_Call struct {
	*mock.Call
}

// GetSubnet is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetSubnetRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetSubnet(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetSubnet_Call {
	return &CloudProviderServiceClient_GetSubnet_Call{Call: _e.mock.On("GetSubnet",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetSubnet_Call) Run(run func(ctx context.Context, in *infrapb.GetSubnetRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetSubnet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetSubnetRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetSubnet_Call) Return(_a0 *infrapb.GetSubnetResponse, _a1 error) *CloudProviderServiceClient_GetSubnet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetSubnet_Call) RunAndReturn(run func(context.Context, *infrapb.GetSubnetRequest, ...grpc.CallOption) (*infrapb.GetSubnetResponse, error)) *CloudProviderServiceClient_GetSubnet_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCIDForCIDR provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetVPCIDForCIDR(ctx context.Context, in *infrapb.GetVPCIDForCIDRRequest, opts ...grpc.CallOption) (*infrapb.GetVPCIDForCIDRResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetVPCIDForCIDRResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest, ...grpc.CallOption) (*infrapb.GetVPCIDForCIDRResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest, ...grpc.CallOption) *infrapb.GetVPCIDForCIDRResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetVPCIDForCIDRResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetVPCIDForCIDRRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetVPCIDForCIDR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCIDForCIDR'
type CloudProviderServiceClient_GetVPCIDForCIDR_Call struct {
	*mock.Call
}

// GetVPCIDForCIDR is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetVPCIDForCIDRRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetVPCIDForCIDR(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetVPCIDForCIDR_Call {
	return &CloudProviderServiceClient_GetVPCIDForCIDR_Call{Call: _e.mock.On("GetVPCIDForCIDR",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetVPCIDForCIDR_Call) Run(run func(ctx context.Context, in *infrapb.GetVPCIDForCIDRRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetVPCIDForCIDR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetVPCIDForCIDRRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetVPCIDForCIDR_Call) Return(_a0 *infrapb.GetVPCIDForCIDRResponse, _a1 error) *CloudProviderServiceClient_GetVPCIDForCIDR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetVPCIDForCIDR_Call) RunAndReturn(run func(context.Context, *infrapb.GetVPCIDForCIDRRequest, ...grpc.CallOption) (*infrapb.GetVPCIDForCIDRResponse, error)) *CloudProviderServiceClient_GetVPCIDForCIDR_Call {
	_c.Call.Return(run)
	return _c
}

// GetVPCIDWithTag provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) GetVPCIDWithTag(ctx context.Context, in *infrapb.GetVPCIDWithTagRequest, opts ...grpc.CallOption) (*infrapb.GetVPCIDWithTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.GetVPCIDWithTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDWithTagRequest, ...grpc.CallOption) (*infrapb.GetVPCIDWithTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.GetVPCIDWithTagRequest, ...grpc.CallOption) *infrapb.GetVPCIDWithTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.GetVPCIDWithTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.GetVPCIDWithTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_GetVPCIDWithTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVPCIDWithTag'
type CloudProviderServiceClient_GetVPCIDWithTag_Call struct {
	*mock.Call
}

// GetVPCIDWithTag is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.GetVPCIDWithTagRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) GetVPCIDWithTag(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_GetVPCIDWithTag_Call {
	return &CloudProviderServiceClient_GetVPCIDWithTag_Call{Call: _e.mock.On("GetVPCIDWithTag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_GetVPCIDWithTag_Call) Run(run func(ctx context.Context, in *infrapb.GetVPCIDWithTagRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_GetVPCIDWithTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.GetVPCIDWithTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_GetVPCIDWithTag_Call) Return(_a0 *infrapb.GetVPCIDWithTagResponse, _a1 error) *CloudProviderServiceClient_GetVPCIDWithTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_GetVPCIDWithTag_Call) RunAndReturn(run func(context.Context, *infrapb.GetVPCIDWithTagRequest, ...grpc.CallOption) (*infrapb.GetVPCIDWithTagResponse, error)) *CloudProviderServiceClient_GetVPCIDWithTag_Call {
	_c.Call.Return(run)
	return _c
}

// ListACLs provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListACLs(ctx context.Context, in *infrapb.ListACLsRequest, opts ...grpc.CallOption) (*infrapb.ListACLsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListACLsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListACLsRequest, ...grpc.CallOption) (*infrapb.ListACLsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListACLsRequest, ...grpc.CallOption) *infrapb.ListACLsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListACLsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListACLsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListACLs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListACLs'
type CloudProviderServiceClient_ListACLs_Call struct {
	*mock.Call
}

// ListACLs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListACLsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListACLs(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListACLs_Call {
	return &CloudProviderServiceClient_ListACLs_Call{Call: _e.mock.On("ListACLs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListACLs_Call) Run(run func(ctx context.Context, in *infrapb.ListACLsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListACLs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListACLsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListACLs_Call) Return(_a0 *infrapb.ListACLsResponse, _a1 error) *CloudProviderServiceClient_ListACLs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListACLs_Call) RunAndReturn(run func(context.Context, *infrapb.ListACLsRequest, ...grpc.CallOption) (*infrapb.ListACLsResponse, error)) *CloudProviderServiceClient_ListACLs_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListAccounts(ctx context.Context, in *infrapb.ListAccountsRequest, opts ...grpc.CallOption) (*infrapb.ListAccountsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListAccountsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListAccountsRequest, ...grpc.CallOption) (*infrapb.ListAccountsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListAccountsRequest, ...grpc.CallOption) *infrapb.ListAccountsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListAccountsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListAccountsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type CloudProviderServiceClient_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListAccountsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListAccounts(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListAccounts_Call {
	return &CloudProviderServiceClient_ListAccounts_Call{Call: _e.mock.On("ListAccounts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListAccounts_Call) Run(run func(ctx context.Context, in *infrapb.ListAccountsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListAccountsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListAccounts_Call) Return(_a0 *infrapb.ListAccountsResponse, _a1 error) *CloudProviderServiceClient_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListAccounts_Call) RunAndReturn(run func(context.Context, *infrapb.ListAccountsRequest, ...grpc.CallOption) (*infrapb.ListAccountsResponse, error)) *CloudProviderServiceClient_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// ListCloudClusters provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListCloudClusters(ctx context.Context, in *infrapb.ListCloudClustersRequest, opts ...grpc.CallOption) (*infrapb.ListCloudClustersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListCloudClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListCloudClustersRequest, ...grpc.CallOption) (*infrapb.ListCloudClustersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListCloudClustersRequest, ...grpc.CallOption) *infrapb.ListCloudClustersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListCloudClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListCloudClustersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListCloudClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCloudClusters'
type CloudProviderServiceClient_ListCloudClusters_Call struct {
	*mock.Call
}

// ListCloudClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListCloudClustersRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListCloudClusters(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListCloudClusters_Call {
	return &CloudProviderServiceClient_ListCloudClusters_Call{Call: _e.mock.On("ListCloudClusters",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListCloudClusters_Call) Run(run func(ctx context.Context, in *infrapb.ListCloudClustersRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListCloudClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListCloudClustersRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListCloudClusters_Call) Return(_a0 *infrapb.ListCloudClustersResponse, _a1 error) *CloudProviderServiceClient_ListCloudClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListCloudClusters_Call) RunAndReturn(run func(context.Context, *infrapb.ListCloudClustersRequest, ...grpc.CallOption) (*infrapb.ListCloudClustersResponse, error)) *CloudProviderServiceClient_ListCloudClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstances provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListInstances(ctx context.Context, in *infrapb.ListInstancesRequest, opts ...grpc.CallOption) (*infrapb.ListInstancesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListInstancesRequest, ...grpc.CallOption) (*infrapb.ListInstancesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListInstancesRequest, ...grpc.CallOption) *infrapb.ListInstancesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListInstancesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListInstances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstances'
type CloudProviderServiceClient_ListInstances_Call struct {
	*mock.Call
}

// ListInstances is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListInstancesRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListInstances(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListInstances_Call {
	return &CloudProviderServiceClient_ListInstances_Call{Call: _e.mock.On("ListInstances",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListInstances_Call) Run(run func(ctx context.Context, in *infrapb.ListInstancesRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListInstances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListInstancesRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListInstances_Call) Return(_a0 *infrapb.ListInstancesResponse, _a1 error) *CloudProviderServiceClient_ListInstances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListInstances_Call) RunAndReturn(run func(context.Context, *infrapb.ListInstancesRequest, ...grpc.CallOption) (*infrapb.ListInstancesResponse, error)) *CloudProviderServiceClient_ListInstances_Call {
	_c.Call.Return(run)
	return _c
}

// ListRouteTables provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListRouteTables(ctx context.Context, in *infrapb.ListRouteTablesRequest, opts ...grpc.CallOption) (*infrapb.ListRouteTablesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListRouteTablesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListRouteTablesRequest, ...grpc.CallOption) (*infrapb.ListRouteTablesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListRouteTablesRequest, ...grpc.CallOption) *infrapb.ListRouteTablesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListRouteTablesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListRouteTablesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListRouteTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRouteTables'
type CloudProviderServiceClient_ListRouteTables_Call struct {
	*mock.Call
}

// ListRouteTables is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListRouteTablesRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListRouteTables(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListRouteTables_Call {
	return &CloudProviderServiceClient_ListRouteTables_Call{Call: _e.mock.On("ListRouteTables",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListRouteTables_Call) Run(run func(ctx context.Context, in *infrapb.ListRouteTablesRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListRouteTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListRouteTablesRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListRouteTables_Call) Return(_a0 *infrapb.ListRouteTablesResponse, _a1 error) *CloudProviderServiceClient_ListRouteTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListRouteTables_Call) RunAndReturn(run func(context.Context, *infrapb.ListRouteTablesRequest, ...grpc.CallOption) (*infrapb.ListRouteTablesResponse, error)) *CloudProviderServiceClient_ListRouteTables_Call {
	_c.Call.Return(run)
	return _c
}

// ListSecurityGroups provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListSecurityGroups(ctx context.Context, in *infrapb.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*infrapb.ListSecurityGroupsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListSecurityGroupsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSecurityGroupsRequest, ...grpc.CallOption) (*infrapb.ListSecurityGroupsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSecurityGroupsRequest, ...grpc.CallOption) *infrapb.ListSecurityGroupsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListSecurityGroupsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListSecurityGroupsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListSecurityGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSecurityGroups'
type CloudProviderServiceClient_ListSecurityGroups_Call struct {
	*mock.Call
}

// ListSecurityGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListSecurityGroupsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListSecurityGroups(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListSecurityGroups_Call {
	return &CloudProviderServiceClient_ListSecurityGroups_Call{Call: _e.mock.On("ListSecurityGroups",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListSecurityGroups_Call) Run(run func(ctx context.Context, in *infrapb.ListSecurityGroupsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListSecurityGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListSecurityGroupsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListSecurityGroups_Call) Return(_a0 *infrapb.ListSecurityGroupsResponse, _a1 error) *CloudProviderServiceClient_ListSecurityGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListSecurityGroups_Call) RunAndReturn(run func(context.Context, *infrapb.ListSecurityGroupsRequest, ...grpc.CallOption) (*infrapb.ListSecurityGroupsResponse, error)) *CloudProviderServiceClient_ListSecurityGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubnets provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListSubnets(ctx context.Context, in *infrapb.ListSubnetsRequest, opts ...grpc.CallOption) (*infrapb.ListSubnetsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListSubnetsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSubnetsRequest, ...grpc.CallOption) (*infrapb.ListSubnetsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListSubnetsRequest, ...grpc.CallOption) *infrapb.ListSubnetsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListSubnetsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListSubnetsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListSubnets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubnets'
type CloudProviderServiceClient_ListSubnets_Call struct {
	*mock.Call
}

// ListSubnets is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListSubnetsRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListSubnets(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListSubnets_Call {
	return &CloudProviderServiceClient_ListSubnets_Call{Call: _e.mock.On("ListSubnets",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListSubnets_Call) Run(run func(ctx context.Context, in *infrapb.ListSubnetsRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListSubnets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListSubnetsRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListSubnets_Call) Return(_a0 *infrapb.ListSubnetsResponse, _a1 error) *CloudProviderServiceClient_ListSubnets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListSubnets_Call) RunAndReturn(run func(context.Context, *infrapb.ListSubnetsRequest, ...grpc.CallOption) (*infrapb.ListSubnetsResponse, error)) *CloudProviderServiceClient_ListSubnets_Call {
	_c.Call.Return(run)
	return _c
}

// ListVPC provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) ListVPC(ctx context.Context, in *infrapb.ListVPCRequest, opts ...grpc.CallOption) (*infrapb.ListVPCResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.ListVPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListVPCRequest, ...grpc.CallOption) (*infrapb.ListVPCResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListVPCRequest, ...grpc.CallOption) *infrapb.ListVPCResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListVPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListVPCRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_ListVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVPC'
type CloudProviderServiceClient_ListVPC_Call struct {
	*mock.Call
}

// ListVPC is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.ListVPCRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) ListVPC(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_ListVPC_Call {
	return &CloudProviderServiceClient_ListVPC_Call{Call: _e.mock.On("ListVPC",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_ListVPC_Call) Run(run func(ctx context.Context, in *infrapb.ListVPCRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_ListVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.ListVPCRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_ListVPC_Call) Return(_a0 *infrapb.ListVPCResponse, _a1 error) *CloudProviderServiceClient_ListVPC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_ListVPC_Call) RunAndReturn(run func(context.Context, *infrapb.ListVPCRequest, ...grpc.CallOption) (*infrapb.ListVPCResponse, error)) *CloudProviderServiceClient_ListVPC_Call {
	_c.Call.Return(run)
	return _c
}

// Summary provides a mock function with given fields: ctx, in, opts
func (_m *CloudProviderServiceClient) Summary(ctx context.Context, in *infrapb.SummaryRequest, opts ...grpc.CallOption) (*infrapb.SummaryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *infrapb.SummaryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.SummaryRequest, ...grpc.CallOption) (*infrapb.SummaryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.SummaryRequest, ...grpc.CallOption) *infrapb.SummaryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.SummaryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.SummaryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudProviderServiceClient_Summary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Summary'
type CloudProviderServiceClient_Summary_Call struct {
	*mock.Call
}

// Summary is a helper method to define mock.On call
//   - ctx context.Context
//   - in *infrapb.SummaryRequest
//   - opts ...grpc.CallOption
func (_e *CloudProviderServiceClient_Expecter) Summary(ctx interface{}, in interface{}, opts ...interface{}) *CloudProviderServiceClient_Summary_Call {
	return &CloudProviderServiceClient_Summary_Call{Call: _e.mock.On("Summary",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CloudProviderServiceClient_Summary_Call) Run(run func(ctx context.Context, in *infrapb.SummaryRequest, opts ...grpc.CallOption)) *CloudProviderServiceClient_Summary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*infrapb.SummaryRequest), variadicArgs...)
	})
	return _c
}

func (_c *CloudProviderServiceClient_Summary_Call) Return(_a0 *infrapb.SummaryResponse, _a1 error) *CloudProviderServiceClient_Summary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudProviderServiceClient_Summary_Call) RunAndReturn(run func(context.Context, *infrapb.SummaryRequest, ...grpc.CallOption) (*infrapb.SummaryResponse, error)) *CloudProviderServiceClient_Summary_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudProviderServiceClient creates a new instance of CloudProviderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudProviderServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudProviderServiceClient {
	mock := &CloudProviderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
