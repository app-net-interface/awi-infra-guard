// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	infrapb "github.com/app-net-interface/awi-infra-guard/grpc/go/infrapb"
)

// AccessControlServiceServer is an autogenerated mock type for the AccessControlServiceServer type
type AccessControlServiceServer struct {
	mock.Mock
}

type AccessControlServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessControlServiceServer) EXPECT() *AccessControlServiceServer_Expecter {
	return &AccessControlServiceServer_Expecter{mock: &_m.Mock}
}

// AddInboundAllowRuleByInstanceIPMatch provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) AddInboundAllowRuleByInstanceIPMatch(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest) (*infrapb.AddInboundAllowRuleByInstanceIPMatchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.AddInboundAllowRuleByInstanceIPMatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest) (*infrapb.AddInboundAllowRuleByInstanceIPMatchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest) *infrapb.AddInboundAllowRuleByInstanceIPMatchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.AddInboundAllowRuleByInstanceIPMatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleByInstanceIPMatch'
type AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleByInstanceIPMatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest
func (_e *AccessControlServiceServer_Expecter) AddInboundAllowRuleByInstanceIPMatch(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call {
	return &AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call{Call: _e.mock.On("AddInboundAllowRuleByInstanceIPMatch", _a0, _a1)}
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call) Run(run func(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest)) *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.AddInboundAllowRuleByInstanceIPMatchRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call) Return(_a0 *infrapb.AddInboundAllowRuleByInstanceIPMatchResponse, _a1 error) *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call) RunAndReturn(run func(context.Context, *infrapb.AddInboundAllowRuleByInstanceIPMatchRequest) (*infrapb.AddInboundAllowRuleByInstanceIPMatchResponse, error)) *AccessControlServiceServer_AddInboundAllowRuleByInstanceIPMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleByLabelsMatch provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) AddInboundAllowRuleByLabelsMatch(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleByLabelsMatchRequest) (*infrapb.AddInboundAllowRuleByLabelsMatchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.AddInboundAllowRuleByLabelsMatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleByLabelsMatchRequest) (*infrapb.AddInboundAllowRuleByLabelsMatchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleByLabelsMatchRequest) *infrapb.AddInboundAllowRuleByLabelsMatchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.AddInboundAllowRuleByLabelsMatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.AddInboundAllowRuleByLabelsMatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleByLabelsMatch'
type AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleByLabelsMatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.AddInboundAllowRuleByLabelsMatchRequest
func (_e *AccessControlServiceServer_Expecter) AddInboundAllowRuleByLabelsMatch(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call {
	return &AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call{Call: _e.mock.On("AddInboundAllowRuleByLabelsMatch", _a0, _a1)}
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call) Run(run func(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleByLabelsMatchRequest)) *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.AddInboundAllowRuleByLabelsMatchRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call) Return(_a0 *infrapb.AddInboundAllowRuleByLabelsMatchResponse, _a1 error) *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call) RunAndReturn(run func(context.Context, *infrapb.AddInboundAllowRuleByLabelsMatchRequest) (*infrapb.AddInboundAllowRuleByLabelsMatchResponse, error)) *AccessControlServiceServer_AddInboundAllowRuleByLabelsMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleBySubnetMatch provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) AddInboundAllowRuleBySubnetMatch(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleBySubnetMatchRequest) (*infrapb.AddInboundAllowRuleBySubnetMatchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.AddInboundAllowRuleBySubnetMatchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleBySubnetMatchRequest) (*infrapb.AddInboundAllowRuleBySubnetMatchResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleBySubnetMatchRequest) *infrapb.AddInboundAllowRuleBySubnetMatchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.AddInboundAllowRuleBySubnetMatchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.AddInboundAllowRuleBySubnetMatchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleBySubnetMatch'
type AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call struct {
	*mock.Call
}

// AddInboundAllowRuleBySubnetMatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.AddInboundAllowRuleBySubnetMatchRequest
func (_e *AccessControlServiceServer_Expecter) AddInboundAllowRuleBySubnetMatch(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call {
	return &AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call{Call: _e.mock.On("AddInboundAllowRuleBySubnetMatch", _a0, _a1)}
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call) Run(run func(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleBySubnetMatchRequest)) *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.AddInboundAllowRuleBySubnetMatchRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call) Return(_a0 *infrapb.AddInboundAllowRuleBySubnetMatchResponse, _a1 error) *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call) RunAndReturn(run func(context.Context, *infrapb.AddInboundAllowRuleBySubnetMatchRequest) (*infrapb.AddInboundAllowRuleBySubnetMatchResponse, error)) *AccessControlServiceServer_AddInboundAllowRuleBySubnetMatch_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleForLoadBalancerByDNS provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) AddInboundAllowRuleForLoadBalancerByDNS(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest) (*infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest) (*infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest) *infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleForLoadBalancerByDNS'
type AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call struct {
	*mock.Call
}

// AddInboundAllowRuleForLoadBalancerByDNS is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest
func (_e *AccessControlServiceServer_Expecter) AddInboundAllowRuleForLoadBalancerByDNS(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	return &AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call{Call: _e.mock.On("AddInboundAllowRuleForLoadBalancerByDNS", _a0, _a1)}
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call) Run(run func(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest)) *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call) Return(_a0 *infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse, _a1 error) *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call) RunAndReturn(run func(context.Context, *infrapb.AddInboundAllowRuleForLoadBalancerByDNSRequest) (*infrapb.AddInboundAllowRuleForLoadBalancerByDNSResponse, error)) *AccessControlServiceServer_AddInboundAllowRuleForLoadBalancerByDNS_Call {
	_c.Call.Return(run)
	return _c
}

// AddInboundAllowRuleInVPC provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) AddInboundAllowRuleInVPC(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleInVPCRequest) (*infrapb.AddInboundAllowRuleInVPCResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.AddInboundAllowRuleInVPCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleInVPCRequest) (*infrapb.AddInboundAllowRuleInVPCResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.AddInboundAllowRuleInVPCRequest) *infrapb.AddInboundAllowRuleInVPCResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.AddInboundAllowRuleInVPCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.AddInboundAllowRuleInVPCRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_AddInboundAllowRuleInVPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddInboundAllowRuleInVPC'
type AccessControlServiceServer_AddInboundAllowRuleInVPC_Call struct {
	*mock.Call
}

// AddInboundAllowRuleInVPC is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.AddInboundAllowRuleInVPCRequest
func (_e *AccessControlServiceServer_Expecter) AddInboundAllowRuleInVPC(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call {
	return &AccessControlServiceServer_AddInboundAllowRuleInVPC_Call{Call: _e.mock.On("AddInboundAllowRuleInVPC", _a0, _a1)}
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call) Run(run func(_a0 context.Context, _a1 *infrapb.AddInboundAllowRuleInVPCRequest)) *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.AddInboundAllowRuleInVPCRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call) Return(_a0 *infrapb.AddInboundAllowRuleInVPCResponse, _a1 error) *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call) RunAndReturn(run func(context.Context, *infrapb.AddInboundAllowRuleInVPCRequest) (*infrapb.AddInboundAllowRuleInVPCResponse, error)) *AccessControlServiceServer_AddInboundAllowRuleInVPC_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshInboundAllowRule provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) RefreshInboundAllowRule(_a0 context.Context, _a1 *infrapb.RefreshInboundAllowRuleRequest) (*infrapb.RefreshInboundAllowRuleResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.RefreshInboundAllowRuleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RefreshInboundAllowRuleRequest) (*infrapb.RefreshInboundAllowRuleResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RefreshInboundAllowRuleRequest) *infrapb.RefreshInboundAllowRuleResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.RefreshInboundAllowRuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.RefreshInboundAllowRuleRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_RefreshInboundAllowRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshInboundAllowRule'
type AccessControlServiceServer_RefreshInboundAllowRule_Call struct {
	*mock.Call
}

// RefreshInboundAllowRule is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.RefreshInboundAllowRuleRequest
func (_e *AccessControlServiceServer_Expecter) RefreshInboundAllowRule(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_RefreshInboundAllowRule_Call {
	return &AccessControlServiceServer_RefreshInboundAllowRule_Call{Call: _e.mock.On("RefreshInboundAllowRule", _a0, _a1)}
}

func (_c *AccessControlServiceServer_RefreshInboundAllowRule_Call) Run(run func(_a0 context.Context, _a1 *infrapb.RefreshInboundAllowRuleRequest)) *AccessControlServiceServer_RefreshInboundAllowRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.RefreshInboundAllowRuleRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_RefreshInboundAllowRule_Call) Return(_a0 *infrapb.RefreshInboundAllowRuleResponse, _a1 error) *AccessControlServiceServer_RefreshInboundAllowRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_RefreshInboundAllowRule_Call) RunAndReturn(run func(context.Context, *infrapb.RefreshInboundAllowRuleRequest) (*infrapb.RefreshInboundAllowRuleResponse, error)) *AccessControlServiceServer_RefreshInboundAllowRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRuleFromVPCByName provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) RemoveInboundAllowRuleFromVPCByName(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest) (*infrapb.RemoveInboundAllowRuleFromVPCByNameResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.RemoveInboundAllowRuleFromVPCByNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest) (*infrapb.RemoveInboundAllowRuleFromVPCByNameResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest) *infrapb.RemoveInboundAllowRuleFromVPCByNameResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.RemoveInboundAllowRuleFromVPCByNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRuleFromVPCByName'
type AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call struct {
	*mock.Call
}

// RemoveInboundAllowRuleFromVPCByName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest
func (_e *AccessControlServiceServer_Expecter) RemoveInboundAllowRuleFromVPCByName(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call {
	return &AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call{Call: _e.mock.On("RemoveInboundAllowRuleFromVPCByName", _a0, _a1)}
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call) Run(run func(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest)) *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.RemoveInboundAllowRuleFromVPCByNameRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call) Return(_a0 *infrapb.RemoveInboundAllowRuleFromVPCByNameResponse, _a1 error) *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call) RunAndReturn(run func(context.Context, *infrapb.RemoveInboundAllowRuleFromVPCByNameRequest) (*infrapb.RemoveInboundAllowRuleFromVPCByNameResponse, error)) *AccessControlServiceServer_RemoveInboundAllowRuleFromVPCByName_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRuleRulesByTags provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) RemoveInboundAllowRuleRulesByTags(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRuleRulesByTagsRequest) (*infrapb.RemoveInboundAllowRuleRulesByTagsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.RemoveInboundAllowRuleRulesByTagsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRuleRulesByTagsRequest) (*infrapb.RemoveInboundAllowRuleRulesByTagsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRuleRulesByTagsRequest) *infrapb.RemoveInboundAllowRuleRulesByTagsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.RemoveInboundAllowRuleRulesByTagsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.RemoveInboundAllowRuleRulesByTagsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRuleRulesByTags'
type AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call struct {
	*mock.Call
}

// RemoveInboundAllowRuleRulesByTags is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.RemoveInboundAllowRuleRulesByTagsRequest
func (_e *AccessControlServiceServer_Expecter) RemoveInboundAllowRuleRulesByTags(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call {
	return &AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call{Call: _e.mock.On("RemoveInboundAllowRuleRulesByTags", _a0, _a1)}
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call) Run(run func(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRuleRulesByTagsRequest)) *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.RemoveInboundAllowRuleRulesByTagsRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call) Return(_a0 *infrapb.RemoveInboundAllowRuleRulesByTagsResponse, _a1 error) *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call) RunAndReturn(run func(context.Context, *infrapb.RemoveInboundAllowRuleRulesByTagsRequest) (*infrapb.RemoveInboundAllowRuleRulesByTagsResponse, error)) *AccessControlServiceServer_RemoveInboundAllowRuleRulesByTags_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInboundAllowRulesFromVPCById provides a mock function with given fields: _a0, _a1
func (_m *AccessControlServiceServer) RemoveInboundAllowRulesFromVPCById(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest) (*infrapb.RemoveInboundAllowRulesFromVPCByIdResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.RemoveInboundAllowRulesFromVPCByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest) (*infrapb.RemoveInboundAllowRulesFromVPCByIdResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest) *infrapb.RemoveInboundAllowRulesFromVPCByIdResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.RemoveInboundAllowRulesFromVPCByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInboundAllowRulesFromVPCById'
type AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call struct {
	*mock.Call
}

// RemoveInboundAllowRulesFromVPCById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest
func (_e *AccessControlServiceServer_Expecter) RemoveInboundAllowRulesFromVPCById(_a0 interface{}, _a1 interface{}) *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call {
	return &AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call{Call: _e.mock.On("RemoveInboundAllowRulesFromVPCById", _a0, _a1)}
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call) Run(run func(_a0 context.Context, _a1 *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest)) *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.RemoveInboundAllowRulesFromVPCByIdRequest))
	})
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call) Return(_a0 *infrapb.RemoveInboundAllowRulesFromVPCByIdResponse, _a1 error) *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call) RunAndReturn(run func(context.Context, *infrapb.RemoveInboundAllowRulesFromVPCByIdRequest) (*infrapb.RemoveInboundAllowRulesFromVPCByIdResponse, error)) *AccessControlServiceServer_RemoveInboundAllowRulesFromVPCById_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedAccessControlServiceServer provides a mock function with given fields:
func (_m *AccessControlServiceServer) mustEmbedUnimplementedAccessControlServiceServer() {
	_m.Called()
}

// AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedAccessControlServiceServer'
type AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedAccessControlServiceServer is a helper method to define mock.On call
func (_e *AccessControlServiceServer_Expecter) mustEmbedUnimplementedAccessControlServiceServer() *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call {
	return &AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedAccessControlServiceServer")}
}

func (_c *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call) Run(run func()) *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call) Return() *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call) RunAndReturn(run func()) *AccessControlServiceServer_mustEmbedUnimplementedAccessControlServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessControlServiceServer creates a new instance of AccessControlServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessControlServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessControlServiceServer {
	mock := &AccessControlServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
