// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	infrapb "github.com/app-net-interface/awi-infra-guard/grpc/go/infrapb"
)

// KubernetesServiceServer is an autogenerated mock type for the KubernetesServiceServer type
type KubernetesServiceServer struct {
	mock.Mock
}

type KubernetesServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *KubernetesServiceServer) EXPECT() *KubernetesServiceServer_Expecter {
	return &KubernetesServiceServer_Expecter{mock: &_m.Mock}
}

// ListClusters provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListClusters(_a0 context.Context, _a1 *infrapb.ListClustersRequest) (*infrapb.ListClustersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListClustersRequest) (*infrapb.ListClustersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListClustersRequest) *infrapb.ListClustersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListClustersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type KubernetesServiceServer_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListClustersRequest
func (_e *KubernetesServiceServer_Expecter) ListClusters(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListClusters_Call {
	return &KubernetesServiceServer_ListClusters_Call{Call: _e.mock.On("ListClusters", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListClusters_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListClustersRequest)) *KubernetesServiceServer_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListClustersRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListClusters_Call) Return(_a0 *infrapb.ListClustersResponse, _a1 error) *KubernetesServiceServer_ListClusters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListClusters_Call) RunAndReturn(run func(context.Context, *infrapb.ListClustersRequest) (*infrapb.ListClustersResponse, error)) *KubernetesServiceServer_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListNamespaces(_a0 context.Context, _a1 *infrapb.ListNamespacesRequest) (*infrapb.ListNamespacesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListNamespacesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListNamespacesRequest) (*infrapb.ListNamespacesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListNamespacesRequest) *infrapb.ListNamespacesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListNamespacesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListNamespacesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type KubernetesServiceServer_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListNamespacesRequest
func (_e *KubernetesServiceServer_Expecter) ListNamespaces(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListNamespaces_Call {
	return &KubernetesServiceServer_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListNamespaces_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListNamespacesRequest)) *KubernetesServiceServer_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListNamespacesRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListNamespaces_Call) Return(_a0 *infrapb.ListNamespacesResponse, _a1 error) *KubernetesServiceServer_ListNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListNamespaces_Call) RunAndReturn(run func(context.Context, *infrapb.ListNamespacesRequest) (*infrapb.ListNamespacesResponse, error)) *KubernetesServiceServer_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListNodes(_a0 context.Context, _a1 *infrapb.ListNodesRequest) (*infrapb.ListNodesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListNodesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListNodesRequest) (*infrapb.ListNodesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListNodesRequest) *infrapb.ListNodesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListNodesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListNodesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type KubernetesServiceServer_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListNodesRequest
func (_e *KubernetesServiceServer_Expecter) ListNodes(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListNodes_Call {
	return &KubernetesServiceServer_ListNodes_Call{Call: _e.mock.On("ListNodes", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListNodes_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListNodesRequest)) *KubernetesServiceServer_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListNodesRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListNodes_Call) Return(_a0 *infrapb.ListNodesResponse, _a1 error) *KubernetesServiceServer_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListNodes_Call) RunAndReturn(run func(context.Context, *infrapb.ListNodesRequest) (*infrapb.ListNodesResponse, error)) *KubernetesServiceServer_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListPods(_a0 context.Context, _a1 *infrapb.ListPodsRequest) (*infrapb.ListPodsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListPodsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListPodsRequest) (*infrapb.ListPodsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListPodsRequest) *infrapb.ListPodsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListPodsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListPodsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type KubernetesServiceServer_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListPodsRequest
func (_e *KubernetesServiceServer_Expecter) ListPods(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListPods_Call {
	return &KubernetesServiceServer_ListPods_Call{Call: _e.mock.On("ListPods", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListPods_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListPodsRequest)) *KubernetesServiceServer_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListPodsRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListPods_Call) Return(_a0 *infrapb.ListPodsResponse, _a1 error) *KubernetesServiceServer_ListPods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListPods_Call) RunAndReturn(run func(context.Context, *infrapb.ListPodsRequest) (*infrapb.ListPodsResponse, error)) *KubernetesServiceServer_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// ListPodsCIDRs provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListPodsCIDRs(_a0 context.Context, _a1 *infrapb.ListPodsCIDRsRequest) (*infrapb.ListPodsCIDRsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListPodsCIDRsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListPodsCIDRsRequest) (*infrapb.ListPodsCIDRsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListPodsCIDRsRequest) *infrapb.ListPodsCIDRsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListPodsCIDRsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListPodsCIDRsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListPodsCIDRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPodsCIDRs'
type KubernetesServiceServer_ListPodsCIDRs_Call struct {
	*mock.Call
}

// ListPodsCIDRs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListPodsCIDRsRequest
func (_e *KubernetesServiceServer_Expecter) ListPodsCIDRs(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListPodsCIDRs_Call {
	return &KubernetesServiceServer_ListPodsCIDRs_Call{Call: _e.mock.On("ListPodsCIDRs", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListPodsCIDRs_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListPodsCIDRsRequest)) *KubernetesServiceServer_ListPodsCIDRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListPodsCIDRsRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListPodsCIDRs_Call) Return(_a0 *infrapb.ListPodsCIDRsResponse, _a1 error) *KubernetesServiceServer_ListPodsCIDRs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListPodsCIDRs_Call) RunAndReturn(run func(context.Context, *infrapb.ListPodsCIDRsRequest) (*infrapb.ListPodsCIDRsResponse, error)) *KubernetesServiceServer_ListPodsCIDRs_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListServices(_a0 context.Context, _a1 *infrapb.ListServicesRequest) (*infrapb.ListServicesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListServicesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListServicesRequest) (*infrapb.ListServicesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListServicesRequest) *infrapb.ListServicesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListServicesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListServicesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type KubernetesServiceServer_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListServicesRequest
func (_e *KubernetesServiceServer_Expecter) ListServices(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListServices_Call {
	return &KubernetesServiceServer_ListServices_Call{Call: _e.mock.On("ListServices", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListServices_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListServicesRequest)) *KubernetesServiceServer_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListServicesRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListServices_Call) Return(_a0 *infrapb.ListServicesResponse, _a1 error) *KubernetesServiceServer_ListServices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListServices_Call) RunAndReturn(run func(context.Context, *infrapb.ListServicesRequest) (*infrapb.ListServicesResponse, error)) *KubernetesServiceServer_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListServicesCIDRs provides a mock function with given fields: _a0, _a1
func (_m *KubernetesServiceServer) ListServicesCIDRs(_a0 context.Context, _a1 *infrapb.ListServicesCIDRsRequest) (*infrapb.ListServicesCIDRsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *infrapb.ListServicesCIDRsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListServicesCIDRsRequest) (*infrapb.ListServicesCIDRsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *infrapb.ListServicesCIDRsRequest) *infrapb.ListServicesCIDRsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrapb.ListServicesCIDRsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *infrapb.ListServicesCIDRsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesServiceServer_ListServicesCIDRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServicesCIDRs'
type KubernetesServiceServer_ListServicesCIDRs_Call struct {
	*mock.Call
}

// ListServicesCIDRs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *infrapb.ListServicesCIDRsRequest
func (_e *KubernetesServiceServer_Expecter) ListServicesCIDRs(_a0 interface{}, _a1 interface{}) *KubernetesServiceServer_ListServicesCIDRs_Call {
	return &KubernetesServiceServer_ListServicesCIDRs_Call{Call: _e.mock.On("ListServicesCIDRs", _a0, _a1)}
}

func (_c *KubernetesServiceServer_ListServicesCIDRs_Call) Run(run func(_a0 context.Context, _a1 *infrapb.ListServicesCIDRsRequest)) *KubernetesServiceServer_ListServicesCIDRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*infrapb.ListServicesCIDRsRequest))
	})
	return _c
}

func (_c *KubernetesServiceServer_ListServicesCIDRs_Call) Return(_a0 *infrapb.ListServicesCIDRsResponse, _a1 error) *KubernetesServiceServer_ListServicesCIDRs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesServiceServer_ListServicesCIDRs_Call) RunAndReturn(run func(context.Context, *infrapb.ListServicesCIDRsRequest) (*infrapb.ListServicesCIDRsResponse, error)) *KubernetesServiceServer_ListServicesCIDRs_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedKubernetesServiceServer provides a mock function with given fields:
func (_m *KubernetesServiceServer) mustEmbedUnimplementedKubernetesServiceServer() {
	_m.Called()
}

// KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedKubernetesServiceServer'
type KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedKubernetesServiceServer is a helper method to define mock.On call
func (_e *KubernetesServiceServer_Expecter) mustEmbedUnimplementedKubernetesServiceServer() *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call {
	return &KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedKubernetesServiceServer")}
}

func (_c *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call) Run(run func()) *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call) Return() *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call) RunAndReturn(run func()) *KubernetesServiceServer_mustEmbedUnimplementedKubernetesServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubernetesServiceServer creates a new instance of KubernetesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubernetesServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubernetesServiceServer {
	mock := &KubernetesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
